contract complexRent{
	
 party Lessor{
  name:String
  amount:Money
  changeUse()
  changeLate(LateDay:Integer)
  finishLate()
  back()
  confirmContinue(result:Boolean)
  endRent()
  getAA1()
  payCompensation1()
 }
 
 party Lessee{
  name:String
  amount:Money
  payFirst()
  payRegular()
  payRegularLate(LateDay:Integer)
  continue(days:Integer)
  getAA2()
  payCompensation2()
 }
 
 party ca{
 	check(checkResult:Boolean)
 }
 
 party aa{
 	aaSetResult(name:String,Compensation:Integer)
 }
 
 party ra{
 	pauseContract()
 	restartContract()
 }
 
 thing: Thing
 info1:contractInfo
 result:Boolean
 faultIR:Float
 faultName:String
 compensation:Integer
 lateDays:Integer
 continueDays:Integer
 continue:Boolean
 
 	term no1: ca can check
 	when before info1::startDate
 	where result=checkResult.
 	
 	term no2: Lessee can payFirst
 	when result=true and before info1::startDate
 	while transfer $info1::rent+info1::depositMoney to Lessor.
 	
 	term no3: Lessor must changeUse
 	when after Lessee did payFirst and before info1::startDate
 	where thing::useRight=Lessee.
 	
 	//表达不完全
 	term no4: Lessor can changeLate
 	when within 5 day after info1::startDate
 	while transfer $info1::rent*faultIR to Lessee
 	where lateDays=LateDay.
 	
 	//表达不完全,3,4未完成
 	term no5: Lessor can finishLate
 	when after 5 day after info1::startDate
 	while transfer $info1::rent*faultIR to Lessee
 	and transfer $info1::rent+info1::depositMoney to Lessee.
 	
 	term no6: Lessee can payRegular
 	when within 1 day after info1::payDate+info1::payDuration
 	while transfer $info1::rent to Lessor
 	where info1::payDate=now.
 	
 	//表达不完全
	term no7: Lessee can payRegularLate
 	when within 5 day after info1::payDate+info1::payDuration
 	//while transfer $info1::rent*lateDays*faultIR to Lessor
 	while transfer $info1::rent*lateDays to Lessor
 	where info1::payDate=info1::payDate+info1::payDuration.
 	
 	term no8: Lessor can back
 	when after 5 day after info1::payDate+info1::payDuration
 	where thing::useRight=Lessor.
 	
 	//顺序不对
 	term no9: Lessee can continue
 	when before info1::finishDate
 	while transfer $info1::continueRent*continueDays to Lessor
 	where continueDays=days.
 	
 	//顺序不对
 	term no10_1: Lessor can confirmContinue
 	when after Lessee did continue and continue=true
 	where continue=result and info1::finishDate=info1::finishDate+continueDays.
 	
 	term no10_2: Lessor can confirmContinue
 	when after Lessee did continue and continue=false
 	while transfer $info1::continueRent*continueDays to Lessee
 	where continue=result.
 	
 	term no11: Lessor can endRent
 	when after info1::finishDate
 	while transfer $info1::depositMoney to Lessee::amount
 	where thing::useRight=Lessor.
 	
 	//无效
	term no12: ra can pauseContract.
	term no13: ra can restartContract.
	
	term no14: Lessor can getAA1.
	term no15: Lessee can getAA2. 
	 
	term no16: aa can aaSetResult
	when Lessor did getAA1 or Lessee did getAA2
	where faultName=name and compensation=Compensation.
	 
	term no17_1: Lessor can payCompensation1
	when after aa did aaSetResult and faultName=Lessor::name
	while transfer $compensation to Lessee.
	 
	term no17_2: Lessee can payCompensation2
	when after aa did aaSetResult and faultName=Lessee::name
	while transfer $compensation to Lessor.

  type contractInfo{
  payDate:Date
  signTime:Date
  rent:Money
  continueRent:Money
  depositMoney:Money
  startDate:Date
  finishDate:Date
  payDuration:Integer
  }
 
  asset Thing{
  info
  {
   name:String
   day_rent:Integer
   days:Integer
  }
  right{
   ownership:Right
   useRight:Right
  }
 }

 }