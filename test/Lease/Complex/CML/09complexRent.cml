namespace cml.examples

import cml.generator.annotation.solidity.*

@PullPayment
contract ComplexRent	
	Party lessor
	Party lessee
	Party ca
	Party aa
	Party ra
	Integer rent
	Integer continueRent
	Integer continueDays
	Integer despoit
	Duration payPeriod
	Duration payLate
	Duration totalPeriod
	Integer faultIR
	DateTime startTime
	DateTime payTime
	DateTime finishTime
	Boolean end
	Boolean continueResult
	String faultName
	Integer compensation
	Boolean finalResult
	String ownership
	String useRight
	
	clause rule1
		due before startTime
		party ca
		may checkResult
	
	clause rule2
		due before startTime
		given finalResult=true
		party lessee
		may payOne
		
	//不完全
	//due after lessee did payOne
	clause rule3
		due before startTime
		given !end
		party lessor
		must changeUse
		
	clause rule4  
		due within payLate after clause rule3 failed
		given !end
		party lessor
		may deliveryLate
	
	//不完全
	clause rule5
		due after startTime.addDuration(payLate)
		given !end
		party lessor
		may lateFinish
	
	clause rule6
		due every payPeriod from startTime before finishTime
		party lessee
		may payRegular
		
	clause rule7
		due within payLate after payTime
		given !end
		party lessee
		may payLate
		
	clause rule8
		due after payTime.addDuration(payLate)
		given !end
		party lessor
		may backThing
		
	clause rule9
		due before startTime.addDuration(totalPeriod)
		party lessee
		may confirmContinue
		
	clause rule10
		due after lessee did confirmContinue
		given !end
		party lessor
		may setContinue
		
	//表达不了行为
	clause rule10_1
		due after lessor did setContinue
		given !end and continueResult
		party lessor
		may changeFinish
		
	clause rule10_2
		due after lessor did setContinue
		given !end and !continueResult
		party lessor
		may rejectChange
	
	clause rule11
		due after startTime.addDuration(totalPeriod)
		given !end
		party lessor
		may finishBack
		
	clause rule12
		party ra 
		may pauseContract
		
	clause rule13
		party ra
		may restartContract
		
	clause rule14
		party lessor
		may getAA
		
	clause rule15
		party lessee
		may getAA
		
	//表达不了或
	clause rule16
		due after lessor did getAA
		party aa
		may setSolution
		
	clause rule17_1
		due after aa did setSolution
		given faultName=='lessor'
		party lessor
		may payFaultLO
		
	clause rule17_2
		due after aa did setSolution
		given faultName=='lessee'
		party lessee
		may payFaultLE
		
	action init(Party _lessor,Party _lessee,Party _ca,Party _aa,
	Party _ra,Integer _rent,Integer _despoit,Duration _payPeriod,Duration _payLate,
	Duration _totalPeriod,Integer _faultIR,DateTime _startTime,DateTime _payTime,
	DateTime _finishTime,String _ownership,String _useRight,Integer _continueRent,
	Integer _continueDays)
		lessor=_lessor
		lessee=_lessee
		ca=_ca
		aa=_aa
		ra=_ra
		rent=_rent
		despoit=_despoit
		payPeriod=_payPeriod
		payLate=_payLate
		totalPeriod=_totalPeriod
		faultIR=_faultIR
		startTime=_startTime
		payTime=_payTime
		finishTime=_finishTime
		ownership=_ownership
		useRight=_useRight
		continueRent=_continueRent
		continueDays=_continueDays
		
	action checkResult(Boolean result)
		finalResult=result
		
	action payOne()
		transfer(lessor,despoit+rent)
		
	action changeUse()
		useRight='lessee'
		
	action deliveryLate(Integer latedays)
		useRight='lessee'
		transfer(lessee,faultIR*rent*latedays)
		
	action lateFinish(Integer latedays)
		transfer(lessee,faultIR*rent*latedays+rent+despoit)
		end=true
		
	action payRegular()
		transfer(lessor,rent)
		payTime=payTime.addDuration(payPeriod)
		
	action payLate(Integer latedays)
		transfer(lessor,faultIR*rent*latedays)
		
	action backThing()
		useRight='lessor'
		end = true
		
	action confirmContinue(Integer Days)
		continueDays=Days
		transfer(lessor,continueRent*continueDays)
		
	action setContinue(Boolean result)
		continueResult=result
		
	action changeFinish()
		//finishTime.addDuration(continueDays)
		
	action rejectChange()
		transfer(lessee,continueRent*continueDays)
		
	action finishBack()
		useRight='lessee'
		transfer(lessee,despoit)
		end=true
	
	action pauseContract()
		end=true
	
	action restartContract()
		end=false
		
	action getAA()
	
	action setSolution(String _faultName,Integer _compensation)
		faultName=_faultName
		compensation=_compensation
		
	action payFaultLE()
		transfer(lessor,compensation)
		
	action payFaultLO()
		transfer(lessee,compensation)
		