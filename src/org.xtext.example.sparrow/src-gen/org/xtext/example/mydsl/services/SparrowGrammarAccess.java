/*
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SparrowGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPackageNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPackageNameIDTerminalRuleCall_0_1_0 = (RuleCall)cPackageNameAssignment_0_1.eContents().get(0);
		private final Keyword cContractKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendNameIDTerminalRuleCall_3_1_0 = (RuleCall)cExtendNameAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSubjectsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSubjectsSubjectParserRuleCall_5_0 = (RuleCall)cSubjectsAssignment_5.eContents().get(0);
		private final Assignment cObjectsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cObjectsObjectParserRuleCall_6_0 = (RuleCall)cObjectsAssignment_6.eContents().get(0);
		private final Assignment cGroupAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cGroupGroupParserRuleCall_7_0 = (RuleCall)cGroupAssignment_7.eContents().get(0);
		private final Assignment cInitializeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cInitializeInitializeParserRuleCall_8_0 = (RuleCall)cInitializeAssignment_8.eContents().get(0);
		private final Assignment cContractMessageAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cContractMessageContractMessageParserRuleCall_9_0 = (RuleCall)cContractMessageAssignment_9.eContents().get(0);
		private final Assignment cConditionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cConditionsConditionParserRuleCall_10_0 = (RuleCall)cConditionsAssignment_10.eContents().get(0);
		private final Assignment cOperationsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cOperationsOperationParserRuleCall_11_0 = (RuleCall)cOperationsAssignment_11.eContents().get(0);
		private final Assignment cRuleStructuresAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cRuleStructuresRuleStructureParserRuleCall_12_0 = (RuleCall)cRuleStructuresAssignment_12.eContents().get(0);
		private final Assignment cRequireAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cRequireRequireParserRuleCall_13_0 = (RuleCall)cRequireAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Model:
		//    (
		//    ('import' packageName+=ID)*
		//    'Contract' name=ID
		//    ('extends' extendName=ID)?
		//    '{'
		//    subjects+=Subject*
		//    objects+=Object*
		//    group+=Group*
		//    (initialize=Initialize)?
		//    (contractMessage=ContractMessage)?
		//    Conditions=Condition?
		//    operations=Operation?
		//    ruleStructures=RuleStructure?
		//    (require=Require)?
		//    '}')?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//('import' packageName+=ID)*
		//'Contract' name=ID
		//('extends' extendName=ID)?
		//'{'
		//subjects+=Subject*
		//objects+=Object*
		//group+=Group*
		//(initialize=Initialize)?
		//(contractMessage=ContractMessage)?
		//Conditions=Condition?
		//operations=Operation?
		//ruleStructures=RuleStructure?
		//(require=Require)?
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//('import' packageName+=ID)*
		public Group getGroup_0() { return cGroup_0; }
		
		//'import'
		public Keyword getImportKeyword_0_0() { return cImportKeyword_0_0; }
		
		//packageName+=ID
		public Assignment getPackageNameAssignment_0_1() { return cPackageNameAssignment_0_1; }
		
		//ID
		public RuleCall getPackageNameIDTerminalRuleCall_0_1_0() { return cPackageNameIDTerminalRuleCall_0_1_0; }
		
		//'Contract'
		public Keyword getContractKeyword_1() { return cContractKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' extendName=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//extendName=ID
		public Assignment getExtendNameAssignment_3_1() { return cExtendNameAssignment_3_1; }
		
		//ID
		public RuleCall getExtendNameIDTerminalRuleCall_3_1_0() { return cExtendNameIDTerminalRuleCall_3_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//subjects+=Subject*
		public Assignment getSubjectsAssignment_5() { return cSubjectsAssignment_5; }
		
		//Subject
		public RuleCall getSubjectsSubjectParserRuleCall_5_0() { return cSubjectsSubjectParserRuleCall_5_0; }
		
		//objects+=Object*
		public Assignment getObjectsAssignment_6() { return cObjectsAssignment_6; }
		
		//Object
		public RuleCall getObjectsObjectParserRuleCall_6_0() { return cObjectsObjectParserRuleCall_6_0; }
		
		//group+=Group*
		public Assignment getGroupAssignment_7() { return cGroupAssignment_7; }
		
		//Group
		public RuleCall getGroupGroupParserRuleCall_7_0() { return cGroupGroupParserRuleCall_7_0; }
		
		//(initialize=Initialize)?
		public Assignment getInitializeAssignment_8() { return cInitializeAssignment_8; }
		
		//Initialize
		public RuleCall getInitializeInitializeParserRuleCall_8_0() { return cInitializeInitializeParserRuleCall_8_0; }
		
		//(contractMessage=ContractMessage)?
		public Assignment getContractMessageAssignment_9() { return cContractMessageAssignment_9; }
		
		//ContractMessage
		public RuleCall getContractMessageContractMessageParserRuleCall_9_0() { return cContractMessageContractMessageParserRuleCall_9_0; }
		
		//Conditions=Condition?
		public Assignment getConditionsAssignment_10() { return cConditionsAssignment_10; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_10_0() { return cConditionsConditionParserRuleCall_10_0; }
		
		//operations=Operation?
		public Assignment getOperationsAssignment_11() { return cOperationsAssignment_11; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_11_0() { return cOperationsOperationParserRuleCall_11_0; }
		
		//ruleStructures=RuleStructure?
		public Assignment getRuleStructuresAssignment_12() { return cRuleStructuresAssignment_12; }
		
		//RuleStructure
		public RuleCall getRuleStructuresRuleStructureParserRuleCall_12_0() { return cRuleStructuresRuleStructureParserRuleCall_12_0; }
		
		//(require=Require)?
		public Assignment getRequireAssignment_13() { return cRequireAssignment_13; }
		
		//Require
		public RuleCall getRequireRequireParserRuleCall_13_0() { return cRequireRequireParserRuleCall_13_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class RequireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Require");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueConditiontypeParserRuleCall_2_0_0 = (RuleCall)cValueAlternatives_2_0.eContents().get(0);
		private final RuleCall cValueActiontypeParserRuleCall_2_0_1 = (RuleCall)cValueAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final RuleCall cValueConditiontypeParserRuleCall_3_1_0_0 = (RuleCall)cValueAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cValueActiontypeParserRuleCall_3_1_0_1 = (RuleCall)cValueAlternatives_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Require:
		//    'Require' ':' value+=(conditiontype|actiontype) (',' value+=(conditiontype|actiontype))* ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Require' ':' value+=(conditiontype|actiontype) (',' value+=(conditiontype|actiontype))* ';'
		public Group getGroup() { return cGroup; }
		
		//'Require'
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value+=(conditiontype|actiontype)
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//(conditiontype|actiontype)
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//conditiontype
		public RuleCall getValueConditiontypeParserRuleCall_2_0_0() { return cValueConditiontypeParserRuleCall_2_0_0; }
		
		//actiontype
		public RuleCall getValueActiontypeParserRuleCall_2_0_1() { return cValueActiontypeParserRuleCall_2_0_1; }
		
		//(',' value+=(conditiontype|actiontype))*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//value+=(conditiontype|actiontype)
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//(conditiontype|actiontype)
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//conditiontype
		public RuleCall getValueConditiontypeParserRuleCall_3_1_0_0() { return cValueConditiontypeParserRuleCall_3_1_0_0; }
		
		//actiontype
		public RuleCall getValueActiontypeParserRuleCall_3_1_0_1() { return cValueActiontypeParserRuleCall_3_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ConditiontypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.conditiontype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIsTimeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIsTrueKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLogicKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCheckKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIsCompletedKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIsDoneKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIsRequestKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCompareStringKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cTimeSubKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cSetDateKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//conditiontype:
		//    "isTime"|"isTrue"|"logic"|"check"|"isCompleted"|"isDone"|"isRequest"|"compareString"|"timeSub"|"SetDate"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"isTime"|"isTrue"|"logic"|"check"|"isCompleted"|"isDone"|"isRequest"|"compareString"|"timeSub"|"SetDate"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"isTime"
		public Keyword getIsTimeKeyword_0() { return cIsTimeKeyword_0; }
		
		//"isTrue"
		public Keyword getIsTrueKeyword_1() { return cIsTrueKeyword_1; }
		
		//"logic"
		public Keyword getLogicKeyword_2() { return cLogicKeyword_2; }
		
		//"check"
		public Keyword getCheckKeyword_3() { return cCheckKeyword_3; }
		
		//"isCompleted"
		public Keyword getIsCompletedKeyword_4() { return cIsCompletedKeyword_4; }
		
		//"isDone"
		public Keyword getIsDoneKeyword_5() { return cIsDoneKeyword_5; }
		
		//"isRequest"
		public Keyword getIsRequestKeyword_6() { return cIsRequestKeyword_6; }
		
		//"compareString"
		public Keyword getCompareStringKeyword_7() { return cCompareStringKeyword_7; }
		
		//"timeSub"
		public Keyword getTimeSubKeyword_8() { return cTimeSubKeyword_8; }
		
		//"SetDate"
		public Keyword getSetDateKeyword_9() { return cSetDateKeyword_9; }
	}
	public class ActiontypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.actiontype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTransferKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cChangeStateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//actiontype:
		//    "transfer"|"changeState"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"transfer"|"changeState"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"transfer"
		public Keyword getTransferKeyword_0() { return cTransferKeyword_0; }
		
		//"changeState"
		public Keyword getChangeStateKeyword_1() { return cChangeStateKeyword_1; }
	}
	public class InitializeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Initialize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitializeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitsInitExpressionsParserRuleCall_3_0 = (RuleCall)cInitsAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInitoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInitoInitExpressionoParserRuleCall_5_0 = (RuleCall)cInitoAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Initialize:
		//    {Initialize} 'Init' '{'
		//    (inits+=initExpressions)* ','
		//    (inito+=initExpressiono)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Initialize} 'Init' '{'
		//(inits+=initExpressions)* ','
		//(inito+=initExpressiono)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Initialize}
		public Action getInitializeAction_0() { return cInitializeAction_0; }
		
		//'Init'
		public Keyword getInitKeyword_1() { return cInitKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(inits+=initExpressions)*
		public Assignment getInitsAssignment_3() { return cInitsAssignment_3; }
		
		//initExpressions
		public RuleCall getInitsInitExpressionsParserRuleCall_3_0() { return cInitsInitExpressionsParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//(inito+=initExpressiono)*
		public Assignment getInitoAssignment_5() { return cInitoAssignment_5; }
		
		//initExpressiono
		public RuleCall getInitoInitExpressionoParserRuleCall_5_0() { return cInitoInitExpressionoParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class InitExpressionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.initExpressions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubtypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSubtypeSubjectCrossReference_0_0 = (CrossReference)cSubtypeAssignment_0.eContents().get(0);
		private final RuleCall cSubtypeSubjectIDTerminalRuleCall_0_0_1 = (RuleCall)cSubtypeSubjectCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//initExpressions:
		//    subtype=[Subject] name=ID '=' '(' value+=Value (',' value+=Value)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//subtype=[Subject] name=ID '=' '(' value+=Value (',' value+=Value)* ')'
		public Group getGroup() { return cGroup; }
		
		//subtype=[Subject]
		public Assignment getSubtypeAssignment_0() { return cSubtypeAssignment_0; }
		
		//[Subject]
		public CrossReference getSubtypeSubjectCrossReference_0_0() { return cSubtypeSubjectCrossReference_0_0; }
		
		//ID
		public RuleCall getSubtypeSubjectIDTerminalRuleCall_0_0_1() { return cSubtypeSubjectIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//value+=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }
		
		//(',' value+=Value)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//value+=Value
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_5_1_0() { return cValueValueParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class InitExpressionoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.initExpressiono");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObtypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cObtypeObjectCrossReference_0_0 = (CrossReference)cObtypeAssignment_0.eContents().get(0);
		private final RuleCall cObtypeObjectIDTerminalRuleCall_0_0_1 = (RuleCall)cObtypeObjectCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//initExpressiono:
		//    obtype=[Object] name=ID '=' '(' value+=Value (',' value+=Value)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//obtype=[Object] name=ID '=' '(' value+=Value (',' value+=Value)* ')'
		public Group getGroup() { return cGroup; }
		
		//obtype=[Object]
		public Assignment getObtypeAssignment_0() { return cObtypeAssignment_0; }
		
		//[Object]
		public CrossReference getObtypeObjectCrossReference_0_0() { return cObtypeObjectCrossReference_0_0; }
		
		//ID
		public RuleCall getObtypeObjectIDTerminalRuleCall_0_0_1() { return cObtypeObjectIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//value+=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }
		
		//(',' value+=Value)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//value+=Value
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_5_1_0() { return cValueValueParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubtypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSubtypeSubjectCrossReference_1_0 = (CrossReference)cSubtypeAssignment_1.eContents().get(0);
		private final RuleCall cSubtypeSubjectIDTerminalRuleCall_1_0_1 = (RuleCall)cSubtypeSubjectCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cValueInitExpressionsCrossReference_4_0 = (CrossReference)cValueAssignment_4.eContents().get(0);
		private final RuleCall cValueInitExpressionsIDTerminalRuleCall_4_0_1 = (RuleCall)cValueInitExpressionsCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cValueInitExpressionsCrossReference_5_1_0 = (CrossReference)cValueAssignment_5_1.eContents().get(0);
		private final RuleCall cValueInitExpressionsIDTerminalRuleCall_5_1_0_1 = (RuleCall)cValueInitExpressionsCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Group:
		//    'Group' subtype=[Subject] name=ID '{'
		//    value+=[initExpressions] (',' value+=[initExpressions])*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Group' subtype=[Subject] name=ID '{'
		//value+=[initExpressions] (',' value+=[initExpressions])*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Group'
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }
		
		//subtype=[Subject]
		public Assignment getSubtypeAssignment_1() { return cSubtypeAssignment_1; }
		
		//[Subject]
		public CrossReference getSubtypeSubjectCrossReference_1_0() { return cSubtypeSubjectCrossReference_1_0; }
		
		//ID
		public RuleCall getSubtypeSubjectIDTerminalRuleCall_1_0_1() { return cSubtypeSubjectIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//value+=[initExpressions]
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//[initExpressions]
		public CrossReference getValueInitExpressionsCrossReference_4_0() { return cValueInitExpressionsCrossReference_4_0; }
		
		//ID
		public RuleCall getValueInitExpressionsIDTerminalRuleCall_4_0_1() { return cValueInitExpressionsIDTerminalRuleCall_4_0_1; }
		
		//(',' value+=[initExpressions])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//value+=[initExpressions]
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//[initExpressions]
		public CrossReference getValueInitExpressionsCrossReference_5_1_0() { return cValueInitExpressionsCrossReference_5_1_0; }
		
		//ID
		public RuleCall getValueInitExpressionsIDTerminalRuleCall_5_1_0_1() { return cValueInitExpressionsIDTerminalRuleCall_5_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SubjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Subject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeRAKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeAAKeyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cTypeCAKeyword_0_0_2 = (Keyword)cTypeAlternatives_0_0.eContents().get(2);
		private final Keyword cTypePAKeyword_0_0_3 = (Keyword)cTypeAlternatives_0_0.eContents().get(3);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSubjectExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubjectExpressionSubjectExpressionParserRuleCall_2_0 = (RuleCall)cSubjectExpressionAssignment_2.eContents().get(0);
		
		//Subject:
		//    //this name is struct name
		//    type=('RA'|'AA'|'CA'|'PA') name=ID    subjectExpression=SubjectExpression?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////this name is struct name
		//type=('RA'|'AA'|'CA'|'PA') name=ID    subjectExpression=SubjectExpression?
		public Group getGroup() { return cGroup; }
		
		////this name is struct name
		//type=('RA'|'AA'|'CA'|'PA')
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//('RA'|'AA'|'CA'|'PA')
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }
		
		//'RA'
		public Keyword getTypeRAKeyword_0_0_0() { return cTypeRAKeyword_0_0_0; }
		
		//'AA'
		public Keyword getTypeAAKeyword_0_0_1() { return cTypeAAKeyword_0_0_1; }
		
		//'CA'
		public Keyword getTypeCAKeyword_0_0_2() { return cTypeCAKeyword_0_0_2; }
		
		//'PA'
		public Keyword getTypePAKeyword_0_0_3() { return cTypePAKeyword_0_0_3; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//subjectExpression=SubjectExpression?
		public Assignment getSubjectExpressionAssignment_2() { return cSubjectExpressionAssignment_2; }
		
		//SubjectExpression
		public RuleCall getSubjectExpressionSubjectExpressionParserRuleCall_2_0() { return cSubjectExpressionSubjectExpressionParserRuleCall_2_0; }
	}
	public class SubjectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.SubjectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyValueKeyvalueParserRuleCall_1_0 = (RuleCall)cKeyValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKeyValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKeyValueKeyvalueParserRuleCall_2_1_0 = (RuleCall)cKeyValueAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubjectExpression:
		//    '{'
		//    keyValue+=keyvalue (',' keyValue+=keyvalue)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{'
		//keyValue+=keyvalue (',' keyValue+=keyvalue)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//keyValue+=keyvalue
		public Assignment getKeyValueAssignment_1() { return cKeyValueAssignment_1; }
		
		//keyvalue
		public RuleCall getKeyValueKeyvalueParserRuleCall_1_0() { return cKeyValueKeyvalueParserRuleCall_1_0; }
		
		//(',' keyValue+=keyvalue)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//keyValue+=keyvalue
		public Assignment getKeyValueAssignment_2_1() { return cKeyValueAssignment_2_1; }
		
		//keyvalue
		public RuleCall getKeyValueKeyvalueParserRuleCall_2_1_0() { return cKeyValueKeyvalueParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ContractMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ContractMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageMessageParserRuleCall_2_0 = (RuleCall)cMessageAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMessageAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMessageMessageParserRuleCall_3_1_0 = (RuleCall)cMessageAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ContractMessage:
		//    'ContractMessage'
		//    '{'
		//    message+=Message (',' message+=Message)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ContractMessage'
		//'{'
		//message+=Message (',' message+=Message)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ContractMessage'
		public Keyword getContractMessageKeyword_0() { return cContractMessageKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//message+=Message
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }
		
		//Message
		public RuleCall getMessageMessageParserRuleCall_2_0() { return cMessageMessageParserRuleCall_2_0; }
		
		//(',' message+=Message)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//message+=Message
		public Assignment getMessageAssignment_3_1() { return cMessageAssignment_3_1; }
		
		//Message
		public RuleCall getMessageMessageParserRuleCall_3_1_0() { return cMessageMessageParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeKeyvalueParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Message:
		//    type=keyvalue '=' value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=keyvalue '=' value=Value
		public Group getGroup() { return cGroup; }
		
		//type=keyvalue
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//keyvalue
		public RuleCall getTypeKeyvalueParserRuleCall_0_0() { return cTypeKeyvalueParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class KeyvalueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.keyvalue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//keyvalue:
		//    //name=ID ':' value=Value
		//    type=type name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////name=ID ':' value=Value
		//type=type name=ID
		public Group getGroup() { return cGroup; }
		
		////name=ID ':' value=Value
		//type=type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUintKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAddressKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cIntKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBytesKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBytes32Keyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cBoolKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cFixedKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cUfixedKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDateKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cDurationKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//type:
		//    "string"|"uint"|"address"|"int"|"bytes"|"bytes32"|"bool"|"fixed"|"ufixed"|"date"|"duration"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"string"|"uint"|"address"|"int"|"bytes"|"bytes32"|"bool"|"fixed"|"ufixed"|"date"|"duration"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"string"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//"uint"
		public Keyword getUintKeyword_1() { return cUintKeyword_1; }
		
		//"address"
		public Keyword getAddressKeyword_2() { return cAddressKeyword_2; }
		
		//"int"
		public Keyword getIntKeyword_3() { return cIntKeyword_3; }
		
		//"bytes"
		public Keyword getBytesKeyword_4() { return cBytesKeyword_4; }
		
		//"bytes32"
		public Keyword getBytes32Keyword_5() { return cBytes32Keyword_5; }
		
		//"bool"
		public Keyword getBoolKeyword_6() { return cBoolKeyword_6; }
		
		//"fixed"
		public Keyword getFixedKeyword_7() { return cFixedKeyword_7; }
		
		//"ufixed"
		public Keyword getUfixedKeyword_8() { return cUfixedKeyword_8; }
		
		//"date"
		public Keyword getDateKeyword_9() { return cDateKeyword_9; }
		
		//"duration"
		public Keyword getDurationKeyword_10() { return cDurationKeyword_10; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAllNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRightParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cThisDateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cThisBooleanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUrlParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cThisDecimalParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAddressParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cThisStringParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDurationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cNowParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Value:
		////这样的话，要表达NULL就要双引号了
		//    AllNumber|Right|ThisDate|ThisBoolean|url|ThisDecimal|Address|ThisString|Duration|Now;
		@Override public ParserRule getRule() { return rule; }
		
		////这样的话，要表达NULL就要双引号了
		//    AllNumber|Right|ThisDate|ThisBoolean|url|ThisDecimal|Address|ThisString|Duration|Now
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////这样的话，要表达NULL就要双引号了
		//    AllNumber
		public RuleCall getAllNumberParserRuleCall_0() { return cAllNumberParserRuleCall_0; }
		
		//Right
		public RuleCall getRightParserRuleCall_1() { return cRightParserRuleCall_1; }
		
		//ThisDate
		public RuleCall getThisDateParserRuleCall_2() { return cThisDateParserRuleCall_2; }
		
		//ThisBoolean
		public RuleCall getThisBooleanParserRuleCall_3() { return cThisBooleanParserRuleCall_3; }
		
		//url
		public RuleCall getUrlParserRuleCall_4() { return cUrlParserRuleCall_4; }
		
		//ThisDecimal
		public RuleCall getThisDecimalParserRuleCall_5() { return cThisDecimalParserRuleCall_5; }
		
		//Address
		public RuleCall getAddressParserRuleCall_6() { return cAddressParserRuleCall_6; }
		
		//ThisString
		public RuleCall getThisStringParserRuleCall_7() { return cThisStringParserRuleCall_7; }
		
		//Duration
		public RuleCall getDurationParserRuleCall_8() { return cDurationParserRuleCall_8; }
		
		//Now
		public RuleCall getNowParserRuleCall_9() { return cNowParserRuleCall_9; }
	}
	public class DurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Duration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSymbolAlternatives_1_0 = (Alternatives)cSymbolAssignment_1.eContents().get(0);
		private final Keyword cSymbolYearsKeyword_1_0_0 = (Keyword)cSymbolAlternatives_1_0.eContents().get(0);
		private final Keyword cSymbolMonthsKeyword_1_0_1 = (Keyword)cSymbolAlternatives_1_0.eContents().get(1);
		private final Keyword cSymbolDaysKeyword_1_0_2 = (Keyword)cSymbolAlternatives_1_0.eContents().get(2);
		private final Keyword cSymbolHoursKeyword_1_0_3 = (Keyword)cSymbolAlternatives_1_0.eContents().get(3);
		private final Keyword cSymbolMinsKeyword_1_0_4 = (Keyword)cSymbolAlternatives_1_0.eContents().get(4);
		
		//Duration:
		//    value=INT symbol=("years"|"months"|"days"|"hours"|"mins")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT symbol=("years"|"months"|"days"|"hours"|"mins")
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//symbol=("years"|"months"|"days"|"hours"|"mins")
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }
		
		//("years"|"months"|"days"|"hours"|"mins")
		public Alternatives getSymbolAlternatives_1_0() { return cSymbolAlternatives_1_0; }
		
		//"years"
		public Keyword getSymbolYearsKeyword_1_0_0() { return cSymbolYearsKeyword_1_0_0; }
		
		//"months"
		public Keyword getSymbolMonthsKeyword_1_0_1() { return cSymbolMonthsKeyword_1_0_1; }
		
		//"days"
		public Keyword getSymbolDaysKeyword_1_0_2() { return cSymbolDaysKeyword_1_0_2; }
		
		//"hours"
		public Keyword getSymbolHoursKeyword_1_0_3() { return cSymbolHoursKeyword_1_0_3; }
		
		//"mins"
		public Keyword getSymbolMinsKeyword_1_0_4() { return cSymbolMinsKeyword_1_0_4; }
	}
	public class NowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Now");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueNowKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//Now:
		//    value='now'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value='now'
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//'now'
		public Keyword getValueNowKeyword_0() { return cValueNowKeyword_0; }
	}
	public class ThisStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ThisString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ThisString:
		//    value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class AddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Address");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Address:
		//    'a' value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'a' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'a'
		public Keyword getAKeyword_0() { return cAKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class AllNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.AllNumber");
		private final Assignment cNumberAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_0 = (RuleCall)cNumberAssignment.eContents().get(0);
		
		//AllNumber:
		//    number=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//number=INT
		public Assignment getNumberAssignment() { return cNumberAssignment; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_0() { return cNumberINTTerminalRuleCall_0; }
	}
	public class ThisDecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ThisDecimal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDECIMALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ThisDecimal:
		//    value=DECIMAL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DECIMAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_0() { return cValueDECIMALTerminalRuleCall_0; }
	}
	public class UrlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.url");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueURL_STRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//url:
		//    value=URL_STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=URL_STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//URL_STRING
		public RuleCall getValueURL_STRINGTerminalRuleCall_0() { return cValueURL_STRINGTerminalRuleCall_0; }
	}
	public class ThisBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ThisBoolean");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ThisBoolean:
		//    value=BOOLEAN
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANParserRuleCall_0() { return cValueBOOLEANParserRuleCall_0; }
	}
	public class ThisDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ThisDate");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDATEParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ThisDate:
		//    value=DATE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DATE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DATE
		public RuleCall getValueDATEParserRuleCall_0() { return cValueDATEParserRuleCall_0; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Right");
		private final Assignment cRightAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRightInitExpressionsCrossReference_0 = (CrossReference)cRightAssignment.eContents().get(0);
		private final RuleCall cRightInitExpressionsIDTerminalRuleCall_0_1 = (RuleCall)cRightInitExpressionsCrossReference_0.eContents().get(1);
		
		//Right:
		//    right=[initExpressions]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//right=[initExpressions]
		public Assignment getRightAssignment() { return cRightAssignment; }
		
		//[initExpressions]
		public CrossReference getRightInitExpressionsCrossReference_0() { return cRightInitExpressionsCrossReference_0; }
		
		//ID
		public RuleCall getRightInitExpressionsIDTerminalRuleCall_0_1() { return cRightInitExpressionsIDTerminalRuleCall_0_1; }
	}
	public class DATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.DATE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cYearAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cYearINTTerminalRuleCall_0_0 = (RuleCall)cYearAssignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMonthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMonthINTTerminalRuleCall_2_0 = (RuleCall)cMonthAssignment_2.eContents().get(0);
		private final Keyword cSolidusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDayINTTerminalRuleCall_4_0 = (RuleCall)cDayAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cHourAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHourINTTerminalRuleCall_6_0 = (RuleCall)cHourAssignment_6.eContents().get(0);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMinAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMinINTTerminalRuleCall_8_0 = (RuleCall)cMinAssignment_8.eContents().get(0);
		
		//DATE:
		//    year=INT '/' month=INT '/' day=INT ',' hour=INT  ':' min=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//year=INT '/' month=INT '/' day=INT ',' hour=INT  ':' min=INT
		public Group getGroup() { return cGroup; }
		
		//year=INT
		public Assignment getYearAssignment_0() { return cYearAssignment_0; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_0_0() { return cYearINTTerminalRuleCall_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//month=INT
		public Assignment getMonthAssignment_2() { return cMonthAssignment_2; }
		
		//INT
		public RuleCall getMonthINTTerminalRuleCall_2_0() { return cMonthINTTerminalRuleCall_2_0; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//day=INT
		public Assignment getDayAssignment_4() { return cDayAssignment_4; }
		
		//INT
		public RuleCall getDayINTTerminalRuleCall_4_0() { return cDayINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//hour=INT
		public Assignment getHourAssignment_6() { return cHourAssignment_6; }
		
		//INT
		public RuleCall getHourINTTerminalRuleCall_6_0() { return cHourINTTerminalRuleCall_6_0; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//min=INT
		public Assignment getMinAssignment_8() { return cMinAssignment_8; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_8_0() { return cMinINTTerminalRuleCall_8_0; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTokenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cObjectExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectExpressionObjectExpressionParserRuleCall_2_0 = (RuleCall)cObjectExpressionAssignment_2.eContents().get(0);
		
		//Object:
		//    'Token' name=ID objectExpression=ObjectExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Token' name=ID objectExpression=ObjectExpression
		public Group getGroup() { return cGroup; }
		
		//'Token'
		public Keyword getTokenKeyword_0() { return cTokenKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//objectExpression=ObjectExpression
		public Assignment getObjectExpressionAssignment_2() { return cObjectExpressionAssignment_2; }
		
		//ObjectExpression
		public RuleCall getObjectExpressionObjectExpressionParserRuleCall_2_0() { return cObjectExpressionObjectExpressionParserRuleCall_2_0; }
	}
	public class ObjectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ObjectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyValueKeyvalueParserRuleCall_1_0 = (RuleCall)cKeyValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKeyValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKeyValueKeyvalueParserRuleCall_2_1_0 = (RuleCall)cKeyValueAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectExpression:
		//    '{'
		//    keyValue+=keyvalue (',' keyValue+=keyvalue)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{'
		//keyValue+=keyvalue (',' keyValue+=keyvalue)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//keyValue+=keyvalue
		public Assignment getKeyValueAssignment_1() { return cKeyValueAssignment_1; }
		
		//keyvalue
		public RuleCall getKeyValueKeyvalueParserRuleCall_1_0() { return cKeyValueKeyvalueParserRuleCall_1_0; }
		
		//(',' keyValue+=keyvalue)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//keyValue+=keyvalue
		public Assignment getKeyValueAssignment_2_1() { return cKeyValueAssignment_2_1; }
		
		//keyvalue
		public RuleCall getKeyValueKeyvalueParserRuleCall_2_1_0() { return cKeyValueKeyvalueParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsConditionLinkParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionsConditionLinkParserRuleCall_3_1_0 = (RuleCall)cConditionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Condition:
		//    'Conditions''['
		//    conditions+=ConditionLink (',' conditions+=ConditionLink)*
		//    ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Conditions''['
		//conditions+=ConditionLink (',' conditions+=ConditionLink)*
		//']'
		public Group getGroup() { return cGroup; }
		
		//'Conditions'
		public Keyword getConditionsKeyword_0() { return cConditionsKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//conditions+=ConditionLink
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }
		
		//ConditionLink
		public RuleCall getConditionsConditionLinkParserRuleCall_2_0() { return cConditionsConditionLinkParserRuleCall_2_0; }
		
		//(',' conditions+=ConditionLink)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//conditions+=ConditionLink
		public Assignment getConditionsAssignment_3_1() { return cConditionsAssignment_3_1; }
		
		//ConditionLink
		public RuleCall getConditionsConditionLinkParserRuleCall_3_1_0() { return cConditionsConditionLinkParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ConditionLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ConditionLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cConditionExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cConditionExpressionSingleConditionParserRuleCall_2_0_0 = (RuleCall)cConditionExpressionAssignment_2_0.eContents().get(0);
		private final Assignment cLinkConditionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cLinkConditionSingleLinkConditionParserRuleCall_2_1_0 = (RuleCall)cLinkConditionAssignment_2_1.eContents().get(0);
		private final Assignment cAndOrLinkAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAndOrLinkAndOrConditionParserRuleCall_3_0 = (RuleCall)cAndOrLinkAssignment_3.eContents().get(0);
		
		//ConditionLink:
		//    name=ID ':' ((conditionExpression=SingleCondition)|(linkCondition=SingleLinkCondition))? (andOrLink+=AndOrCondition)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' ((conditionExpression=SingleCondition)|(linkCondition=SingleLinkCondition))? (andOrLink+=AndOrCondition)*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//((conditionExpression=SingleCondition)|(linkCondition=SingleLinkCondition))?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(conditionExpression=SingleCondition)
		public Assignment getConditionExpressionAssignment_2_0() { return cConditionExpressionAssignment_2_0; }
		
		//SingleCondition
		public RuleCall getConditionExpressionSingleConditionParserRuleCall_2_0_0() { return cConditionExpressionSingleConditionParserRuleCall_2_0_0; }
		
		//(linkCondition=SingleLinkCondition)
		public Assignment getLinkConditionAssignment_2_1() { return cLinkConditionAssignment_2_1; }
		
		//SingleLinkCondition
		public RuleCall getLinkConditionSingleLinkConditionParserRuleCall_2_1_0() { return cLinkConditionSingleLinkConditionParserRuleCall_2_1_0; }
		
		//(andOrLink+=AndOrCondition)*
		public Assignment getAndOrLinkAssignment_3() { return cAndOrLinkAssignment_3; }
		
		//AndOrCondition
		public RuleCall getAndOrLinkAndOrConditionParserRuleCall_3_0() { return cAndOrLinkAndOrConditionParserRuleCall_3_0; }
	}
	public class AndOrConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.AndOrCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLinkAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cLinkAlternatives_0_0 = (Alternatives)cLinkAssignment_0.eContents().get(0);
		private final Keyword cLinkAndKeyword_0_0_0 = (Keyword)cLinkAlternatives_0_0.eContents().get(0);
		private final Keyword cLinkOrKeyword_0_0_1 = (Keyword)cLinkAlternatives_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cConditionSingleConditionParserRuleCall_1_0_0 = (RuleCall)cConditionAssignment_1_0.eContents().get(0);
		private final Assignment cLinkConditionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLinkConditionSingleLinkConditionParserRuleCall_1_1_0 = (RuleCall)cLinkConditionAssignment_1_1.eContents().get(0);
		
		//AndOrCondition:
		//    link=('and' | 'or') ((condition=SingleCondition)|(linkCondition=SingleLinkCondition))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//link=('and' | 'or') ((condition=SingleCondition)|(linkCondition=SingleLinkCondition))
		public Group getGroup() { return cGroup; }
		
		//link=('and' | 'or')
		public Assignment getLinkAssignment_0() { return cLinkAssignment_0; }
		
		//('and' | 'or')
		public Alternatives getLinkAlternatives_0_0() { return cLinkAlternatives_0_0; }
		
		//'and'
		public Keyword getLinkAndKeyword_0_0_0() { return cLinkAndKeyword_0_0_0; }
		
		//'or'
		public Keyword getLinkOrKeyword_0_0_1() { return cLinkOrKeyword_0_0_1; }
		
		//((condition=SingleCondition)|(linkCondition=SingleLinkCondition))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(condition=SingleCondition)
		public Assignment getConditionAssignment_1_0() { return cConditionAssignment_1_0; }
		
		//SingleCondition
		public RuleCall getConditionSingleConditionParserRuleCall_1_0_0() { return cConditionSingleConditionParserRuleCall_1_0_0; }
		
		//(linkCondition=SingleLinkCondition)
		public Assignment getLinkConditionAssignment_1_1() { return cLinkConditionAssignment_1_1; }
		
		//SingleLinkCondition
		public RuleCall getLinkConditionSingleLinkConditionParserRuleCall_1_1_0() { return cLinkConditionSingleLinkConditionParserRuleCall_1_1_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatesOperateLinkParserRuleCall_2_0 = (RuleCall)cOperatesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOperatesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperatesOperateLinkParserRuleCall_3_1_0 = (RuleCall)cOperatesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Operation:
		//    'Operations''['
		//    operates+=OperateLink (',' operates+=OperateLink)*
		//    ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Operations''['
		//operates+=OperateLink (',' operates+=OperateLink)*
		//']'
		public Group getGroup() { return cGroup; }
		
		//'Operations'
		public Keyword getOperationsKeyword_0() { return cOperationsKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//operates+=OperateLink
		public Assignment getOperatesAssignment_2() { return cOperatesAssignment_2; }
		
		//OperateLink
		public RuleCall getOperatesOperateLinkParserRuleCall_2_0() { return cOperatesOperateLinkParserRuleCall_2_0; }
		
		//(',' operates+=OperateLink)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//operates+=OperateLink
		public Assignment getOperatesAssignment_3_1() { return cOperatesAssignment_3_1; }
		
		//OperateLink
		public RuleCall getOperatesOperateLinkParserRuleCall_3_1_0() { return cOperatesOperateLinkParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class OperateLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.OperateLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFirstOperationAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFirstOperationTrueOperationParserRuleCall_2_0_0 = (RuleCall)cFirstOperationAssignment_2_0.eContents().get(0);
		private final Assignment cLinkOperationAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cLinkOperationOperateLinkCrossReference_2_1_0 = (CrossReference)cLinkOperationAssignment_2_1.eContents().get(0);
		private final RuleCall cLinkOperationOperateLinkIDTerminalRuleCall_2_1_0_1 = (RuleCall)cLinkOperationOperateLinkCrossReference_2_1_0.eContents().get(1);
		private final Assignment cAndOrLinkAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAndOrLinkAndOrOperationLinkParserRuleCall_3_0 = (RuleCall)cAndOrLinkAssignment_3.eContents().get(0);
		
		//OperateLink:
		//    name=ID ':' ((firstOperation=trueOperation)|(linkOperation=[OperateLink])) (andOrLink+=AndOrOperationLink)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' ((firstOperation=trueOperation)|(linkOperation=[OperateLink])) (andOrLink+=AndOrOperationLink)*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//((firstOperation=trueOperation)|(linkOperation=[OperateLink]))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(firstOperation=trueOperation)
		public Assignment getFirstOperationAssignment_2_0() { return cFirstOperationAssignment_2_0; }
		
		//trueOperation
		public RuleCall getFirstOperationTrueOperationParserRuleCall_2_0_0() { return cFirstOperationTrueOperationParserRuleCall_2_0_0; }
		
		//(linkOperation=[OperateLink])
		public Assignment getLinkOperationAssignment_2_1() { return cLinkOperationAssignment_2_1; }
		
		//[OperateLink]
		public CrossReference getLinkOperationOperateLinkCrossReference_2_1_0() { return cLinkOperationOperateLinkCrossReference_2_1_0; }
		
		//ID
		public RuleCall getLinkOperationOperateLinkIDTerminalRuleCall_2_1_0_1() { return cLinkOperationOperateLinkIDTerminalRuleCall_2_1_0_1; }
		
		//(andOrLink+=AndOrOperationLink)*
		public Assignment getAndOrLinkAssignment_3() { return cAndOrLinkAssignment_3; }
		
		//AndOrOperationLink
		public RuleCall getAndOrLinkAndOrOperationLinkParserRuleCall_3_0() { return cAndOrLinkAndOrOperationLinkParserRuleCall_3_0; }
	}
	public class RuleStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.RuleStructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRulesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cManyRuleExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cManyRuleExpressionManyRuleExpressionParserRuleCall_2_0 = (RuleCall)cManyRuleExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RuleStructure:
		//    'Rules''{'
		//    manyRuleExpression+=ManyRuleExpression+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Rules''{'
		//manyRuleExpression+=ManyRuleExpression+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Rules'
		public Keyword getRulesKeyword_0() { return cRulesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//manyRuleExpression+=ManyRuleExpression+
		public Assignment getManyRuleExpressionAssignment_2() { return cManyRuleExpressionAssignment_2; }
		
		//ManyRuleExpression
		public RuleCall getManyRuleExpressionManyRuleExpressionParserRuleCall_2_0() { return cManyRuleExpressionManyRuleExpressionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ManyRuleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ManyRuleExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExclusiveExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParallelExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRegularRuleExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAdditionExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ManyRuleExpression:
		//    ExclusiveExpression|ParallelExpression|RegularRuleExpression|AdditionExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExclusiveExpression|ParallelExpression|RegularRuleExpression|AdditionExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExclusiveExpression
		public RuleCall getExclusiveExpressionParserRuleCall_0() { return cExclusiveExpressionParserRuleCall_0; }
		
		//ParallelExpression
		public RuleCall getParallelExpressionParserRuleCall_1() { return cParallelExpressionParserRuleCall_1; }
		
		//RegularRuleExpression
		public RuleCall getRegularRuleExpressionParserRuleCall_2() { return cRegularRuleExpressionParserRuleCall_2; }
		
		//AdditionExpression
		public RuleCall getAdditionExpressionParserRuleCall_3() { return cAdditionExpressionParserRuleCall_3; }
	}
	public class ParallelExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ParallelExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclusiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRuleExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRuleExpressionRuleExpressionParserRuleCall_2_0 = (RuleCall)cRuleExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRuleExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRuleExpressionRuleExpressionParserRuleCall_3_1_0 = (RuleCall)cRuleExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ParallelExpression:
		//    'Exclusive''['
		//    ruleExpression+=RuleExpression (';' ruleExpression+=RuleExpression)*
		//    ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Exclusive''['
		//ruleExpression+=RuleExpression (';' ruleExpression+=RuleExpression)*
		//']'
		public Group getGroup() { return cGroup; }
		
		//'Exclusive'
		public Keyword getExclusiveKeyword_0() { return cExclusiveKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//ruleExpression+=RuleExpression
		public Assignment getRuleExpressionAssignment_2() { return cRuleExpressionAssignment_2; }
		
		//RuleExpression
		public RuleCall getRuleExpressionRuleExpressionParserRuleCall_2_0() { return cRuleExpressionRuleExpressionParserRuleCall_2_0; }
		
		//(';' ruleExpression+=RuleExpression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }
		
		//ruleExpression+=RuleExpression
		public Assignment getRuleExpressionAssignment_3_1() { return cRuleExpressionAssignment_3_1; }
		
		//RuleExpression
		public RuleCall getRuleExpressionRuleExpressionParserRuleCall_3_1_0() { return cRuleExpressionRuleExpressionParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ExclusiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ExclusiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParallelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRuleExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRuleExpressionRuleExpressionParserRuleCall_2_0 = (RuleCall)cRuleExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRuleExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRuleExpressionRuleExpressionParserRuleCall_3_1_0 = (RuleCall)cRuleExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExclusiveExpression:
		//    'Parallel''['
		//     ruleExpression+=RuleExpression (';' ruleExpression+=RuleExpression)*
		//    ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Parallel''['
		// ruleExpression+=RuleExpression (';' ruleExpression+=RuleExpression)*
		//']'
		public Group getGroup() { return cGroup; }
		
		//'Parallel'
		public Keyword getParallelKeyword_0() { return cParallelKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//ruleExpression+=RuleExpression
		public Assignment getRuleExpressionAssignment_2() { return cRuleExpressionAssignment_2; }
		
		//RuleExpression
		public RuleCall getRuleExpressionRuleExpressionParserRuleCall_2_0() { return cRuleExpressionRuleExpressionParserRuleCall_2_0; }
		
		//(';' ruleExpression+=RuleExpression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }
		
		//ruleExpression+=RuleExpression
		public Assignment getRuleExpressionAssignment_3_1() { return cRuleExpressionAssignment_3_1; }
		
		//RuleExpression
		public RuleCall getRuleExpressionRuleExpressionParserRuleCall_3_1_0() { return cRuleExpressionRuleExpressionParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class RegularRuleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.RegularRuleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRuleExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRuleExpressionRuleExpressionParserRuleCall_0_0 = (RuleCall)cRuleExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRuleExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRuleExpressionRuleExpressionParserRuleCall_1_1_0 = (RuleCall)cRuleExpressionAssignment_1_1.eContents().get(0);
		
		//RegularRuleExpression:
		//    ruleExpression+=RuleExpression (';' ruleExpression+=RuleExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ruleExpression+=RuleExpression (';' ruleExpression+=RuleExpression)*
		public Group getGroup() { return cGroup; }
		
		//ruleExpression+=RuleExpression
		public Assignment getRuleExpressionAssignment_0() { return cRuleExpressionAssignment_0; }
		
		//RuleExpression
		public RuleCall getRuleExpressionRuleExpressionParserRuleCall_0_0() { return cRuleExpressionRuleExpressionParserRuleCall_0_0; }
		
		//(';' ruleExpression+=RuleExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//ruleExpression+=RuleExpression
		public Assignment getRuleExpressionAssignment_1_1() { return cRuleExpressionAssignment_1_1; }
		
		//RuleExpression
		public RuleCall getRuleExpressionRuleExpressionParserRuleCall_1_1_0() { return cRuleExpressionRuleExpressionParserRuleCall_1_1_0; }
	}
	public class AdditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.AdditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdditionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRuleExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRuleExpressionRuleExpressionParserRuleCall_2_0 = (RuleCall)cRuleExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRuleExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRuleExpressionRuleExpressionParserRuleCall_3_1_0 = (RuleCall)cRuleExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AdditionExpression:
		//    //全局允许触发条款或者限定时间内允许触发，默认是全局允许触发
		//    'Additional''['
		//     ruleExpression+=RuleExpression (';' ruleExpression+=RuleExpression)*
		//    ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////全局允许触发条款或者限定时间内允许触发，默认是全局允许触发
		//'Additional''['
		// ruleExpression+=RuleExpression (';' ruleExpression+=RuleExpression)*
		//']'
		public Group getGroup() { return cGroup; }
		
		////全局允许触发条款或者限定时间内允许触发，默认是全局允许触发
		//'Additional'
		public Keyword getAdditionalKeyword_0() { return cAdditionalKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//ruleExpression+=RuleExpression
		public Assignment getRuleExpressionAssignment_2() { return cRuleExpressionAssignment_2; }
		
		//RuleExpression
		public RuleCall getRuleExpressionRuleExpressionParserRuleCall_2_0() { return cRuleExpressionRuleExpressionParserRuleCall_2_0; }
		
		//(';' ruleExpression+=RuleExpression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }
		
		//ruleExpression+=RuleExpression
		public Assignment getRuleExpressionAssignment_3_1() { return cRuleExpressionAssignment_3_1; }
		
		//RuleExpression
		public RuleCall getRuleExpressionRuleExpressionParserRuleCall_3_1_0() { return cRuleExpressionRuleExpressionParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class TotalConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.TotalCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cConditionSingleConditionParserRuleCall_1_0_0 = (RuleCall)cConditionAssignment_1_0.eContents().get(0);
		private final Assignment cLinkConditionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLinkConditionSingleLinkConditionParserRuleCall_1_1_0 = (RuleCall)cLinkConditionAssignment_1_1.eContents().get(0);
		private final Assignment cAndorconditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAndorconditionAndOrConditionParserRuleCall_2_0 = (RuleCall)cAndorconditionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TotalCondition:
		//    'If:'((condition=SingleCondition)|(linkCondition=SingleLinkCondition))
		//      andorcondition+=AndOrCondition* ','
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'If:'((condition=SingleCondition)|(linkCondition=SingleLinkCondition))
		//  andorcondition+=AndOrCondition* ','
		public Group getGroup() { return cGroup; }
		
		//'If:'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//((condition=SingleCondition)|(linkCondition=SingleLinkCondition))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(condition=SingleCondition)
		public Assignment getConditionAssignment_1_0() { return cConditionAssignment_1_0; }
		
		//SingleCondition
		public RuleCall getConditionSingleConditionParserRuleCall_1_0_0() { return cConditionSingleConditionParserRuleCall_1_0_0; }
		
		//(linkCondition=SingleLinkCondition)
		public Assignment getLinkConditionAssignment_1_1() { return cLinkConditionAssignment_1_1; }
		
		//SingleLinkCondition
		public RuleCall getLinkConditionSingleLinkConditionParserRuleCall_1_1_0() { return cLinkConditionSingleLinkConditionParserRuleCall_1_1_0; }
		
		//andorcondition+=AndOrCondition*
		public Assignment getAndorconditionAssignment_2() { return cAndorconditionAssignment_2; }
		
		//AndOrCondition
		public RuleCall getAndorconditionAndOrConditionParserRuleCall_2_0() { return cAndorconditionAndOrConditionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}
	public class SingleLinkConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.SingleLinkCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNoExclamationMarkKeyword_0_0 = (Keyword)cNoAssignment_0.eContents().get(0);
		private final Assignment cLinkConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLinkConditionConditionLinkCrossReference_1_0 = (CrossReference)cLinkConditionAssignment_1.eContents().get(0);
		private final RuleCall cLinkConditionConditionLinkIDTerminalRuleCall_1_0_1 = (RuleCall)cLinkConditionConditionLinkCrossReference_1_0.eContents().get(1);
		
		//SingleLinkCondition:
		//    (no="!")? linkCondition=[ConditionLink]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(no="!")? linkCondition=[ConditionLink]
		public Group getGroup() { return cGroup; }
		
		//(no="!")?
		public Assignment getNoAssignment_0() { return cNoAssignment_0; }
		
		//"!"
		public Keyword getNoExclamationMarkKeyword_0_0() { return cNoExclamationMarkKeyword_0_0; }
		
		//linkCondition=[ConditionLink]
		public Assignment getLinkConditionAssignment_1() { return cLinkConditionAssignment_1; }
		
		//[ConditionLink]
		public CrossReference getLinkConditionConditionLinkCrossReference_1_0() { return cLinkConditionConditionLinkCrossReference_1_0; }
		
		//ID
		public RuleCall getLinkConditionConditionLinkIDTerminalRuleCall_1_0_1() { return cLinkConditionConditionLinkIDTerminalRuleCall_1_0_1; }
	}
	public class TotalOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.TotalOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTotalOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPersonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPersonInitExpressionsCrossReference_1_0 = (CrossReference)cPersonAssignment_1.eContents().get(0);
		private final RuleCall cPersonInitExpressionsIDTerminalRuleCall_1_0_1 = (RuleCall)cPersonInitExpressionsCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cGKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPerson2Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cPerson2GroupCrossReference_2_1_0 = (CrossReference)cPerson2Assignment_2_1.eContents().get(0);
		private final RuleCall cPerson2GroupIDTerminalRuleCall_2_1_0_1 = (RuleCall)cPerson2GroupCrossReference_2_1_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cFirstOperationAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cFirstOperationTrueOperationParserRuleCall_3_0_0 = (RuleCall)cFirstOperationAssignment_3_0.eContents().get(0);
		private final Assignment cLinkOperationAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cLinkOperationOperateLinkCrossReference_3_1_0 = (CrossReference)cLinkOperationAssignment_3_1.eContents().get(0);
		private final RuleCall cLinkOperationOperateLinkIDTerminalRuleCall_3_1_0_1 = (RuleCall)cLinkOperationOperateLinkCrossReference_3_1_0.eContents().get(1);
		private final Assignment cAndorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAndorAndOrOperationLinkParserRuleCall_4_0 = (RuleCall)cAndorAssignment_4.eContents().get(0);
		private final Assignment cTimePointAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimePointTimepointParserRuleCall_5_0 = (RuleCall)cTimePointAssignment_5.eContents().get(0);
		private final Assignment cFailresultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFailresultFailResultParserRuleCall_6_0 = (RuleCall)cFailresultAssignment_6.eContents().get(0);
		private final Assignment cThenoperationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cThenoperationThenOperationParserRuleCall_7_0 = (RuleCall)cThenoperationAssignment_7.eContents().get(0);
		
		//TotalOperation:
		//    {TotalOperation} (person=[initExpressions])? ('G' person2=[Group])? ((firstOperation=trueOperation)|(linkOperation=[OperateLink]))?
		//    andor+=AndOrOperationLink*
		//    timePoint=Timepoint?
		//    failresult=FailResult?
		//      thenoperation+=ThenOperation*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TotalOperation} (person=[initExpressions])? ('G' person2=[Group])? ((firstOperation=trueOperation)|(linkOperation=[OperateLink]))?
		//andor+=AndOrOperationLink*
		//timePoint=Timepoint?
		//failresult=FailResult?
		//  thenoperation+=ThenOperation*
		public Group getGroup() { return cGroup; }
		
		//{TotalOperation}
		public Action getTotalOperationAction_0() { return cTotalOperationAction_0; }
		
		//(person=[initExpressions])?
		public Assignment getPersonAssignment_1() { return cPersonAssignment_1; }
		
		//[initExpressions]
		public CrossReference getPersonInitExpressionsCrossReference_1_0() { return cPersonInitExpressionsCrossReference_1_0; }
		
		//ID
		public RuleCall getPersonInitExpressionsIDTerminalRuleCall_1_0_1() { return cPersonInitExpressionsIDTerminalRuleCall_1_0_1; }
		
		//('G' person2=[Group])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'G'
		public Keyword getGKeyword_2_0() { return cGKeyword_2_0; }
		
		//person2=[Group]
		public Assignment getPerson2Assignment_2_1() { return cPerson2Assignment_2_1; }
		
		//[Group]
		public CrossReference getPerson2GroupCrossReference_2_1_0() { return cPerson2GroupCrossReference_2_1_0; }
		
		//ID
		public RuleCall getPerson2GroupIDTerminalRuleCall_2_1_0_1() { return cPerson2GroupIDTerminalRuleCall_2_1_0_1; }
		
		//((firstOperation=trueOperation)|(linkOperation=[OperateLink]))?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//(firstOperation=trueOperation)
		public Assignment getFirstOperationAssignment_3_0() { return cFirstOperationAssignment_3_0; }
		
		//trueOperation
		public RuleCall getFirstOperationTrueOperationParserRuleCall_3_0_0() { return cFirstOperationTrueOperationParserRuleCall_3_0_0; }
		
		//(linkOperation=[OperateLink])
		public Assignment getLinkOperationAssignment_3_1() { return cLinkOperationAssignment_3_1; }
		
		//[OperateLink]
		public CrossReference getLinkOperationOperateLinkCrossReference_3_1_0() { return cLinkOperationOperateLinkCrossReference_3_1_0; }
		
		//ID
		public RuleCall getLinkOperationOperateLinkIDTerminalRuleCall_3_1_0_1() { return cLinkOperationOperateLinkIDTerminalRuleCall_3_1_0_1; }
		
		//andor+=AndOrOperationLink*
		public Assignment getAndorAssignment_4() { return cAndorAssignment_4; }
		
		//AndOrOperationLink
		public RuleCall getAndorAndOrOperationLinkParserRuleCall_4_0() { return cAndorAndOrOperationLinkParserRuleCall_4_0; }
		
		//timePoint=Timepoint?
		public Assignment getTimePointAssignment_5() { return cTimePointAssignment_5; }
		
		//Timepoint
		public RuleCall getTimePointTimepointParserRuleCall_5_0() { return cTimePointTimepointParserRuleCall_5_0; }
		
		//failresult=FailResult?
		public Assignment getFailresultAssignment_6() { return cFailresultAssignment_6; }
		
		//FailResult
		public RuleCall getFailresultFailResultParserRuleCall_6_0() { return cFailresultFailResultParserRuleCall_6_0; }
		
		//thenoperation+=ThenOperation*
		public Assignment getThenoperationAssignment_7() { return cThenoperationAssignment_7; }
		
		//ThenOperation
		public RuleCall getThenoperationThenOperationParserRuleCall_7_0() { return cThenoperationThenOperationParserRuleCall_7_0; }
	}
	public class AndOrOperationLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.AndOrOperationLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLinkAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cLinkAndKeyword_0_0 = (Keyword)cLinkAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFirstOperationAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cFirstOperationTrueOperationParserRuleCall_1_0_0 = (RuleCall)cFirstOperationAssignment_1_0.eContents().get(0);
		private final Assignment cLinkOperationAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cLinkOperationOperateLinkCrossReference_1_1_0 = (CrossReference)cLinkOperationAssignment_1_1.eContents().get(0);
		private final RuleCall cLinkOperationOperateLinkIDTerminalRuleCall_1_1_0_1 = (RuleCall)cLinkOperationOperateLinkCrossReference_1_1_0.eContents().get(1);
		
		//AndOrOperationLink:
		//    link='and' ((firstOperation=trueOperation)|(linkOperation=[OperateLink]))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//link='and' ((firstOperation=trueOperation)|(linkOperation=[OperateLink]))
		public Group getGroup() { return cGroup; }
		
		//link='and'
		public Assignment getLinkAssignment_0() { return cLinkAssignment_0; }
		
		//'and'
		public Keyword getLinkAndKeyword_0_0() { return cLinkAndKeyword_0_0; }
		
		//((firstOperation=trueOperation)|(linkOperation=[OperateLink]))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(firstOperation=trueOperation)
		public Assignment getFirstOperationAssignment_1_0() { return cFirstOperationAssignment_1_0; }
		
		//trueOperation
		public RuleCall getFirstOperationTrueOperationParserRuleCall_1_0_0() { return cFirstOperationTrueOperationParserRuleCall_1_0_0; }
		
		//(linkOperation=[OperateLink])
		public Assignment getLinkOperationAssignment_1_1() { return cLinkOperationAssignment_1_1; }
		
		//[OperateLink]
		public CrossReference getLinkOperationOperateLinkCrossReference_1_1_0() { return cLinkOperationOperateLinkCrossReference_1_1_0; }
		
		//ID
		public RuleCall getLinkOperationOperateLinkIDTerminalRuleCall_1_1_0_1() { return cLinkOperationOperateLinkIDTerminalRuleCall_1_1_0_1; }
	}
	public class ThenOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ThenOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFollowingOperationAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cFollowingOperationTrueOperationParserRuleCall_1_0_0 = (RuleCall)cFollowingOperationAssignment_1_0.eContents().get(0);
		private final Assignment cLinkOperationAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cLinkOperationOperateLinkCrossReference_1_1_0 = (CrossReference)cLinkOperationAssignment_1_1.eContents().get(0);
		private final RuleCall cLinkOperationOperateLinkIDTerminalRuleCall_1_1_0_1 = (RuleCall)cLinkOperationOperateLinkCrossReference_1_1_0.eContents().get(1);
		private final Assignment cAndorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAndorAndOrOperationLinkParserRuleCall_2_0 = (RuleCall)cAndorAssignment_2.eContents().get(0);
		private final Assignment cTimePointAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimePointTimepointParserRuleCall_3_0 = (RuleCall)cTimePointAssignment_3.eContents().get(0);
		private final Assignment cFailresultAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFailresultFailResultParserRuleCall_4_0 = (RuleCall)cFailresultAssignment_4.eContents().get(0);
		
		//ThenOperation:
		//      'Then' ((followingOperation=trueOperation)|(linkOperation=[OperateLink]))
		//      andor+=AndOrOperationLink*
		//      timePoint=Timepoint? failresult=FailResult?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Then' ((followingOperation=trueOperation)|(linkOperation=[OperateLink]))
		//andor+=AndOrOperationLink*
		//timePoint=Timepoint? failresult=FailResult?
		public Group getGroup() { return cGroup; }
		
		//'Then'
		public Keyword getThenKeyword_0() { return cThenKeyword_0; }
		
		//((followingOperation=trueOperation)|(linkOperation=[OperateLink]))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(followingOperation=trueOperation)
		public Assignment getFollowingOperationAssignment_1_0() { return cFollowingOperationAssignment_1_0; }
		
		//trueOperation
		public RuleCall getFollowingOperationTrueOperationParserRuleCall_1_0_0() { return cFollowingOperationTrueOperationParserRuleCall_1_0_0; }
		
		//(linkOperation=[OperateLink])
		public Assignment getLinkOperationAssignment_1_1() { return cLinkOperationAssignment_1_1; }
		
		//[OperateLink]
		public CrossReference getLinkOperationOperateLinkCrossReference_1_1_0() { return cLinkOperationOperateLinkCrossReference_1_1_0; }
		
		//ID
		public RuleCall getLinkOperationOperateLinkIDTerminalRuleCall_1_1_0_1() { return cLinkOperationOperateLinkIDTerminalRuleCall_1_1_0_1; }
		
		//andor+=AndOrOperationLink*
		public Assignment getAndorAssignment_2() { return cAndorAssignment_2; }
		
		//AndOrOperationLink
		public RuleCall getAndorAndOrOperationLinkParserRuleCall_2_0() { return cAndorAndOrOperationLinkParserRuleCall_2_0; }
		
		//timePoint=Timepoint?
		public Assignment getTimePointAssignment_3() { return cTimePointAssignment_3; }
		
		//Timepoint
		public RuleCall getTimePointTimepointParserRuleCall_3_0() { return cTimePointTimepointParserRuleCall_3_0; }
		
		//failresult=FailResult?
		public Assignment getFailresultAssignment_4() { return cFailresultAssignment_4; }
		
		//FailResult
		public RuleCall getFailresultFailResultParserRuleCall_4_0() { return cFailresultFailResultParserRuleCall_4_0; }
	}
	public class TotalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.TotalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSetMessageExpressionParserRuleCall_0_0 = (RuleCall)cSetAssignment_0.eContents().get(0);
		private final Assignment cTotalConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTotalConditionTotalConditionParserRuleCall_1_0 = (RuleCall)cTotalConditionAssignment_1.eContents().get(0);
		private final Assignment cTotalOperationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTotalOperationTotalOperationParserRuleCall_2_0 = (RuleCall)cTotalOperationAssignment_2.eContents().get(0);
		private final Assignment cElseExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElseExpressionElseExpressionParserRuleCall_3_0 = (RuleCall)cElseExpressionAssignment_3.eContents().get(0);
		
		//TotalExpression:
		//  (set=messageExpression)?
		//  (totalCondition=TotalCondition)?
		//   totalOperation=TotalOperation
		//  (elseExpression=ElseExpression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(set=messageExpression)?
		//(totalCondition=TotalCondition)?
		// totalOperation=TotalOperation
		//(elseExpression=ElseExpression)?
		public Group getGroup() { return cGroup; }
		
		//(set=messageExpression)?
		public Assignment getSetAssignment_0() { return cSetAssignment_0; }
		
		//messageExpression
		public RuleCall getSetMessageExpressionParserRuleCall_0_0() { return cSetMessageExpressionParserRuleCall_0_0; }
		
		//(totalCondition=TotalCondition)?
		public Assignment getTotalConditionAssignment_1() { return cTotalConditionAssignment_1; }
		
		//TotalCondition
		public RuleCall getTotalConditionTotalConditionParserRuleCall_1_0() { return cTotalConditionTotalConditionParserRuleCall_1_0; }
		
		//totalOperation=TotalOperation
		public Assignment getTotalOperationAssignment_2() { return cTotalOperationAssignment_2; }
		
		//TotalOperation
		public RuleCall getTotalOperationTotalOperationParserRuleCall_2_0() { return cTotalOperationTotalOperationParserRuleCall_2_0; }
		
		//(elseExpression=ElseExpression)?
		public Assignment getElseExpressionAssignment_3() { return cElseExpressionAssignment_3; }
		
		//ElseExpression
		public RuleCall getElseExpressionElseExpressionParserRuleCall_3_0() { return cElseExpressionElseExpressionParserRuleCall_3_0; }
	}
	public class ElseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ElseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSetMessageExpressionParserRuleCall_1_0 = (RuleCall)cSetAssignment_1.eContents().get(0);
		private final Assignment cTotalConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTotalConditionTotalConditionParserRuleCall_2_0 = (RuleCall)cTotalConditionAssignment_2.eContents().get(0);
		private final Assignment cTotalOperationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTotalOperationTotalOperationParserRuleCall_3_0 = (RuleCall)cTotalOperationAssignment_3.eContents().get(0);
		
		//ElseExpression:
		//    'Else'
		//    (set=messageExpression)?
		//    (totalCondition=TotalCondition)?
		//    totalOperation=TotalOperation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Else'
		//(set=messageExpression)?
		//(totalCondition=TotalCondition)?
		//totalOperation=TotalOperation
		public Group getGroup() { return cGroup; }
		
		//'Else'
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }
		
		//(set=messageExpression)?
		public Assignment getSetAssignment_1() { return cSetAssignment_1; }
		
		//messageExpression
		public RuleCall getSetMessageExpressionParserRuleCall_1_0() { return cSetMessageExpressionParserRuleCall_1_0; }
		
		//(totalCondition=TotalCondition)?
		public Assignment getTotalConditionAssignment_2() { return cTotalConditionAssignment_2; }
		
		//TotalCondition
		public RuleCall getTotalConditionTotalConditionParserRuleCall_2_0() { return cTotalConditionTotalConditionParserRuleCall_2_0; }
		
		//totalOperation=TotalOperation
		public Assignment getTotalOperationAssignment_3() { return cTotalOperationAssignment_3; }
		
		//TotalOperation
		public RuleCall getTotalOperationTotalOperationParserRuleCall_3_0() { return cTotalOperationTotalOperationParserRuleCall_3_0; }
	}
	public class RuleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.RuleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRepeatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRepeatRepeatKeyword_0_0 = (Keyword)cRepeatAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSetMessageExpressionParserRuleCall_3_0 = (RuleCall)cSetAssignment_3.eContents().get(0);
		private final Assignment cSetdateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSetdateSetDateExpressionParserRuleCall_4_0 = (RuleCall)cSetdateAssignment_4.eContents().get(0);
		private final Assignment cTotalConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTotalConditionTotalConditionParserRuleCall_5_0 = (RuleCall)cTotalConditionAssignment_5.eContents().get(0);
		private final Assignment cTotalOperationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTotalOperationTotalOperationParserRuleCall_6_0 = (RuleCall)cTotalOperationAssignment_6.eContents().get(0);
		private final Assignment cSubExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSubExpressionSubExpressionParserRuleCall_7_0 = (RuleCall)cSubExpressionAssignment_7.eContents().get(0);
		private final Assignment cElseExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElseExpressionElseExpressionParserRuleCall_8_0 = (RuleCall)cElseExpressionAssignment_8.eContents().get(0);
		
		//RuleExpression:
		//    (repeat="Repeat")?
		//     name=ID ':'
		//    (set=messageExpression)?
		//    (setdate=setDateExpression)?
		//    (totalCondition=TotalCondition)?
		//     totalOperation=TotalOperation
		//    //加了这个以后多了好多警告，数都数不清，原本只有六个警告的
		//    (subExpression+=SubExpression)*
		//    (elseExpression=ElseExpression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(repeat="Repeat")?
		// name=ID ':'
		//(set=messageExpression)?
		//(setdate=setDateExpression)?
		//(totalCondition=TotalCondition)?
		// totalOperation=TotalOperation
		////加了这个以后多了好多警告，数都数不清，原本只有六个警告的
		//(subExpression+=SubExpression)*
		//(elseExpression=ElseExpression)?
		public Group getGroup() { return cGroup; }
		
		//(repeat="Repeat")?
		public Assignment getRepeatAssignment_0() { return cRepeatAssignment_0; }
		
		//"Repeat"
		public Keyword getRepeatRepeatKeyword_0_0() { return cRepeatRepeatKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(set=messageExpression)?
		public Assignment getSetAssignment_3() { return cSetAssignment_3; }
		
		//messageExpression
		public RuleCall getSetMessageExpressionParserRuleCall_3_0() { return cSetMessageExpressionParserRuleCall_3_0; }
		
		//(setdate=setDateExpression)?
		public Assignment getSetdateAssignment_4() { return cSetdateAssignment_4; }
		
		//setDateExpression
		public RuleCall getSetdateSetDateExpressionParserRuleCall_4_0() { return cSetdateSetDateExpressionParserRuleCall_4_0; }
		
		//(totalCondition=TotalCondition)?
		public Assignment getTotalConditionAssignment_5() { return cTotalConditionAssignment_5; }
		
		//TotalCondition
		public RuleCall getTotalConditionTotalConditionParserRuleCall_5_0() { return cTotalConditionTotalConditionParserRuleCall_5_0; }
		
		//totalOperation=TotalOperation
		public Assignment getTotalOperationAssignment_6() { return cTotalOperationAssignment_6; }
		
		//TotalOperation
		public RuleCall getTotalOperationTotalOperationParserRuleCall_6_0() { return cTotalOperationTotalOperationParserRuleCall_6_0; }
		
		////加了这个以后多了好多警告，数都数不清，原本只有六个警告的
		//(subExpression+=SubExpression)*
		public Assignment getSubExpressionAssignment_7() { return cSubExpressionAssignment_7; }
		
		//SubExpression
		public RuleCall getSubExpressionSubExpressionParserRuleCall_7_0() { return cSubExpressionSubExpressionParserRuleCall_7_0; }
		
		//(elseExpression=ElseExpression)?
		public Assignment getElseExpressionAssignment_8() { return cElseExpressionAssignment_8; }
		
		//ElseExpression
		public RuleCall getElseExpressionElseExpressionParserRuleCall_8_0() { return cElseExpressionElseExpressionParserRuleCall_8_0; }
	}
	public class SetDateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.setDateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessageIDTerminalRuleCall_1_0 = (RuleCall)cMessageAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//setDateExpression:
		//    'SetDate('message=ID')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'SetDate('message=ID')'
		public Group getGroup() { return cGroup; }
		
		//'SetDate('
		public Keyword getSetDateKeyword_0() { return cSetDateKeyword_0; }
		
		//message=ID
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }
		
		//ID
		public RuleCall getMessageIDTerminalRuleCall_1_0() { return cMessageIDTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SubExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.SubExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTotalExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTotalExpressionTotalExpressionParserRuleCall_2_0 = (RuleCall)cTotalExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubExpression:
		//    'SubRule''{' totalExpression=TotalExpression'}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'SubRule''{' totalExpression=TotalExpression'}'
		public Group getGroup() { return cGroup; }
		
		//'SubRule'
		public Keyword getSubRuleKeyword_0() { return cSubRuleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//totalExpression=TotalExpression
		public Assignment getTotalExpressionAssignment_2() { return cTotalExpressionAssignment_2; }
		
		//TotalExpression
		public RuleCall getTotalExpressionTotalExpressionParserRuleCall_2_0() { return cTotalExpressionTotalExpressionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FailResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.FailResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFailResultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFollowingOperationAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cFollowingOperationTrueOperationParserRuleCall_1_0_0 = (RuleCall)cFollowingOperationAssignment_1_0.eContents().get(0);
		private final Assignment cLinkOperationAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cLinkOperationOperateLinkCrossReference_1_1_0 = (CrossReference)cLinkOperationAssignment_1_1.eContents().get(0);
		private final RuleCall cLinkOperationOperateLinkIDTerminalRuleCall_1_1_0_1 = (RuleCall)cLinkOperationOperateLinkCrossReference_1_1_0.eContents().get(1);
		private final Assignment cAndorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAndorAndOrOperationLinkParserRuleCall_2_0 = (RuleCall)cAndorAssignment_2.eContents().get(0);
		private final Assignment cTimePointAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimePointTimepointParserRuleCall_3_0 = (RuleCall)cTimePointAssignment_3.eContents().get(0);
		private final Assignment cThenoperationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenoperationThenOperationParserRuleCall_4_0 = (RuleCall)cThenoperationAssignment_4.eContents().get(0);
		
		////感觉可以把这个废弃，就和平行网关一样，其实就是完成一个rule但是没完成另一个rule
		//FailResult:
		//    'FailResult:'
		//    ((followingOperation=trueOperation)|(linkOperation=[OperateLink]))
		//    andor+=AndOrOperationLink*
		//    timePoint=Timepoint?
		//     thenoperation+=ThenOperation*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'FailResult:'
		//((followingOperation=trueOperation)|(linkOperation=[OperateLink]))
		//andor+=AndOrOperationLink*
		//timePoint=Timepoint?
		// thenoperation+=ThenOperation*
		public Group getGroup() { return cGroup; }
		
		//'FailResult:'
		public Keyword getFailResultKeyword_0() { return cFailResultKeyword_0; }
		
		//((followingOperation=trueOperation)|(linkOperation=[OperateLink]))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(followingOperation=trueOperation)
		public Assignment getFollowingOperationAssignment_1_0() { return cFollowingOperationAssignment_1_0; }
		
		//trueOperation
		public RuleCall getFollowingOperationTrueOperationParserRuleCall_1_0_0() { return cFollowingOperationTrueOperationParserRuleCall_1_0_0; }
		
		//(linkOperation=[OperateLink])
		public Assignment getLinkOperationAssignment_1_1() { return cLinkOperationAssignment_1_1; }
		
		//[OperateLink]
		public CrossReference getLinkOperationOperateLinkCrossReference_1_1_0() { return cLinkOperationOperateLinkCrossReference_1_1_0; }
		
		//ID
		public RuleCall getLinkOperationOperateLinkIDTerminalRuleCall_1_1_0_1() { return cLinkOperationOperateLinkIDTerminalRuleCall_1_1_0_1; }
		
		//andor+=AndOrOperationLink*
		public Assignment getAndorAssignment_2() { return cAndorAssignment_2; }
		
		//AndOrOperationLink
		public RuleCall getAndorAndOrOperationLinkParserRuleCall_2_0() { return cAndorAndOrOperationLinkParserRuleCall_2_0; }
		
		//timePoint=Timepoint?
		public Assignment getTimePointAssignment_3() { return cTimePointAssignment_3; }
		
		//Timepoint
		public RuleCall getTimePointTimepointParserRuleCall_3_0() { return cTimePointTimepointParserRuleCall_3_0; }
		
		//thenoperation+=ThenOperation*
		public Assignment getThenoperationAssignment_4() { return cThenoperationAssignment_4; }
		
		//ThenOperation
		public RuleCall getThenoperationThenOperationParserRuleCall_4_0() { return cThenoperationThenOperationParserRuleCall_4_0; }
	}
	public class TimepointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.Timepoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWithinPointParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBeforePointParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Timepoint:
		//    WithinPoint|BeforePoint
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//WithinPoint|BeforePoint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WithinPoint
		public RuleCall getWithinPointParserRuleCall_0() { return cWithinPointParserRuleCall_0; }
		
		//BeforePoint
		public RuleCall getBeforePointParserRuleCall_1() { return cBeforePointParserRuleCall_1; }
	}
	public class WithinPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.WithinPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeEachTimeParserRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		private final Keyword cAfterKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThingAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cThingRuleExpressionCrossReference_4_0 = (CrossReference)cThingAssignment_4.eContents().get(0);
		private final RuleCall cThingRuleExpressionIDTerminalRuleCall_4_0_1 = (RuleCall)cThingRuleExpressionCrossReference_4_0.eContents().get(1);
		
		//WithinPoint:
		//    'within' number=INT time=EachTime 'after' thing=[RuleExpression]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'within' number=INT time=EachTime 'after' thing=[RuleExpression]
		public Group getGroup() { return cGroup; }
		
		//'within'
		public Keyword getWithinKeyword_0() { return cWithinKeyword_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
		
		//time=EachTime
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }
		
		//EachTime
		public RuleCall getTimeEachTimeParserRuleCall_2_0() { return cTimeEachTimeParserRuleCall_2_0; }
		
		//'after'
		public Keyword getAfterKeyword_3() { return cAfterKeyword_3; }
		
		//thing=[RuleExpression]
		public Assignment getThingAssignment_4() { return cThingAssignment_4; }
		
		//[RuleExpression]
		public CrossReference getThingRuleExpressionCrossReference_4_0() { return cThingRuleExpressionCrossReference_4_0; }
		
		//ID
		public RuleCall getThingRuleExpressionIDTerminalRuleCall_4_0_1() { return cThingRuleExpressionIDTerminalRuleCall_4_0_1; }
	}
	public class BeforePointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.BeforePoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeforeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLineTimeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLineTimeThisDateParserRuleCall_1_0_0 = (RuleCall)cLineTimeAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cValueKeyvalueCrossReference_1_1_0 = (CrossReference)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cValueKeyvalueIDTerminalRuleCall_1_1_0_1 = (RuleCall)cValueKeyvalueCrossReference_1_1_0.eContents().get(1);
		
		//BeforePoint:
		//    'before' ((lineTime=ThisDate)|(value=[keyvalue]))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'before' ((lineTime=ThisDate)|(value=[keyvalue]))
		public Group getGroup() { return cGroup; }
		
		//'before'
		public Keyword getBeforeKeyword_0() { return cBeforeKeyword_0; }
		
		//((lineTime=ThisDate)|(value=[keyvalue]))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(lineTime=ThisDate)
		public Assignment getLineTimeAssignment_1_0() { return cLineTimeAssignment_1_0; }
		
		//ThisDate
		public RuleCall getLineTimeThisDateParserRuleCall_1_0_0() { return cLineTimeThisDateParserRuleCall_1_0_0; }
		
		//(value=[keyvalue])
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//[keyvalue]
		public CrossReference getValueKeyvalueCrossReference_1_1_0() { return cValueKeyvalueCrossReference_1_1_0; }
		
		//ID
		public RuleCall getValueKeyvalueIDTerminalRuleCall_1_1_0_1() { return cValueKeyvalueIDTerminalRuleCall_1_1_0_1; }
	}
	public class SingleConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.SingleCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNoExclamationMarkKeyword_0_0 = (Keyword)cNoAssignment_0.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionTrueConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		
		//SingleCondition:
		//    (no="!")? condition=TrueCondition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(no="!")? condition=TrueCondition
		public Group getGroup() { return cGroup; }
		
		//(no="!")?
		public Assignment getNoAssignment_0() { return cNoAssignment_0; }
		
		//"!"
		public Keyword getNoExclamationMarkKeyword_0_0() { return cNoExclamationMarkKeyword_0_0; }
		
		//condition=TrueCondition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//TrueCondition
		public RuleCall getConditionTrueConditionParserRuleCall_1_0() { return cConditionTrueConditionParserRuleCall_1_0; }
	}
	public class TrueConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.TrueCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsTimeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIsTrueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIsDoneParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCheckExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTimepointParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCompareStringParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTimeSubParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//TrueCondition:
		//    isTime|logic|isTrue|isDone|checkExpression|Timepoint|CompareString|TimeSub;
		@Override public ParserRule getRule() { return rule; }
		
		//isTime|logic|isTrue|isDone|checkExpression|Timepoint|CompareString|TimeSub
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//isTime
		public RuleCall getIsTimeParserRuleCall_0() { return cIsTimeParserRuleCall_0; }
		
		//logic
		public RuleCall getLogicParserRuleCall_1() { return cLogicParserRuleCall_1; }
		
		//isTrue
		public RuleCall getIsTrueParserRuleCall_2() { return cIsTrueParserRuleCall_2; }
		
		//isDone
		public RuleCall getIsDoneParserRuleCall_3() { return cIsDoneParserRuleCall_3; }
		
		//checkExpression
		public RuleCall getCheckExpressionParserRuleCall_4() { return cCheckExpressionParserRuleCall_4; }
		
		//Timepoint
		public RuleCall getTimepointParserRuleCall_5() { return cTimepointParserRuleCall_5; }
		
		//CompareString
		public RuleCall getCompareStringParserRuleCall_6() { return cCompareStringParserRuleCall_6; }
		
		//TimeSub
		public RuleCall getTimeSubParserRuleCall_7() { return cTimeSubParserRuleCall_7; }
	}
	public class CompareStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.CompareString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompareStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueAMixExpressionParserRuleCall_1_0 = (RuleCall)cValueAAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueBAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueBMixExpressionParserRuleCall_3_0 = (RuleCall)cValueBAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CompareString:
		//    'compareString('valueA=MixExpression ',' valueB=MixExpression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'compareString('valueA=MixExpression ',' valueB=MixExpression')'
		public Group getGroup() { return cGroup; }
		
		//'compareString('
		public Keyword getCompareStringKeyword_0() { return cCompareStringKeyword_0; }
		
		//valueA=MixExpression
		public Assignment getValueAAssignment_1() { return cValueAAssignment_1; }
		
		//MixExpression
		public RuleCall getValueAMixExpressionParserRuleCall_1_0() { return cValueAMixExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//valueB=MixExpression
		public Assignment getValueBAssignment_3() { return cValueBAssignment_3; }
		
		//MixExpression
		public RuleCall getValueBMixExpressionParserRuleCall_3_0() { return cValueBMixExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TimeSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.TimeSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeSubKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueAMixExpressionParserRuleCall_1_0 = (RuleCall)cValueAAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueBAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueBMixExpressionParserRuleCall_3_0 = (RuleCall)cValueBAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueCAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cValueCRuleExpressionCrossReference_4_1_0 = (CrossReference)cValueCAssignment_4_1.eContents().get(0);
		private final RuleCall cValueCRuleExpressionIDTerminalRuleCall_4_1_0_1 = (RuleCall)cValueCRuleExpressionCrossReference_4_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDurationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDurationDurationParserRuleCall_6_0 = (RuleCall)cDurationAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cCompareAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCompareMATH_SYMBOLTerminalRuleCall_8_0 = (RuleCall)cCompareAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//TimeSub:
		//    'timeSub('valueA=MixExpression ',' valueB=MixExpression? ('r' valueC=[RuleExpression])? ',' duration=Duration ',' compare=MATH_SYMBOL')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'timeSub('valueA=MixExpression ',' valueB=MixExpression? ('r' valueC=[RuleExpression])? ',' duration=Duration ',' compare=MATH_SYMBOL')'
		public Group getGroup() { return cGroup; }
		
		//'timeSub('
		public Keyword getTimeSubKeyword_0() { return cTimeSubKeyword_0; }
		
		//valueA=MixExpression
		public Assignment getValueAAssignment_1() { return cValueAAssignment_1; }
		
		//MixExpression
		public RuleCall getValueAMixExpressionParserRuleCall_1_0() { return cValueAMixExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//valueB=MixExpression?
		public Assignment getValueBAssignment_3() { return cValueBAssignment_3; }
		
		//MixExpression
		public RuleCall getValueBMixExpressionParserRuleCall_3_0() { return cValueBMixExpressionParserRuleCall_3_0; }
		
		//('r' valueC=[RuleExpression])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'r'
		public Keyword getRKeyword_4_0() { return cRKeyword_4_0; }
		
		//valueC=[RuleExpression]
		public Assignment getValueCAssignment_4_1() { return cValueCAssignment_4_1; }
		
		//[RuleExpression]
		public CrossReference getValueCRuleExpressionCrossReference_4_1_0() { return cValueCRuleExpressionCrossReference_4_1_0; }
		
		//ID
		public RuleCall getValueCRuleExpressionIDTerminalRuleCall_4_1_0_1() { return cValueCRuleExpressionIDTerminalRuleCall_4_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//duration=Duration
		public Assignment getDurationAssignment_6() { return cDurationAssignment_6; }
		
		//Duration
		public RuleCall getDurationDurationParserRuleCall_6_0() { return cDurationDurationParserRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//compare=MATH_SYMBOL
		public Assignment getCompareAssignment_8() { return cCompareAssignment_8; }
		
		//MATH_SYMBOL
		public RuleCall getCompareMATH_SYMBOLTerminalRuleCall_8_0() { return cCompareMATH_SYMBOLTerminalRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class EachTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.EachTime");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cYearsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMonthsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDaysKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHoursKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMinsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//EachTime:
		////    一个月按30天算
		//    'years'|'months'|'days'|'hours'|'mins'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////    一个月按30天算
		//    'years'|'months'|'days'|'hours'|'mins'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////    一个月按30天算
		//    'years'
		public Keyword getYearsKeyword_0() { return cYearsKeyword_0; }
		
		//'months'
		public Keyword getMonthsKeyword_1() { return cMonthsKeyword_1; }
		
		//'days'
		public Keyword getDaysKeyword_2() { return cDaysKeyword_2; }
		
		//'hours'
		public Keyword getHoursKeyword_3() { return cHoursKeyword_3; }
		
		//'mins'
		public Keyword getMinsKeyword_4() { return cMinsKeyword_4; }
	}
	public class IsTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.isTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsTimeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionMixExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cValueRuleExpressionCrossReference_3_1_0 = (CrossReference)cValueAssignment_3_1.eContents().get(0);
		private final RuleCall cValueRuleExpressionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cValueRuleExpressionCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSymbolAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSymbolARITHMETIC_OPERATORTerminalRuleCall_4_0_0 = (RuleCall)cSymbolAssignment_4_0.eContents().get(0);
		private final Assignment cDurationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDurationDurationParserRuleCall_4_1_0 = (RuleCall)cDurationAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//isTime:
		//  {isTime} 'isTime('expression=MixExpression? ('r' value=[RuleExpression])? (symbol=ARITHMETIC_OPERATOR duration=Duration)?')';
		@Override public ParserRule getRule() { return rule; }
		
		//{isTime} 'isTime('expression=MixExpression? ('r' value=[RuleExpression])? (symbol=ARITHMETIC_OPERATOR duration=Duration)?')'
		public Group getGroup() { return cGroup; }
		
		//{isTime}
		public Action getIsTimeAction_0() { return cIsTimeAction_0; }
		
		//'isTime('
		public Keyword getIsTimeKeyword_1() { return cIsTimeKeyword_1; }
		
		//expression=MixExpression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//MixExpression
		public RuleCall getExpressionMixExpressionParserRuleCall_2_0() { return cExpressionMixExpressionParserRuleCall_2_0; }
		
		//('r' value=[RuleExpression])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'r'
		public Keyword getRKeyword_3_0() { return cRKeyword_3_0; }
		
		//value=[RuleExpression]
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//[RuleExpression]
		public CrossReference getValueRuleExpressionCrossReference_3_1_0() { return cValueRuleExpressionCrossReference_3_1_0; }
		
		//ID
		public RuleCall getValueRuleExpressionIDTerminalRuleCall_3_1_0_1() { return cValueRuleExpressionIDTerminalRuleCall_3_1_0_1; }
		
		//(symbol=ARITHMETIC_OPERATOR duration=Duration)?
		public Group getGroup_4() { return cGroup_4; }
		
		//symbol=ARITHMETIC_OPERATOR
		public Assignment getSymbolAssignment_4_0() { return cSymbolAssignment_4_0; }
		
		//ARITHMETIC_OPERATOR
		public RuleCall getSymbolARITHMETIC_OPERATORTerminalRuleCall_4_0_0() { return cSymbolARITHMETIC_OPERATORTerminalRuleCall_4_0_0; }
		
		//duration=Duration
		public Assignment getDurationAssignment_4_1() { return cDurationAssignment_4_1; }
		
		//Duration
		public RuleCall getDurationDurationParserRuleCall_4_1_0() { return cDurationDurationParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class LogicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.logic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLogicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueAMixExpressionParserRuleCall_1_0 = (RuleCall)cValueAAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueBAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueBMixExpressionParserRuleCall_3_0 = (RuleCall)cValueBAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMathSymbolAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMathSymbolMATH_SYMBOLTerminalRuleCall_5_0 = (RuleCall)cMathSymbolAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//logic:
		//  'logic(' valueA=MixExpression ',' valueB=MixExpression ',' mathSymbol=MATH_SYMBOL')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'logic(' valueA=MixExpression ',' valueB=MixExpression ',' mathSymbol=MATH_SYMBOL')'
		public Group getGroup() { return cGroup; }
		
		//'logic('
		public Keyword getLogicKeyword_0() { return cLogicKeyword_0; }
		
		//valueA=MixExpression
		public Assignment getValueAAssignment_1() { return cValueAAssignment_1; }
		
		//MixExpression
		public RuleCall getValueAMixExpressionParserRuleCall_1_0() { return cValueAMixExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//valueB=MixExpression
		public Assignment getValueBAssignment_3() { return cValueBAssignment_3; }
		
		//MixExpression
		public RuleCall getValueBMixExpressionParserRuleCall_3_0() { return cValueBMixExpressionParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//mathSymbol=MATH_SYMBOL
		public Assignment getMathSymbolAssignment_5() { return cMathSymbolAssignment_5; }
		
		//MATH_SYMBOL
		public RuleCall getMathSymbolMATH_SYMBOLTerminalRuleCall_5_0() { return cMathSymbolMATH_SYMBOLTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class IsTrueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.isTrue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsTrueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCompareAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompareSingleExpressionParserRuleCall_1_0 = (RuleCall)cCompareAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//isTrue:
		//  'isTrue('compare=SingleExpression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'isTrue('compare=SingleExpression')'
		public Group getGroup() { return cGroup; }
		
		//'isTrue('
		public Keyword getIsTrueKeyword_0() { return cIsTrueKeyword_0; }
		
		//compare=SingleExpression
		public Assignment getCompareAssignment_1() { return cCompareAssignment_1; }
		
		//SingleExpression
		public RuleCall getCompareSingleExpressionParserRuleCall_1_0() { return cCompareSingleExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class IsDoneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.isDone");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsDoneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameRuleExpressionCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameRuleExpressionIDTerminalRuleCall_1_0_1 = (RuleCall)cNameRuleExpressionCrossReference_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//isDone:
		//  'isDone('name=[RuleExpression]')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'isDone('name=[RuleExpression]')'
		public Group getGroup() { return cGroup; }
		
		//'isDone('
		public Keyword getIsDoneKeyword_0() { return cIsDoneKeyword_0; }
		
		//name=[RuleExpression]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[RuleExpression]
		public CrossReference getNameRuleExpressionCrossReference_1_0() { return cNameRuleExpressionCrossReference_1_0; }
		
		//ID
		public RuleCall getNameRuleExpressionIDTerminalRuleCall_1_0_1() { return cNameRuleExpressionIDTerminalRuleCall_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class CheckExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.checkExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameModelCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameModelIDTerminalRuleCall_1_0_1 = (RuleCall)cNameModelCrossReference_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//checkExpression:
		//  'check('name=[Model]')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'check('name=[Model]')'
		public Group getGroup() { return cGroup; }
		
		//'check('
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//name=[Model]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Model]
		public CrossReference getNameModelCrossReference_1_0() { return cNameModelCrossReference_1_0; }
		
		//ID
		public RuleCall getNameModelIDTerminalRuleCall_1_0_1() { return cNameModelIDTerminalRuleCall_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class MixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.MixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionSingleExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Assignment cOtherMixExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOtherMixExpressionOtherMixExpressionParserRuleCall_1_0 = (RuleCall)cOtherMixExpressionAssignment_1.eContents().get(0);
		
		//MixExpression:
		//    expression=SingleExpression (otherMixExpression+=OtherMixExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=SingleExpression (otherMixExpression+=OtherMixExpression)*
		public Group getGroup() { return cGroup; }
		
		//expression=SingleExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//SingleExpression
		public RuleCall getExpressionSingleExpressionParserRuleCall_0_0() { return cExpressionSingleExpressionParserRuleCall_0_0; }
		
		//(otherMixExpression+=OtherMixExpression)*
		public Assignment getOtherMixExpressionAssignment_1() { return cOtherMixExpressionAssignment_1; }
		
		//OtherMixExpression
		public RuleCall getOtherMixExpressionOtherMixExpressionParserRuleCall_1_0() { return cOtherMixExpressionOtherMixExpressionParserRuleCall_1_0; }
	}
	public class OtherMixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.OtherMixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLinkAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLinkARITHMETIC_OPERATORTerminalRuleCall_0_0 = (RuleCall)cLinkAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSingleExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//OtherMixExpression:
		//    link=ARITHMETIC_OPERATOR expression=SingleExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//link=ARITHMETIC_OPERATOR expression=SingleExpression
		public Group getGroup() { return cGroup; }
		
		//link=ARITHMETIC_OPERATOR
		public Assignment getLinkAssignment_0() { return cLinkAssignment_0; }
		
		//ARITHMETIC_OPERATOR
		public RuleCall getLinkARITHMETIC_OPERATORTerminalRuleCall_0_0() { return cLinkARITHMETIC_OPERATORTerminalRuleCall_0_0; }
		
		//expression=SingleExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//SingleExpression
		public RuleCall getExpressionSingleExpressionParserRuleCall_1_0() { return cExpressionSingleExpressionParserRuleCall_1_0; }
	}
	public class SingleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.SingleExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegularExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cThingExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOtherExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPersonExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRuleTimeExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFloatExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStringExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPeriodExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cGetPeriodExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//SingleExpression:
		//    RegularExpression | ThingExpression| OtherExpression |PersonExpression
		//    | RuleTimeExpression | FloatExpression | StringExpression
		//    | PeriodExpression | GetPeriodExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//RegularExpression | ThingExpression| OtherExpression |PersonExpression
		//| RuleTimeExpression | FloatExpression | StringExpression
		//| PeriodExpression | GetPeriodExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RegularExpression
		public RuleCall getRegularExpressionParserRuleCall_0() { return cRegularExpressionParserRuleCall_0; }
		
		//ThingExpression
		public RuleCall getThingExpressionParserRuleCall_1() { return cThingExpressionParserRuleCall_1; }
		
		//OtherExpression
		public RuleCall getOtherExpressionParserRuleCall_2() { return cOtherExpressionParserRuleCall_2; }
		
		//PersonExpression
		public RuleCall getPersonExpressionParserRuleCall_3() { return cPersonExpressionParserRuleCall_3; }
		
		//RuleTimeExpression
		public RuleCall getRuleTimeExpressionParserRuleCall_4() { return cRuleTimeExpressionParserRuleCall_4; }
		
		//FloatExpression
		public RuleCall getFloatExpressionParserRuleCall_5() { return cFloatExpressionParserRuleCall_5; }
		
		//StringExpression
		public RuleCall getStringExpressionParserRuleCall_6() { return cStringExpressionParserRuleCall_6; }
		
		//PeriodExpression
		public RuleCall getPeriodExpressionParserRuleCall_7() { return cPeriodExpressionParserRuleCall_7; }
		
		//GetPeriodExpression
		public RuleCall getGetPeriodExpressionParserRuleCall_8() { return cGetPeriodExpressionParserRuleCall_8; }
	}
	public class PeriodExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.PeriodExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeEachTimeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//PeriodExpression:
		//    value=INT type=EachTime
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT type=EachTime
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//type=EachTime
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//EachTime
		public RuleCall getTypeEachTimeParserRuleCall_1_0() { return cTypeEachTimeParserRuleCall_1_0; }
	}
	public class GetPeriodExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.GetPeriodExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueIDTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeEachTimeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//GetPeriodExpression:
		//    value=ID type=EachTime
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID type=EachTime
		public Group getGroup() { return cGroup; }
		
		//value=ID
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0_0() { return cValueIDTerminalRuleCall_0_0; }
		
		//type=EachTime
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//EachTime
		public RuleCall getTypeEachTimeParserRuleCall_1_0() { return cTypeEachTimeParserRuleCall_1_0; }
	}
	public class RuleTimeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.RuleTimeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetRuleTimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueRuleExpressionCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueRuleExpressionIDTerminalRuleCall_1_0_1 = (RuleCall)cValueRuleExpressionCrossReference_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RuleTimeExpression:
		//    'getRuleTime(' value=[RuleExpression] ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'getRuleTime(' value=[RuleExpression] ')'
		public Group getGroup() { return cGroup; }
		
		//'getRuleTime('
		public Keyword getGetRuleTimeKeyword_0() { return cGetRuleTimeKeyword_0; }
		
		//value=[RuleExpression]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//[RuleExpression]
		public CrossReference getValueRuleExpressionCrossReference_1_0() { return cValueRuleExpressionCrossReference_1_0; }
		
		//ID
		public RuleCall getValueRuleExpressionIDTerminalRuleCall_1_0_1() { return cValueRuleExpressionIDTerminalRuleCall_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class OtherExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.OtherExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//OtherExpression:
		//    value=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}
	public class StringExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.StringExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StringExpression:
		//    '"' value=ID '"'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'"' value=ID '"'
		public Group getGroup() { return cGroup; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
	}
	public class FloatExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.FloatExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//FloatExpression:
		//    'f' value=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'f' value=ID
		public Group getGroup() { return cGroup; }
		
		//'f'
		public Keyword getFKeyword_0() { return cFKeyword_0; }
		
		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
	}
	public class PersonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.PersonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueInitExpressionsCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueInitExpressionsIDTerminalRuleCall_1_0_1 = (RuleCall)cValueInitExpressionsCrossReference_1_0.eContents().get(1);
		
		//PersonExpression:
		//    'p' value=[initExpressions]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'p' value=[initExpressions]
		public Group getGroup() { return cGroup; }
		
		//'p'
		public Keyword getPKeyword_0() { return cPKeyword_0; }
		
		//value=[initExpressions]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//[initExpressions]
		public CrossReference getValueInitExpressionsCrossReference_1_0() { return cValueInitExpressionsCrossReference_1_0; }
		
		//ID
		public RuleCall getValueInitExpressionsIDTerminalRuleCall_1_0_1() { return cValueInitExpressionsIDTerminalRuleCall_1_0_1; }
	}
	public class RegularExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.RegularExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAllNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cThisDecimalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cThisBooleanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNowParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cThisDateParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//RegularExpression:
		//   AllNumber|ThisDecimal|ThisBoolean|Now|ThisDate;
		@Override public ParserRule getRule() { return rule; }
		
		//AllNumber|ThisDecimal|ThisBoolean|Now|ThisDate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AllNumber
		public RuleCall getAllNumberParserRuleCall_0() { return cAllNumberParserRuleCall_0; }
		
		//ThisDecimal
		public RuleCall getThisDecimalParserRuleCall_1() { return cThisDecimalParserRuleCall_1; }
		
		//ThisBoolean
		public RuleCall getThisBooleanParserRuleCall_2() { return cThisBooleanParserRuleCall_2; }
		
		//Now
		public RuleCall getNowParserRuleCall_3() { return cNowParserRuleCall_3; }
		
		//ThisDate
		public RuleCall getThisDateParserRuleCall_4() { return cThisDateParserRuleCall_4; }
	}
	public class ThingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ThingExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectExpressParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubjectExpressParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ThingExpression:
		//    ObjectExpress|SubjectExpress
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ObjectExpress|SubjectExpress
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ObjectExpress
		public RuleCall getObjectExpressParserRuleCall_0() { return cObjectExpressParserRuleCall_0; }
		
		//SubjectExpress
		public RuleCall getSubjectExpressParserRuleCall_1() { return cSubjectExpressParserRuleCall_1; }
	}
	public class SubjectExpressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.SubjectExpress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSubjectInitExpressionsCrossReference_1_0 = (CrossReference)cSubjectAssignment_1.eContents().get(0);
		private final RuleCall cSubjectInitExpressionsIDTerminalRuleCall_1_0_1 = (RuleCall)cSubjectInitExpressionsCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeIDTerminalRuleCall_3_0 = (RuleCall)cAttributeAssignment_3.eContents().get(0);
		
		//SubjectExpress:
		//    's' subject=[initExpressions] '.' attribute=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'s' subject=[initExpressions] '.' attribute=ID
		public Group getGroup() { return cGroup; }
		
		//'s'
		public Keyword getSKeyword_0() { return cSKeyword_0; }
		
		//subject=[initExpressions]
		public Assignment getSubjectAssignment_1() { return cSubjectAssignment_1; }
		
		//[initExpressions]
		public CrossReference getSubjectInitExpressionsCrossReference_1_0() { return cSubjectInitExpressionsCrossReference_1_0; }
		
		//ID
		public RuleCall getSubjectInitExpressionsIDTerminalRuleCall_1_0_1() { return cSubjectInitExpressionsIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_3_0() { return cAttributeIDTerminalRuleCall_3_0; }
	}
	public class ObjectExpressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ObjectExpress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjectInitExpressionoCrossReference_1_0 = (CrossReference)cObjectAssignment_1.eContents().get(0);
		private final RuleCall cObjectInitExpressionoIDTerminalRuleCall_1_0_1 = (RuleCall)cObjectInitExpressionoCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeIDTerminalRuleCall_3_0 = (RuleCall)cAttributeAssignment_3.eContents().get(0);
		
		//ObjectExpress:
		//    'o' object=[initExpressiono] '.' attribute=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'o' object=[initExpressiono] '.' attribute=ID
		public Group getGroup() { return cGroup; }
		
		//'o'
		public Keyword getOKeyword_0() { return cOKeyword_0; }
		
		//object=[initExpressiono]
		public Assignment getObjectAssignment_1() { return cObjectAssignment_1; }
		
		//[initExpressiono]
		public CrossReference getObjectInitExpressionoCrossReference_1_0() { return cObjectInitExpressionoCrossReference_1_0; }
		
		//ID
		public RuleCall getObjectInitExpressionoIDTerminalRuleCall_1_0_1() { return cObjectInitExpressionoIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_3_0() { return cAttributeIDTerminalRuleCall_3_0; }
	}
	public class TrueOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.trueOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTransferExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChangeExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//trueOperation:
		//    transferExpression|changeExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//transferExpression|changeExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//transferExpression
		public RuleCall getTransferExpressionParserRuleCall_0() { return cTransferExpressionParserRuleCall_0; }
		
		//changeExpression
		public RuleCall getChangeExpressionParserRuleCall_1() { return cChangeExpressionParserRuleCall_1; }
	}
	public class MessageExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.messageExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEverymassageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEverymassageEveryMessageParserRuleCall_1_0 = (RuleCall)cEverymassageAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEverymassageAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEverymassageEveryMessageParserRuleCall_2_1_0 = (RuleCall)cEverymassageAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//messageExpression:
		//    'SetMessage('everymassage+=everyMessage (',' everymassage+=everyMessage)*')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'SetMessage('everymassage+=everyMessage (',' everymassage+=everyMessage)*')'
		public Group getGroup() { return cGroup; }
		
		//'SetMessage('
		public Keyword getSetMessageKeyword_0() { return cSetMessageKeyword_0; }
		
		//everymassage+=everyMessage
		public Assignment getEverymassageAssignment_1() { return cEverymassageAssignment_1; }
		
		//everyMessage
		public RuleCall getEverymassageEveryMessageParserRuleCall_1_0() { return cEverymassageEveryMessageParserRuleCall_1_0; }
		
		//(',' everymassage+=everyMessage)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//everymassage+=everyMessage
		public Assignment getEverymassageAssignment_2_1() { return cEverymassageAssignment_2_1; }
		
		//everyMessage
		public RuleCall getEverymassageEveryMessageParserRuleCall_2_1_0() { return cEverymassageEveryMessageParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EveryMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.everyMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSymbolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSymbolNewKeyword_0_0 = (Keyword)cSymbolAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageIDTerminalRuleCall_2_0 = (RuleCall)cMessageAssignment_2.eContents().get(0);
		
		//everyMessage:
		//    (symbol="new")? type=type message=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(symbol="new")? type=type message=ID
		public Group getGroup() { return cGroup; }
		
		//(symbol="new")?
		public Assignment getSymbolAssignment_0() { return cSymbolAssignment_0; }
		
		//"new"
		public Keyword getSymbolNewKeyword_0_0() { return cSymbolNewKeyword_0_0; }
		
		//type=type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//message=ID
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }
		
		//ID
		public RuleCall getMessageIDTerminalRuleCall_2_0() { return cMessageIDTerminalRuleCall_2_0; }
	}
	public class TransferExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.transferExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransferKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPersonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPersonInitExpressionsCrossReference_1_0 = (CrossReference)cPersonAssignment_1.eContents().get(0);
		private final RuleCall cPersonInitExpressionsIDTerminalRuleCall_1_0_1 = (RuleCall)cPersonInitExpressionsCrossReference_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueMixExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////这里也会有警告，在加了|value=[keyvalue]以后
		//transferExpression:
		//    'transfer('(person=[initExpressions]) ',' value=MixExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'transfer('(person=[initExpressions]) ',' value=MixExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'transfer('
		public Keyword getTransferKeyword_0() { return cTransferKeyword_0; }
		
		//(person=[initExpressions])
		public Assignment getPersonAssignment_1() { return cPersonAssignment_1; }
		
		//[initExpressions]
		public CrossReference getPersonInitExpressionsCrossReference_1_0() { return cPersonInitExpressionsCrossReference_1_0; }
		
		//ID
		public RuleCall getPersonInitExpressionsIDTerminalRuleCall_1_0_1() { return cPersonInitExpressionsIDTerminalRuleCall_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//value=MixExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//MixExpression
		public RuleCall getValueMixExpressionParserRuleCall_3_0() { return cValueMixExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ChangeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.changeExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChangeContractParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChangeRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOtherchangeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChangeStringParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cChangeOtherParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cChangeAddressParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//changeExpression:
		//    changeContract|changeRule|otherchange|changeString|changeOther|changeAddress;
		@Override public ParserRule getRule() { return rule; }
		
		//changeContract|changeRule|otherchange|changeString|changeOther|changeAddress
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//changeContract
		public RuleCall getChangeContractParserRuleCall_0() { return cChangeContractParserRuleCall_0; }
		
		//changeRule
		public RuleCall getChangeRuleParserRuleCall_1() { return cChangeRuleParserRuleCall_1; }
		
		//otherchange
		public RuleCall getOtherchangeParserRuleCall_2() { return cOtherchangeParserRuleCall_2; }
		
		//changeString
		public RuleCall getChangeStringParserRuleCall_3() { return cChangeStringParserRuleCall_3; }
		
		//changeOther
		public RuleCall getChangeOtherParserRuleCall_4() { return cChangeOtherParserRuleCall_4; }
		
		//changeAddress
		public RuleCall getChangeAddressParserRuleCall_5() { return cChangeAddressParserRuleCall_5; }
	}
	public class ChangeStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.changeString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChangeThingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChangeThingMixExpressionParserRuleCall_1_0 = (RuleCall)cChangeThingAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChangeResultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChangeResultMixExpressionParserRuleCall_3_0 = (RuleCall)cChangeResultAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//changeString:
		//    'assignString(' changeThing=MixExpression ',' changeResult=MixExpression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'assignString(' changeThing=MixExpression ',' changeResult=MixExpression')'
		public Group getGroup() { return cGroup; }
		
		//'assignString('
		public Keyword getAssignStringKeyword_0() { return cAssignStringKeyword_0; }
		
		//changeThing=MixExpression
		public Assignment getChangeThingAssignment_1() { return cChangeThingAssignment_1; }
		
		//MixExpression
		public RuleCall getChangeThingMixExpressionParserRuleCall_1_0() { return cChangeThingMixExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//changeResult=MixExpression
		public Assignment getChangeResultAssignment_3() { return cChangeResultAssignment_3; }
		
		//MixExpression
		public RuleCall getChangeResultMixExpressionParserRuleCall_3_0() { return cChangeResultMixExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class OtherchangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.otherchange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChangeThingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChangeThingMixExpressionParserRuleCall_1_0 = (RuleCall)cChangeThingAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChangeResultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChangeResultMixExpressionParserRuleCall_3_0 = (RuleCall)cChangeResultAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//otherchange:
		//    //singleExpression的话就没有警告
		//    'assign(' changeThing=MixExpression ',' changeResult=(MixExpression)')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////singleExpression的话就没有警告
		//'assign(' changeThing=MixExpression ',' changeResult=(MixExpression)')'
		public Group getGroup() { return cGroup; }
		
		////singleExpression的话就没有警告
		//'assign('
		public Keyword getAssignKeyword_0() { return cAssignKeyword_0; }
		
		//changeThing=MixExpression
		public Assignment getChangeThingAssignment_1() { return cChangeThingAssignment_1; }
		
		//MixExpression
		public RuleCall getChangeThingMixExpressionParserRuleCall_1_0() { return cChangeThingMixExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//changeResult=(MixExpression)
		public Assignment getChangeResultAssignment_3() { return cChangeResultAssignment_3; }
		
		//(MixExpression)
		public RuleCall getChangeResultMixExpressionParserRuleCall_3_0() { return cChangeResultMixExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ChangeContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.changeContract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cContractStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChangeResultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChangeResultContractStateParserRuleCall_3_0 = (RuleCall)cChangeResultAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//changeContract:
		//    'assign(' 'ContractState' ',' changeResult=ContractState ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'assign(' 'ContractState' ',' changeResult=ContractState ')'
		public Group getGroup() { return cGroup; }
		
		//'assign('
		public Keyword getAssignKeyword_0() { return cAssignKeyword_0; }
		
		//'ContractState'
		public Keyword getContractStateKeyword_1() { return cContractStateKeyword_1; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//changeResult=ContractState
		public Assignment getChangeResultAssignment_3() { return cChangeResultAssignment_3; }
		
		//ContractState
		public RuleCall getChangeResultContractStateParserRuleCall_3_0() { return cChangeResultContractStateParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ContractStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ContractState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPauseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRestartKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTerminateKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFinishKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//ContractState:
		//    'start'|'pause'|'restart'|'terminate'|'finish'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'start'|'pause'|'restart'|'terminate'|'finish'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'start'
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//'pause'
		public Keyword getPauseKeyword_1() { return cPauseKeyword_1; }
		
		//'restart'
		public Keyword getRestartKeyword_2() { return cRestartKeyword_2; }
		
		//'terminate'
		public Keyword getTerminateKeyword_3() { return cTerminateKeyword_3; }
		
		//'finish'
		public Keyword getFinishKeyword_4() { return cFinishKeyword_4; }
	}
	public class ChangeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.changeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChangeThingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cChangeThingRuleExpressionCrossReference_1_0 = (CrossReference)cChangeThingAssignment_1.eContents().get(0);
		private final RuleCall cChangeThingRuleExpressionIDTerminalRuleCall_1_0_1 = (RuleCall)cChangeThingRuleExpressionCrossReference_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChangeResultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChangeResultBOOLEANParserRuleCall_3_0 = (RuleCall)cChangeResultAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//changeRule:
		//    'assign(' changeThing=[RuleExpression] ',' changeResult=BOOLEAN ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'assign(' changeThing=[RuleExpression] ',' changeResult=BOOLEAN ')'
		public Group getGroup() { return cGroup; }
		
		//'assign('
		public Keyword getAssignKeyword_0() { return cAssignKeyword_0; }
		
		//changeThing=[RuleExpression]
		public Assignment getChangeThingAssignment_1() { return cChangeThingAssignment_1; }
		
		//[RuleExpression]
		public CrossReference getChangeThingRuleExpressionCrossReference_1_0() { return cChangeThingRuleExpressionCrossReference_1_0; }
		
		//ID
		public RuleCall getChangeThingRuleExpressionIDTerminalRuleCall_1_0_1() { return cChangeThingRuleExpressionIDTerminalRuleCall_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//changeResult=BOOLEAN
		public Assignment getChangeResultAssignment_3() { return cChangeResultAssignment_3; }
		
		//BOOLEAN
		public RuleCall getChangeResultBOOLEANParserRuleCall_3_0() { return cChangeResultBOOLEANParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ChangeOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.changeOther");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cChangeThingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cChangeThingSingleExpressionParserRuleCall_2_0 = (RuleCall)cChangeThingAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cChangeResultAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChangeResultBOOLEANParserRuleCall_4_0 = (RuleCall)cChangeResultAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//changeOther:
		//    'change(' 'CM' changeThing=SingleExpression ',' changeResult=BOOLEAN ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'change(' 'CM' changeThing=SingleExpression ',' changeResult=BOOLEAN ')'
		public Group getGroup() { return cGroup; }
		
		//'change('
		public Keyword getChangeKeyword_0() { return cChangeKeyword_0; }
		
		//'CM'
		public Keyword getCMKeyword_1() { return cCMKeyword_1; }
		
		//changeThing=SingleExpression
		public Assignment getChangeThingAssignment_2() { return cChangeThingAssignment_2; }
		
		//SingleExpression
		public RuleCall getChangeThingSingleExpressionParserRuleCall_2_0() { return cChangeThingSingleExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//changeResult=BOOLEAN
		public Assignment getChangeResultAssignment_4() { return cChangeResultAssignment_4; }
		
		//BOOLEAN
		public RuleCall getChangeResultBOOLEANParserRuleCall_4_0() { return cChangeResultBOOLEANParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ChangeAddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.changeAddress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChangeThingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChangeThingMixExpressionParserRuleCall_1_0 = (RuleCall)cChangeThingAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cChangeResultAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChangeResultMixExpressionParserRuleCall_4_0 = (RuleCall)cChangeResultAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//changeAddress:
		//    'assign(' changeThing=MixExpression ',' 'a' changeResult=(MixExpression)')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'assign(' changeThing=MixExpression ',' 'a' changeResult=(MixExpression)')'
		public Group getGroup() { return cGroup; }
		
		//'assign('
		public Keyword getAssignKeyword_0() { return cAssignKeyword_0; }
		
		//changeThing=MixExpression
		public Assignment getChangeThingAssignment_1() { return cChangeThingAssignment_1; }
		
		//MixExpression
		public RuleCall getChangeThingMixExpressionParserRuleCall_1_0() { return cChangeThingMixExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//'a'
		public Keyword getAKeyword_3() { return cAKeyword_3; }
		
		//changeResult=(MixExpression)
		public Assignment getChangeResultAssignment_4() { return cChangeResultAssignment_4; }
		
		//(MixExpression)
		public RuleCall getChangeResultMixExpressionParserRuleCall_4_0() { return cChangeResultMixExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN:
		//    'true'|'false'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'true'|'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final RequireElements pRequire;
	private final ConditiontypeElements pConditiontype;
	private final ActiontypeElements pActiontype;
	private final InitializeElements pInitialize;
	private final InitExpressionsElements pInitExpressions;
	private final InitExpressionoElements pInitExpressiono;
	private final GroupElements pGroup;
	private final SubjectElements pSubject;
	private final SubjectExpressionElements pSubjectExpression;
	private final ContractMessageElements pContractMessage;
	private final MessageElements pMessage;
	private final KeyvalueElements pKeyvalue;
	private final TypeElements pType;
	private final ValueElements pValue;
	private final DurationElements pDuration;
	private final NowElements pNow;
	private final ThisStringElements pThisString;
	private final AddressElements pAddress;
	private final AllNumberElements pAllNumber;
	private final ThisDecimalElements pThisDecimal;
	private final UrlElements pUrl;
	private final ThisBooleanElements pThisBoolean;
	private final ThisDateElements pThisDate;
	private final RightElements pRight;
	private final DATEElements pDATE;
	private final ObjectElements pObject;
	private final ObjectExpressionElements pObjectExpression;
	private final ConditionElements pCondition;
	private final ConditionLinkElements pConditionLink;
	private final AndOrConditionElements pAndOrCondition;
	private final OperationElements pOperation;
	private final OperateLinkElements pOperateLink;
	private final RuleStructureElements pRuleStructure;
	private final ManyRuleExpressionElements pManyRuleExpression;
	private final ParallelExpressionElements pParallelExpression;
	private final ExclusiveExpressionElements pExclusiveExpression;
	private final RegularRuleExpressionElements pRegularRuleExpression;
	private final AdditionExpressionElements pAdditionExpression;
	private final TotalConditionElements pTotalCondition;
	private final SingleLinkConditionElements pSingleLinkCondition;
	private final TotalOperationElements pTotalOperation;
	private final AndOrOperationLinkElements pAndOrOperationLink;
	private final ThenOperationElements pThenOperation;
	private final TotalExpressionElements pTotalExpression;
	private final ElseExpressionElements pElseExpression;
	private final RuleExpressionElements pRuleExpression;
	private final SetDateExpressionElements pSetDateExpression;
	private final SubExpressionElements pSubExpression;
	private final FailResultElements pFailResult;
	private final TimepointElements pTimepoint;
	private final WithinPointElements pWithinPoint;
	private final BeforePointElements pBeforePoint;
	private final SingleConditionElements pSingleCondition;
	private final TrueConditionElements pTrueCondition;
	private final CompareStringElements pCompareString;
	private final TimeSubElements pTimeSub;
	private final EachTimeElements pEachTime;
	private final IsTimeElements pIsTime;
	private final LogicElements pLogic;
	private final IsTrueElements pIsTrue;
	private final IsDoneElements pIsDone;
	private final CheckExpressionElements pCheckExpression;
	private final MixExpressionElements pMixExpression;
	private final OtherMixExpressionElements pOtherMixExpression;
	private final SingleExpressionElements pSingleExpression;
	private final PeriodExpressionElements pPeriodExpression;
	private final GetPeriodExpressionElements pGetPeriodExpression;
	private final RuleTimeExpressionElements pRuleTimeExpression;
	private final OtherExpressionElements pOtherExpression;
	private final StringExpressionElements pStringExpression;
	private final FloatExpressionElements pFloatExpression;
	private final PersonExpressionElements pPersonExpression;
	private final RegularExpressionElements pRegularExpression;
	private final ThingExpressionElements pThingExpression;
	private final SubjectExpressElements pSubjectExpress;
	private final ObjectExpressElements pObjectExpress;
	private final TrueOperationElements pTrueOperation;
	private final MessageExpressionElements pMessageExpression;
	private final EveryMessageElements pEveryMessage;
	private final TransferExpressionElements pTransferExpression;
	private final ChangeExpressionElements pChangeExpression;
	private final ChangeStringElements pChangeString;
	private final OtherchangeElements pOtherchange;
	private final ChangeContractElements pChangeContract;
	private final ContractStateElements pContractState;
	private final ChangeRuleElements pChangeRule;
	private final ChangeOtherElements pChangeOther;
	private final ChangeAddressElements pChangeAddress;
	private final BOOLEANElements pBOOLEAN;
	private final TerminalRule tMATH_SYMBOL;
	private final TerminalRule tARITHMETIC_OPERATOR;
	private final TerminalRule tURL_STRING;
	private final TerminalRule tDECIMAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SparrowGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRequire = new RequireElements();
		this.pConditiontype = new ConditiontypeElements();
		this.pActiontype = new ActiontypeElements();
		this.pInitialize = new InitializeElements();
		this.pInitExpressions = new InitExpressionsElements();
		this.pInitExpressiono = new InitExpressionoElements();
		this.pGroup = new GroupElements();
		this.pSubject = new SubjectElements();
		this.pSubjectExpression = new SubjectExpressionElements();
		this.pContractMessage = new ContractMessageElements();
		this.pMessage = new MessageElements();
		this.pKeyvalue = new KeyvalueElements();
		this.pType = new TypeElements();
		this.pValue = new ValueElements();
		this.pDuration = new DurationElements();
		this.pNow = new NowElements();
		this.pThisString = new ThisStringElements();
		this.pAddress = new AddressElements();
		this.pAllNumber = new AllNumberElements();
		this.pThisDecimal = new ThisDecimalElements();
		this.pUrl = new UrlElements();
		this.pThisBoolean = new ThisBooleanElements();
		this.pThisDate = new ThisDateElements();
		this.pRight = new RightElements();
		this.pDATE = new DATEElements();
		this.pObject = new ObjectElements();
		this.pObjectExpression = new ObjectExpressionElements();
		this.pCondition = new ConditionElements();
		this.pConditionLink = new ConditionLinkElements();
		this.pAndOrCondition = new AndOrConditionElements();
		this.pOperation = new OperationElements();
		this.pOperateLink = new OperateLinkElements();
		this.pRuleStructure = new RuleStructureElements();
		this.pManyRuleExpression = new ManyRuleExpressionElements();
		this.pParallelExpression = new ParallelExpressionElements();
		this.pExclusiveExpression = new ExclusiveExpressionElements();
		this.pRegularRuleExpression = new RegularRuleExpressionElements();
		this.pAdditionExpression = new AdditionExpressionElements();
		this.pTotalCondition = new TotalConditionElements();
		this.pSingleLinkCondition = new SingleLinkConditionElements();
		this.pTotalOperation = new TotalOperationElements();
		this.pAndOrOperationLink = new AndOrOperationLinkElements();
		this.pThenOperation = new ThenOperationElements();
		this.pTotalExpression = new TotalExpressionElements();
		this.pElseExpression = new ElseExpressionElements();
		this.pRuleExpression = new RuleExpressionElements();
		this.pSetDateExpression = new SetDateExpressionElements();
		this.pSubExpression = new SubExpressionElements();
		this.pFailResult = new FailResultElements();
		this.pTimepoint = new TimepointElements();
		this.pWithinPoint = new WithinPointElements();
		this.pBeforePoint = new BeforePointElements();
		this.pSingleCondition = new SingleConditionElements();
		this.pTrueCondition = new TrueConditionElements();
		this.pCompareString = new CompareStringElements();
		this.pTimeSub = new TimeSubElements();
		this.pEachTime = new EachTimeElements();
		this.pIsTime = new IsTimeElements();
		this.pLogic = new LogicElements();
		this.pIsTrue = new IsTrueElements();
		this.pIsDone = new IsDoneElements();
		this.pCheckExpression = new CheckExpressionElements();
		this.pMixExpression = new MixExpressionElements();
		this.pOtherMixExpression = new OtherMixExpressionElements();
		this.pSingleExpression = new SingleExpressionElements();
		this.pPeriodExpression = new PeriodExpressionElements();
		this.pGetPeriodExpression = new GetPeriodExpressionElements();
		this.pRuleTimeExpression = new RuleTimeExpressionElements();
		this.pOtherExpression = new OtherExpressionElements();
		this.pStringExpression = new StringExpressionElements();
		this.pFloatExpression = new FloatExpressionElements();
		this.pPersonExpression = new PersonExpressionElements();
		this.pRegularExpression = new RegularExpressionElements();
		this.pThingExpression = new ThingExpressionElements();
		this.pSubjectExpress = new SubjectExpressElements();
		this.pObjectExpress = new ObjectExpressElements();
		this.pTrueOperation = new TrueOperationElements();
		this.pMessageExpression = new MessageExpressionElements();
		this.pEveryMessage = new EveryMessageElements();
		this.pTransferExpression = new TransferExpressionElements();
		this.pChangeExpression = new ChangeExpressionElements();
		this.pChangeString = new ChangeStringElements();
		this.pOtherchange = new OtherchangeElements();
		this.pChangeContract = new ChangeContractElements();
		this.pContractState = new ContractStateElements();
		this.pChangeRule = new ChangeRuleElements();
		this.pChangeOther = new ChangeOtherElements();
		this.pChangeAddress = new ChangeAddressElements();
		this.pBOOLEAN = new BOOLEANElements();
		this.tMATH_SYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.MATH_SYMBOL");
		this.tARITHMETIC_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.ARITHMETIC_OPERATOR");
		this.tURL_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.URL_STRING");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sparrow.DECIMAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Sparrow".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    (
	//    ('import' packageName+=ID)*
	//    'Contract' name=ID
	//    ('extends' extendName=ID)?
	//    '{'
	//    subjects+=Subject*
	//    objects+=Object*
	//    group+=Group*
	//    (initialize=Initialize)?
	//    (contractMessage=ContractMessage)?
	//    Conditions=Condition?
	//    operations=Operation?
	//    ruleStructures=RuleStructure?
	//    (require=Require)?
	//    '}')?
	//    ;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Require:
	//    'Require' ':' value+=(conditiontype|actiontype) (',' value+=(conditiontype|actiontype))* ';'
	//;
	public RequireElements getRequireAccess() {
		return pRequire;
	}
	
	public ParserRule getRequireRule() {
		return getRequireAccess().getRule();
	}
	
	//conditiontype:
	//    "isTime"|"isTrue"|"logic"|"check"|"isCompleted"|"isDone"|"isRequest"|"compareString"|"timeSub"|"SetDate"
	//;
	public ConditiontypeElements getConditiontypeAccess() {
		return pConditiontype;
	}
	
	public ParserRule getConditiontypeRule() {
		return getConditiontypeAccess().getRule();
	}
	
	//actiontype:
	//    "transfer"|"changeState"
	//;
	public ActiontypeElements getActiontypeAccess() {
		return pActiontype;
	}
	
	public ParserRule getActiontypeRule() {
		return getActiontypeAccess().getRule();
	}
	
	//Initialize:
	//    {Initialize} 'Init' '{'
	//    (inits+=initExpressions)* ','
	//    (inito+=initExpressiono)*
	//    '}'
	//;
	public InitializeElements getInitializeAccess() {
		return pInitialize;
	}
	
	public ParserRule getInitializeRule() {
		return getInitializeAccess().getRule();
	}
	
	//initExpressions:
	//    subtype=[Subject] name=ID '=' '(' value+=Value (',' value+=Value)* ')'
	//;
	public InitExpressionsElements getInitExpressionsAccess() {
		return pInitExpressions;
	}
	
	public ParserRule getInitExpressionsRule() {
		return getInitExpressionsAccess().getRule();
	}
	
	//initExpressiono:
	//    obtype=[Object] name=ID '=' '(' value+=Value (',' value+=Value)* ')'
	//;
	public InitExpressionoElements getInitExpressionoAccess() {
		return pInitExpressiono;
	}
	
	public ParserRule getInitExpressionoRule() {
		return getInitExpressionoAccess().getRule();
	}
	
	//Group:
	//    'Group' subtype=[Subject] name=ID '{'
	//    value+=[initExpressions] (',' value+=[initExpressions])*
	//    '}'
	//;
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}
	
	//Subject:
	//    //this name is struct name
	//    type=('RA'|'AA'|'CA'|'PA') name=ID    subjectExpression=SubjectExpression?
	//;
	public SubjectElements getSubjectAccess() {
		return pSubject;
	}
	
	public ParserRule getSubjectRule() {
		return getSubjectAccess().getRule();
	}
	
	//SubjectExpression:
	//    '{'
	//    keyValue+=keyvalue (',' keyValue+=keyvalue)*
	//    '}'
	//;
	public SubjectExpressionElements getSubjectExpressionAccess() {
		return pSubjectExpression;
	}
	
	public ParserRule getSubjectExpressionRule() {
		return getSubjectExpressionAccess().getRule();
	}
	
	//ContractMessage:
	//    'ContractMessage'
	//    '{'
	//    message+=Message (',' message+=Message)*
	//    '}'
	//;
	public ContractMessageElements getContractMessageAccess() {
		return pContractMessage;
	}
	
	public ParserRule getContractMessageRule() {
		return getContractMessageAccess().getRule();
	}
	
	//Message:
	//    type=keyvalue '=' value=Value
	//;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//keyvalue:
	//    //name=ID ':' value=Value
	//    type=type name=ID
	//;
	public KeyvalueElements getKeyvalueAccess() {
		return pKeyvalue;
	}
	
	public ParserRule getKeyvalueRule() {
		return getKeyvalueAccess().getRule();
	}
	
	//type:
	//    "string"|"uint"|"address"|"int"|"bytes"|"bytes32"|"bool"|"fixed"|"ufixed"|"date"|"duration"
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Value:
	////这样的话，要表达NULL就要双引号了
	//    AllNumber|Right|ThisDate|ThisBoolean|url|ThisDecimal|Address|ThisString|Duration|Now;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Duration:
	//    value=INT symbol=("years"|"months"|"days"|"hours"|"mins")
	//;
	public DurationElements getDurationAccess() {
		return pDuration;
	}
	
	public ParserRule getDurationRule() {
		return getDurationAccess().getRule();
	}
	
	//Now:
	//    value='now'
	//;
	public NowElements getNowAccess() {
		return pNow;
	}
	
	public ParserRule getNowRule() {
		return getNowAccess().getRule();
	}
	
	//ThisString:
	//    value=STRING
	//;
	public ThisStringElements getThisStringAccess() {
		return pThisString;
	}
	
	public ParserRule getThisStringRule() {
		return getThisStringAccess().getRule();
	}
	
	//Address:
	//    'a' value=STRING
	//;
	public AddressElements getAddressAccess() {
		return pAddress;
	}
	
	public ParserRule getAddressRule() {
		return getAddressAccess().getRule();
	}
	
	//AllNumber:
	//    number=INT
	//;
	public AllNumberElements getAllNumberAccess() {
		return pAllNumber;
	}
	
	public ParserRule getAllNumberRule() {
		return getAllNumberAccess().getRule();
	}
	
	//ThisDecimal:
	//    value=DECIMAL
	//;
	public ThisDecimalElements getThisDecimalAccess() {
		return pThisDecimal;
	}
	
	public ParserRule getThisDecimalRule() {
		return getThisDecimalAccess().getRule();
	}
	
	//url:
	//    value=URL_STRING
	//;
	public UrlElements getUrlAccess() {
		return pUrl;
	}
	
	public ParserRule getUrlRule() {
		return getUrlAccess().getRule();
	}
	
	//ThisBoolean:
	//    value=BOOLEAN
	//;
	public ThisBooleanElements getThisBooleanAccess() {
		return pThisBoolean;
	}
	
	public ParserRule getThisBooleanRule() {
		return getThisBooleanAccess().getRule();
	}
	
	//ThisDate:
	//    value=DATE
	//;
	public ThisDateElements getThisDateAccess() {
		return pThisDate;
	}
	
	public ParserRule getThisDateRule() {
		return getThisDateAccess().getRule();
	}
	
	//Right:
	//    right=[initExpressions]
	//;
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//DATE:
	//    year=INT '/' month=INT '/' day=INT ',' hour=INT  ':' min=INT
	//;
	public DATEElements getDATEAccess() {
		return pDATE;
	}
	
	public ParserRule getDATERule() {
		return getDATEAccess().getRule();
	}
	
	//Object:
	//    'Token' name=ID objectExpression=ObjectExpression
	//;
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//ObjectExpression:
	//    '{'
	//    keyValue+=keyvalue (',' keyValue+=keyvalue)*
	//    '}'
	//;
	public ObjectExpressionElements getObjectExpressionAccess() {
		return pObjectExpression;
	}
	
	public ParserRule getObjectExpressionRule() {
		return getObjectExpressionAccess().getRule();
	}
	
	//Condition:
	//    'Conditions''['
	//    conditions+=ConditionLink (',' conditions+=ConditionLink)*
	//    ']'
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ConditionLink:
	//    name=ID ':' ((conditionExpression=SingleCondition)|(linkCondition=SingleLinkCondition))? (andOrLink+=AndOrCondition)*
	//;
	public ConditionLinkElements getConditionLinkAccess() {
		return pConditionLink;
	}
	
	public ParserRule getConditionLinkRule() {
		return getConditionLinkAccess().getRule();
	}
	
	//AndOrCondition:
	//    link=('and' | 'or') ((condition=SingleCondition)|(linkCondition=SingleLinkCondition))
	//;
	public AndOrConditionElements getAndOrConditionAccess() {
		return pAndOrCondition;
	}
	
	public ParserRule getAndOrConditionRule() {
		return getAndOrConditionAccess().getRule();
	}
	
	//Operation:
	//    'Operations''['
	//    operates+=OperateLink (',' operates+=OperateLink)*
	//    ']'
	//;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//OperateLink:
	//    name=ID ':' ((firstOperation=trueOperation)|(linkOperation=[OperateLink])) (andOrLink+=AndOrOperationLink)*
	//;
	public OperateLinkElements getOperateLinkAccess() {
		return pOperateLink;
	}
	
	public ParserRule getOperateLinkRule() {
		return getOperateLinkAccess().getRule();
	}
	
	//RuleStructure:
	//    'Rules''{'
	//    manyRuleExpression+=ManyRuleExpression+
	//    '}'
	//;
	public RuleStructureElements getRuleStructureAccess() {
		return pRuleStructure;
	}
	
	public ParserRule getRuleStructureRule() {
		return getRuleStructureAccess().getRule();
	}
	
	//ManyRuleExpression:
	//    ExclusiveExpression|ParallelExpression|RegularRuleExpression|AdditionExpression
	//;
	public ManyRuleExpressionElements getManyRuleExpressionAccess() {
		return pManyRuleExpression;
	}
	
	public ParserRule getManyRuleExpressionRule() {
		return getManyRuleExpressionAccess().getRule();
	}
	
	//ParallelExpression:
	//    'Exclusive''['
	//    ruleExpression+=RuleExpression (';' ruleExpression+=RuleExpression)*
	//    ']'
	//;
	public ParallelExpressionElements getParallelExpressionAccess() {
		return pParallelExpression;
	}
	
	public ParserRule getParallelExpressionRule() {
		return getParallelExpressionAccess().getRule();
	}
	
	//ExclusiveExpression:
	//    'Parallel''['
	//     ruleExpression+=RuleExpression (';' ruleExpression+=RuleExpression)*
	//    ']'
	//;
	public ExclusiveExpressionElements getExclusiveExpressionAccess() {
		return pExclusiveExpression;
	}
	
	public ParserRule getExclusiveExpressionRule() {
		return getExclusiveExpressionAccess().getRule();
	}
	
	//RegularRuleExpression:
	//    ruleExpression+=RuleExpression (';' ruleExpression+=RuleExpression)*
	//;
	public RegularRuleExpressionElements getRegularRuleExpressionAccess() {
		return pRegularRuleExpression;
	}
	
	public ParserRule getRegularRuleExpressionRule() {
		return getRegularRuleExpressionAccess().getRule();
	}
	
	//AdditionExpression:
	//    //全局允许触发条款或者限定时间内允许触发，默认是全局允许触发
	//    'Additional''['
	//     ruleExpression+=RuleExpression (';' ruleExpression+=RuleExpression)*
	//    ']'
	//;
	public AdditionExpressionElements getAdditionExpressionAccess() {
		return pAdditionExpression;
	}
	
	public ParserRule getAdditionExpressionRule() {
		return getAdditionExpressionAccess().getRule();
	}
	
	//TotalCondition:
	//    'If:'((condition=SingleCondition)|(linkCondition=SingleLinkCondition))
	//      andorcondition+=AndOrCondition* ','
	//;
	public TotalConditionElements getTotalConditionAccess() {
		return pTotalCondition;
	}
	
	public ParserRule getTotalConditionRule() {
		return getTotalConditionAccess().getRule();
	}
	
	//SingleLinkCondition:
	//    (no="!")? linkCondition=[ConditionLink]
	//;
	public SingleLinkConditionElements getSingleLinkConditionAccess() {
		return pSingleLinkCondition;
	}
	
	public ParserRule getSingleLinkConditionRule() {
		return getSingleLinkConditionAccess().getRule();
	}
	
	//TotalOperation:
	//    {TotalOperation} (person=[initExpressions])? ('G' person2=[Group])? ((firstOperation=trueOperation)|(linkOperation=[OperateLink]))?
	//    andor+=AndOrOperationLink*
	//    timePoint=Timepoint?
	//    failresult=FailResult?
	//      thenoperation+=ThenOperation*
	//;
	public TotalOperationElements getTotalOperationAccess() {
		return pTotalOperation;
	}
	
	public ParserRule getTotalOperationRule() {
		return getTotalOperationAccess().getRule();
	}
	
	//AndOrOperationLink:
	//    link='and' ((firstOperation=trueOperation)|(linkOperation=[OperateLink]))
	//;
	public AndOrOperationLinkElements getAndOrOperationLinkAccess() {
		return pAndOrOperationLink;
	}
	
	public ParserRule getAndOrOperationLinkRule() {
		return getAndOrOperationLinkAccess().getRule();
	}
	
	//ThenOperation:
	//      'Then' ((followingOperation=trueOperation)|(linkOperation=[OperateLink]))
	//      andor+=AndOrOperationLink*
	//      timePoint=Timepoint? failresult=FailResult?
	//;
	public ThenOperationElements getThenOperationAccess() {
		return pThenOperation;
	}
	
	public ParserRule getThenOperationRule() {
		return getThenOperationAccess().getRule();
	}
	
	//TotalExpression:
	//  (set=messageExpression)?
	//  (totalCondition=TotalCondition)?
	//   totalOperation=TotalOperation
	//  (elseExpression=ElseExpression)?
	//;
	public TotalExpressionElements getTotalExpressionAccess() {
		return pTotalExpression;
	}
	
	public ParserRule getTotalExpressionRule() {
		return getTotalExpressionAccess().getRule();
	}
	
	//ElseExpression:
	//    'Else'
	//    (set=messageExpression)?
	//    (totalCondition=TotalCondition)?
	//    totalOperation=TotalOperation
	//;
	public ElseExpressionElements getElseExpressionAccess() {
		return pElseExpression;
	}
	
	public ParserRule getElseExpressionRule() {
		return getElseExpressionAccess().getRule();
	}
	
	//RuleExpression:
	//    (repeat="Repeat")?
	//     name=ID ':'
	//    (set=messageExpression)?
	//    (setdate=setDateExpression)?
	//    (totalCondition=TotalCondition)?
	//     totalOperation=TotalOperation
	//    //加了这个以后多了好多警告，数都数不清，原本只有六个警告的
	//    (subExpression+=SubExpression)*
	//    (elseExpression=ElseExpression)?
	//;
	public RuleExpressionElements getRuleExpressionAccess() {
		return pRuleExpression;
	}
	
	public ParserRule getRuleExpressionRule() {
		return getRuleExpressionAccess().getRule();
	}
	
	//setDateExpression:
	//    'SetDate('message=ID')'
	//;
	public SetDateExpressionElements getSetDateExpressionAccess() {
		return pSetDateExpression;
	}
	
	public ParserRule getSetDateExpressionRule() {
		return getSetDateExpressionAccess().getRule();
	}
	
	//SubExpression:
	//    'SubRule''{' totalExpression=TotalExpression'}'
	//;
	public SubExpressionElements getSubExpressionAccess() {
		return pSubExpression;
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}
	
	////感觉可以把这个废弃，就和平行网关一样，其实就是完成一个rule但是没完成另一个rule
	//FailResult:
	//    'FailResult:'
	//    ((followingOperation=trueOperation)|(linkOperation=[OperateLink]))
	//    andor+=AndOrOperationLink*
	//    timePoint=Timepoint?
	//     thenoperation+=ThenOperation*
	//;
	public FailResultElements getFailResultAccess() {
		return pFailResult;
	}
	
	public ParserRule getFailResultRule() {
		return getFailResultAccess().getRule();
	}
	
	//Timepoint:
	//    WithinPoint|BeforePoint
	//;
	public TimepointElements getTimepointAccess() {
		return pTimepoint;
	}
	
	public ParserRule getTimepointRule() {
		return getTimepointAccess().getRule();
	}
	
	//WithinPoint:
	//    'within' number=INT time=EachTime 'after' thing=[RuleExpression]
	//;
	public WithinPointElements getWithinPointAccess() {
		return pWithinPoint;
	}
	
	public ParserRule getWithinPointRule() {
		return getWithinPointAccess().getRule();
	}
	
	//BeforePoint:
	//    'before' ((lineTime=ThisDate)|(value=[keyvalue]))
	//;
	public BeforePointElements getBeforePointAccess() {
		return pBeforePoint;
	}
	
	public ParserRule getBeforePointRule() {
		return getBeforePointAccess().getRule();
	}
	
	//SingleCondition:
	//    (no="!")? condition=TrueCondition
	//;
	public SingleConditionElements getSingleConditionAccess() {
		return pSingleCondition;
	}
	
	public ParserRule getSingleConditionRule() {
		return getSingleConditionAccess().getRule();
	}
	
	//TrueCondition:
	//    isTime|logic|isTrue|isDone|checkExpression|Timepoint|CompareString|TimeSub;
	public TrueConditionElements getTrueConditionAccess() {
		return pTrueCondition;
	}
	
	public ParserRule getTrueConditionRule() {
		return getTrueConditionAccess().getRule();
	}
	
	//CompareString:
	//    'compareString('valueA=MixExpression ',' valueB=MixExpression')'
	//;
	public CompareStringElements getCompareStringAccess() {
		return pCompareString;
	}
	
	public ParserRule getCompareStringRule() {
		return getCompareStringAccess().getRule();
	}
	
	//TimeSub:
	//    'timeSub('valueA=MixExpression ',' valueB=MixExpression? ('r' valueC=[RuleExpression])? ',' duration=Duration ',' compare=MATH_SYMBOL')'
	//;
	public TimeSubElements getTimeSubAccess() {
		return pTimeSub;
	}
	
	public ParserRule getTimeSubRule() {
		return getTimeSubAccess().getRule();
	}
	
	//EachTime:
	////    一个月按30天算
	//    'years'|'months'|'days'|'hours'|'mins'
	//;
	public EachTimeElements getEachTimeAccess() {
		return pEachTime;
	}
	
	public ParserRule getEachTimeRule() {
		return getEachTimeAccess().getRule();
	}
	
	//isTime:
	//  {isTime} 'isTime('expression=MixExpression? ('r' value=[RuleExpression])? (symbol=ARITHMETIC_OPERATOR duration=Duration)?')';
	public IsTimeElements getIsTimeAccess() {
		return pIsTime;
	}
	
	public ParserRule getIsTimeRule() {
		return getIsTimeAccess().getRule();
	}
	
	//logic:
	//  'logic(' valueA=MixExpression ',' valueB=MixExpression ',' mathSymbol=MATH_SYMBOL')'
	//;
	public LogicElements getLogicAccess() {
		return pLogic;
	}
	
	public ParserRule getLogicRule() {
		return getLogicAccess().getRule();
	}
	
	//isTrue:
	//  'isTrue('compare=SingleExpression')'
	//;
	public IsTrueElements getIsTrueAccess() {
		return pIsTrue;
	}
	
	public ParserRule getIsTrueRule() {
		return getIsTrueAccess().getRule();
	}
	
	//isDone:
	//  'isDone('name=[RuleExpression]')'
	//;
	public IsDoneElements getIsDoneAccess() {
		return pIsDone;
	}
	
	public ParserRule getIsDoneRule() {
		return getIsDoneAccess().getRule();
	}
	
	//checkExpression:
	//  'check('name=[Model]')'
	//;
	public CheckExpressionElements getCheckExpressionAccess() {
		return pCheckExpression;
	}
	
	public ParserRule getCheckExpressionRule() {
		return getCheckExpressionAccess().getRule();
	}
	
	//MixExpression:
	//    expression=SingleExpression (otherMixExpression+=OtherMixExpression)*
	//;
	public MixExpressionElements getMixExpressionAccess() {
		return pMixExpression;
	}
	
	public ParserRule getMixExpressionRule() {
		return getMixExpressionAccess().getRule();
	}
	
	//OtherMixExpression:
	//    link=ARITHMETIC_OPERATOR expression=SingleExpression
	//;
	public OtherMixExpressionElements getOtherMixExpressionAccess() {
		return pOtherMixExpression;
	}
	
	public ParserRule getOtherMixExpressionRule() {
		return getOtherMixExpressionAccess().getRule();
	}
	
	//SingleExpression:
	//    RegularExpression | ThingExpression| OtherExpression |PersonExpression
	//    | RuleTimeExpression | FloatExpression | StringExpression
	//    | PeriodExpression | GetPeriodExpression;
	public SingleExpressionElements getSingleExpressionAccess() {
		return pSingleExpression;
	}
	
	public ParserRule getSingleExpressionRule() {
		return getSingleExpressionAccess().getRule();
	}
	
	//PeriodExpression:
	//    value=INT type=EachTime
	//;
	public PeriodExpressionElements getPeriodExpressionAccess() {
		return pPeriodExpression;
	}
	
	public ParserRule getPeriodExpressionRule() {
		return getPeriodExpressionAccess().getRule();
	}
	
	//GetPeriodExpression:
	//    value=ID type=EachTime
	//;
	public GetPeriodExpressionElements getGetPeriodExpressionAccess() {
		return pGetPeriodExpression;
	}
	
	public ParserRule getGetPeriodExpressionRule() {
		return getGetPeriodExpressionAccess().getRule();
	}
	
	//RuleTimeExpression:
	//    'getRuleTime(' value=[RuleExpression] ')'
	//;
	public RuleTimeExpressionElements getRuleTimeExpressionAccess() {
		return pRuleTimeExpression;
	}
	
	public ParserRule getRuleTimeExpressionRule() {
		return getRuleTimeExpressionAccess().getRule();
	}
	
	//OtherExpression:
	//    value=ID
	//;
	public OtherExpressionElements getOtherExpressionAccess() {
		return pOtherExpression;
	}
	
	public ParserRule getOtherExpressionRule() {
		return getOtherExpressionAccess().getRule();
	}
	
	//StringExpression:
	//    '"' value=ID '"'
	//;
	public StringExpressionElements getStringExpressionAccess() {
		return pStringExpression;
	}
	
	public ParserRule getStringExpressionRule() {
		return getStringExpressionAccess().getRule();
	}
	
	//FloatExpression:
	//    'f' value=ID
	//;
	public FloatExpressionElements getFloatExpressionAccess() {
		return pFloatExpression;
	}
	
	public ParserRule getFloatExpressionRule() {
		return getFloatExpressionAccess().getRule();
	}
	
	//PersonExpression:
	//    'p' value=[initExpressions]
	//;
	public PersonExpressionElements getPersonExpressionAccess() {
		return pPersonExpression;
	}
	
	public ParserRule getPersonExpressionRule() {
		return getPersonExpressionAccess().getRule();
	}
	
	//RegularExpression:
	//   AllNumber|ThisDecimal|ThisBoolean|Now|ThisDate;
	public RegularExpressionElements getRegularExpressionAccess() {
		return pRegularExpression;
	}
	
	public ParserRule getRegularExpressionRule() {
		return getRegularExpressionAccess().getRule();
	}
	
	//ThingExpression:
	//    ObjectExpress|SubjectExpress
	//;
	public ThingExpressionElements getThingExpressionAccess() {
		return pThingExpression;
	}
	
	public ParserRule getThingExpressionRule() {
		return getThingExpressionAccess().getRule();
	}
	
	//SubjectExpress:
	//    's' subject=[initExpressions] '.' attribute=ID
	//;
	public SubjectExpressElements getSubjectExpressAccess() {
		return pSubjectExpress;
	}
	
	public ParserRule getSubjectExpressRule() {
		return getSubjectExpressAccess().getRule();
	}
	
	//ObjectExpress:
	//    'o' object=[initExpressiono] '.' attribute=ID
	//;
	public ObjectExpressElements getObjectExpressAccess() {
		return pObjectExpress;
	}
	
	public ParserRule getObjectExpressRule() {
		return getObjectExpressAccess().getRule();
	}
	
	//trueOperation:
	//    transferExpression|changeExpression
	//;
	public TrueOperationElements getTrueOperationAccess() {
		return pTrueOperation;
	}
	
	public ParserRule getTrueOperationRule() {
		return getTrueOperationAccess().getRule();
	}
	
	//messageExpression:
	//    'SetMessage('everymassage+=everyMessage (',' everymassage+=everyMessage)*')'
	//;
	public MessageExpressionElements getMessageExpressionAccess() {
		return pMessageExpression;
	}
	
	public ParserRule getMessageExpressionRule() {
		return getMessageExpressionAccess().getRule();
	}
	
	//everyMessage:
	//    (symbol="new")? type=type message=ID
	//;
	public EveryMessageElements getEveryMessageAccess() {
		return pEveryMessage;
	}
	
	public ParserRule getEveryMessageRule() {
		return getEveryMessageAccess().getRule();
	}
	
	////这里也会有警告，在加了|value=[keyvalue]以后
	//transferExpression:
	//    'transfer('(person=[initExpressions]) ',' value=MixExpression ')'
	//;
	public TransferExpressionElements getTransferExpressionAccess() {
		return pTransferExpression;
	}
	
	public ParserRule getTransferExpressionRule() {
		return getTransferExpressionAccess().getRule();
	}
	
	//changeExpression:
	//    changeContract|changeRule|otherchange|changeString|changeOther|changeAddress;
	public ChangeExpressionElements getChangeExpressionAccess() {
		return pChangeExpression;
	}
	
	public ParserRule getChangeExpressionRule() {
		return getChangeExpressionAccess().getRule();
	}
	
	//changeString:
	//    'assignString(' changeThing=MixExpression ',' changeResult=MixExpression')'
	//;
	public ChangeStringElements getChangeStringAccess() {
		return pChangeString;
	}
	
	public ParserRule getChangeStringRule() {
		return getChangeStringAccess().getRule();
	}
	
	//otherchange:
	//    //singleExpression的话就没有警告
	//    'assign(' changeThing=MixExpression ',' changeResult=(MixExpression)')'
	//;
	public OtherchangeElements getOtherchangeAccess() {
		return pOtherchange;
	}
	
	public ParserRule getOtherchangeRule() {
		return getOtherchangeAccess().getRule();
	}
	
	//changeContract:
	//    'assign(' 'ContractState' ',' changeResult=ContractState ')'
	//;
	public ChangeContractElements getChangeContractAccess() {
		return pChangeContract;
	}
	
	public ParserRule getChangeContractRule() {
		return getChangeContractAccess().getRule();
	}
	
	//ContractState:
	//    'start'|'pause'|'restart'|'terminate'|'finish'
	//;
	public ContractStateElements getContractStateAccess() {
		return pContractState;
	}
	
	public ParserRule getContractStateRule() {
		return getContractStateAccess().getRule();
	}
	
	//changeRule:
	//    'assign(' changeThing=[RuleExpression] ',' changeResult=BOOLEAN ')'
	//;
	public ChangeRuleElements getChangeRuleAccess() {
		return pChangeRule;
	}
	
	public ParserRule getChangeRuleRule() {
		return getChangeRuleAccess().getRule();
	}
	
	//changeOther:
	//    'change(' 'CM' changeThing=SingleExpression ',' changeResult=BOOLEAN ')'
	//;
	public ChangeOtherElements getChangeOtherAccess() {
		return pChangeOther;
	}
	
	public ParserRule getChangeOtherRule() {
		return getChangeOtherAccess().getRule();
	}
	
	//changeAddress:
	//    'assign(' changeThing=MixExpression ',' 'a' changeResult=(MixExpression)')'
	//;
	public ChangeAddressElements getChangeAddressAccess() {
		return pChangeAddress;
	}
	
	public ParserRule getChangeAddressRule() {
		return getChangeAddressAccess().getRule();
	}
	
	//BOOLEAN:
	//    'true'|'false'
	//;
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}
	
	//// Define MathSymbol rule
	//terminal MATH_SYMBOL: ('>' | '<' | '>=' | '<=' |'=='|'!=');
	public TerminalRule getMATH_SYMBOLRule() {
		return tMATH_SYMBOL;
	}
	
	//terminal ARITHMETIC_OPERATOR: '+' | '-' | '*' | '/';
	public TerminalRule getARITHMETIC_OPERATORRule() {
		return tARITHMETIC_OPERATOR;
	}
	
	//terminal URL_STRING: 'https://' ('a'..'z' | 'A'..'Z' | '0'..'9' | '.' | '-' | '/')+;
	public TerminalRule getURL_STRINGRule() {
		return tURL_STRING;
	}
	
	//terminal DECIMAL: (INT '.' INT) | ('.' INT);
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
