/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.sparrow.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.example.mydsl.sparrow.AdditionExpression;
import org.xtext.example.mydsl.sparrow.Address;
import org.xtext.example.mydsl.sparrow.AllNumber;
import org.xtext.example.mydsl.sparrow.AndOrCondition;
import org.xtext.example.mydsl.sparrow.AndOrOperationLink;
import org.xtext.example.mydsl.sparrow.BeforePoint;
import org.xtext.example.mydsl.sparrow.CompareString;
import org.xtext.example.mydsl.sparrow.Condition;
import org.xtext.example.mydsl.sparrow.ConditionLink;
import org.xtext.example.mydsl.sparrow.ContractMessage;
import org.xtext.example.mydsl.sparrow.DATE;
import org.xtext.example.mydsl.sparrow.Duration;
import org.xtext.example.mydsl.sparrow.ElseExpression;
import org.xtext.example.mydsl.sparrow.ExclusiveExpression;
import org.xtext.example.mydsl.sparrow.FailResult;
import org.xtext.example.mydsl.sparrow.FloatExpression;
import org.xtext.example.mydsl.sparrow.GetPeriodExpression;
import org.xtext.example.mydsl.sparrow.Group;
import org.xtext.example.mydsl.sparrow.Initialize;
import org.xtext.example.mydsl.sparrow.ManyRuleExpression;
import org.xtext.example.mydsl.sparrow.Message;
import org.xtext.example.mydsl.sparrow.MixExpression;
import org.xtext.example.mydsl.sparrow.Model;
import org.xtext.example.mydsl.sparrow.Now;
import org.xtext.example.mydsl.sparrow.ObjectExpress;
import org.xtext.example.mydsl.sparrow.ObjectExpression;
import org.xtext.example.mydsl.sparrow.OperateLink;
import org.xtext.example.mydsl.sparrow.Operation;
import org.xtext.example.mydsl.sparrow.OtherExpression;
import org.xtext.example.mydsl.sparrow.OtherMixExpression;
import org.xtext.example.mydsl.sparrow.ParallelExpression;
import org.xtext.example.mydsl.sparrow.PeriodExpression;
import org.xtext.example.mydsl.sparrow.PersonExpression;
import org.xtext.example.mydsl.sparrow.RegularExpression;
import org.xtext.example.mydsl.sparrow.RegularRuleExpression;
import org.xtext.example.mydsl.sparrow.Require;
import org.xtext.example.mydsl.sparrow.Right;
import org.xtext.example.mydsl.sparrow.RuleExpression;
import org.xtext.example.mydsl.sparrow.RuleStructure;
import org.xtext.example.mydsl.sparrow.RuleTimeExpression;
import org.xtext.example.mydsl.sparrow.SingleCondition;
import org.xtext.example.mydsl.sparrow.SingleExpression;
import org.xtext.example.mydsl.sparrow.SingleLinkCondition;
import org.xtext.example.mydsl.sparrow.SparrowPackage;
import org.xtext.example.mydsl.sparrow.StringExpression;
import org.xtext.example.mydsl.sparrow.SubExpression;
import org.xtext.example.mydsl.sparrow.Subject;
import org.xtext.example.mydsl.sparrow.SubjectExpress;
import org.xtext.example.mydsl.sparrow.SubjectExpression;
import org.xtext.example.mydsl.sparrow.ThenOperation;
import org.xtext.example.mydsl.sparrow.ThingExpression;
import org.xtext.example.mydsl.sparrow.ThisBoolean;
import org.xtext.example.mydsl.sparrow.ThisDate;
import org.xtext.example.mydsl.sparrow.ThisDecimal;
import org.xtext.example.mydsl.sparrow.ThisString;
import org.xtext.example.mydsl.sparrow.TimeSub;
import org.xtext.example.mydsl.sparrow.Timepoint;
import org.xtext.example.mydsl.sparrow.TotalCondition;
import org.xtext.example.mydsl.sparrow.TotalExpression;
import org.xtext.example.mydsl.sparrow.TotalOperation;
import org.xtext.example.mydsl.sparrow.TrueCondition;
import org.xtext.example.mydsl.sparrow.Value;
import org.xtext.example.mydsl.sparrow.WithinPoint;
import org.xtext.example.mydsl.sparrow.changeAddress;
import org.xtext.example.mydsl.sparrow.changeContract;
import org.xtext.example.mydsl.sparrow.changeExpression;
import org.xtext.example.mydsl.sparrow.changeOther;
import org.xtext.example.mydsl.sparrow.changeRule;
import org.xtext.example.mydsl.sparrow.changeString;
import org.xtext.example.mydsl.sparrow.checkExpression;
import org.xtext.example.mydsl.sparrow.everyMessage;
import org.xtext.example.mydsl.sparrow.initExpressiono;
import org.xtext.example.mydsl.sparrow.initExpressions;
import org.xtext.example.mydsl.sparrow.isDone;
import org.xtext.example.mydsl.sparrow.isTime;
import org.xtext.example.mydsl.sparrow.isTrue;
import org.xtext.example.mydsl.sparrow.keyvalue;
import org.xtext.example.mydsl.sparrow.logic;
import org.xtext.example.mydsl.sparrow.messageExpression;
import org.xtext.example.mydsl.sparrow.otherchange;
import org.xtext.example.mydsl.sparrow.setDateExpression;
import org.xtext.example.mydsl.sparrow.transferExpression;
import org.xtext.example.mydsl.sparrow.trueOperation;
import org.xtext.example.mydsl.sparrow.url;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.sparrow.SparrowPackage
 * @generated
 */
public class SparrowAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SparrowPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SparrowAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SparrowPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SparrowSwitch<Adapter> modelSwitch =
    new SparrowSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseRequire(Require object)
      {
        return createRequireAdapter();
      }
      @Override
      public Adapter caseInitialize(Initialize object)
      {
        return createInitializeAdapter();
      }
      @Override
      public Adapter caseinitExpressions(initExpressions object)
      {
        return createinitExpressionsAdapter();
      }
      @Override
      public Adapter caseinitExpressiono(initExpressiono object)
      {
        return createinitExpressionoAdapter();
      }
      @Override
      public Adapter caseGroup(Group object)
      {
        return createGroupAdapter();
      }
      @Override
      public Adapter caseSubject(Subject object)
      {
        return createSubjectAdapter();
      }
      @Override
      public Adapter caseSubjectExpression(SubjectExpression object)
      {
        return createSubjectExpressionAdapter();
      }
      @Override
      public Adapter caseContractMessage(ContractMessage object)
      {
        return createContractMessageAdapter();
      }
      @Override
      public Adapter caseMessage(Message object)
      {
        return createMessageAdapter();
      }
      @Override
      public Adapter casekeyvalue(keyvalue object)
      {
        return createkeyvalueAdapter();
      }
      @Override
      public Adapter caseValue(Value object)
      {
        return createValueAdapter();
      }
      @Override
      public Adapter caseDuration(Duration object)
      {
        return createDurationAdapter();
      }
      @Override
      public Adapter caseNow(Now object)
      {
        return createNowAdapter();
      }
      @Override
      public Adapter caseThisString(ThisString object)
      {
        return createThisStringAdapter();
      }
      @Override
      public Adapter caseAddress(Address object)
      {
        return createAddressAdapter();
      }
      @Override
      public Adapter caseAllNumber(AllNumber object)
      {
        return createAllNumberAdapter();
      }
      @Override
      public Adapter caseThisDecimal(ThisDecimal object)
      {
        return createThisDecimalAdapter();
      }
      @Override
      public Adapter caseurl(url object)
      {
        return createurlAdapter();
      }
      @Override
      public Adapter caseThisBoolean(ThisBoolean object)
      {
        return createThisBooleanAdapter();
      }
      @Override
      public Adapter caseThisDate(ThisDate object)
      {
        return createThisDateAdapter();
      }
      @Override
      public Adapter caseRight(Right object)
      {
        return createRightAdapter();
      }
      @Override
      public Adapter caseDATE(DATE object)
      {
        return createDATEAdapter();
      }
      @Override
      public Adapter caseObject(org.xtext.example.mydsl.sparrow.Object object)
      {
        return createObjectAdapter();
      }
      @Override
      public Adapter caseObjectExpression(ObjectExpression object)
      {
        return createObjectExpressionAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseConditionLink(ConditionLink object)
      {
        return createConditionLinkAdapter();
      }
      @Override
      public Adapter caseAndOrCondition(AndOrCondition object)
      {
        return createAndOrConditionAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseOperateLink(OperateLink object)
      {
        return createOperateLinkAdapter();
      }
      @Override
      public Adapter caseRuleStructure(RuleStructure object)
      {
        return createRuleStructureAdapter();
      }
      @Override
      public Adapter caseManyRuleExpression(ManyRuleExpression object)
      {
        return createManyRuleExpressionAdapter();
      }
      @Override
      public Adapter caseParallelExpression(ParallelExpression object)
      {
        return createParallelExpressionAdapter();
      }
      @Override
      public Adapter caseExclusiveExpression(ExclusiveExpression object)
      {
        return createExclusiveExpressionAdapter();
      }
      @Override
      public Adapter caseRegularRuleExpression(RegularRuleExpression object)
      {
        return createRegularRuleExpressionAdapter();
      }
      @Override
      public Adapter caseAdditionExpression(AdditionExpression object)
      {
        return createAdditionExpressionAdapter();
      }
      @Override
      public Adapter caseTotalCondition(TotalCondition object)
      {
        return createTotalConditionAdapter();
      }
      @Override
      public Adapter caseSingleLinkCondition(SingleLinkCondition object)
      {
        return createSingleLinkConditionAdapter();
      }
      @Override
      public Adapter caseTotalOperation(TotalOperation object)
      {
        return createTotalOperationAdapter();
      }
      @Override
      public Adapter caseAndOrOperationLink(AndOrOperationLink object)
      {
        return createAndOrOperationLinkAdapter();
      }
      @Override
      public Adapter caseThenOperation(ThenOperation object)
      {
        return createThenOperationAdapter();
      }
      @Override
      public Adapter caseTotalExpression(TotalExpression object)
      {
        return createTotalExpressionAdapter();
      }
      @Override
      public Adapter caseElseExpression(ElseExpression object)
      {
        return createElseExpressionAdapter();
      }
      @Override
      public Adapter caseRuleExpression(RuleExpression object)
      {
        return createRuleExpressionAdapter();
      }
      @Override
      public Adapter casesetDateExpression(setDateExpression object)
      {
        return createsetDateExpressionAdapter();
      }
      @Override
      public Adapter caseSubExpression(SubExpression object)
      {
        return createSubExpressionAdapter();
      }
      @Override
      public Adapter caseFailResult(FailResult object)
      {
        return createFailResultAdapter();
      }
      @Override
      public Adapter caseTimepoint(Timepoint object)
      {
        return createTimepointAdapter();
      }
      @Override
      public Adapter caseWithinPoint(WithinPoint object)
      {
        return createWithinPointAdapter();
      }
      @Override
      public Adapter caseBeforePoint(BeforePoint object)
      {
        return createBeforePointAdapter();
      }
      @Override
      public Adapter caseSingleCondition(SingleCondition object)
      {
        return createSingleConditionAdapter();
      }
      @Override
      public Adapter caseTrueCondition(TrueCondition object)
      {
        return createTrueConditionAdapter();
      }
      @Override
      public Adapter caseCompareString(CompareString object)
      {
        return createCompareStringAdapter();
      }
      @Override
      public Adapter caseTimeSub(TimeSub object)
      {
        return createTimeSubAdapter();
      }
      @Override
      public Adapter caseisTime(isTime object)
      {
        return createisTimeAdapter();
      }
      @Override
      public Adapter caselogic(logic object)
      {
        return createlogicAdapter();
      }
      @Override
      public Adapter caseisTrue(isTrue object)
      {
        return createisTrueAdapter();
      }
      @Override
      public Adapter caseisDone(isDone object)
      {
        return createisDoneAdapter();
      }
      @Override
      public Adapter casecheckExpression(checkExpression object)
      {
        return createcheckExpressionAdapter();
      }
      @Override
      public Adapter caseMixExpression(MixExpression object)
      {
        return createMixExpressionAdapter();
      }
      @Override
      public Adapter caseOtherMixExpression(OtherMixExpression object)
      {
        return createOtherMixExpressionAdapter();
      }
      @Override
      public Adapter caseSingleExpression(SingleExpression object)
      {
        return createSingleExpressionAdapter();
      }
      @Override
      public Adapter casePeriodExpression(PeriodExpression object)
      {
        return createPeriodExpressionAdapter();
      }
      @Override
      public Adapter caseGetPeriodExpression(GetPeriodExpression object)
      {
        return createGetPeriodExpressionAdapter();
      }
      @Override
      public Adapter caseRuleTimeExpression(RuleTimeExpression object)
      {
        return createRuleTimeExpressionAdapter();
      }
      @Override
      public Adapter caseOtherExpression(OtherExpression object)
      {
        return createOtherExpressionAdapter();
      }
      @Override
      public Adapter caseStringExpression(StringExpression object)
      {
        return createStringExpressionAdapter();
      }
      @Override
      public Adapter caseFloatExpression(FloatExpression object)
      {
        return createFloatExpressionAdapter();
      }
      @Override
      public Adapter casePersonExpression(PersonExpression object)
      {
        return createPersonExpressionAdapter();
      }
      @Override
      public Adapter caseRegularExpression(RegularExpression object)
      {
        return createRegularExpressionAdapter();
      }
      @Override
      public Adapter caseThingExpression(ThingExpression object)
      {
        return createThingExpressionAdapter();
      }
      @Override
      public Adapter caseSubjectExpress(SubjectExpress object)
      {
        return createSubjectExpressAdapter();
      }
      @Override
      public Adapter caseObjectExpress(ObjectExpress object)
      {
        return createObjectExpressAdapter();
      }
      @Override
      public Adapter casetrueOperation(trueOperation object)
      {
        return createtrueOperationAdapter();
      }
      @Override
      public Adapter casemessageExpression(messageExpression object)
      {
        return createmessageExpressionAdapter();
      }
      @Override
      public Adapter caseeveryMessage(everyMessage object)
      {
        return createeveryMessageAdapter();
      }
      @Override
      public Adapter casetransferExpression(transferExpression object)
      {
        return createtransferExpressionAdapter();
      }
      @Override
      public Adapter casechangeExpression(changeExpression object)
      {
        return createchangeExpressionAdapter();
      }
      @Override
      public Adapter casechangeString(changeString object)
      {
        return createchangeStringAdapter();
      }
      @Override
      public Adapter caseotherchange(otherchange object)
      {
        return createotherchangeAdapter();
      }
      @Override
      public Adapter casechangeContract(changeContract object)
      {
        return createchangeContractAdapter();
      }
      @Override
      public Adapter casechangeRule(changeRule object)
      {
        return createchangeRuleAdapter();
      }
      @Override
      public Adapter casechangeOther(changeOther object)
      {
        return createchangeOtherAdapter();
      }
      @Override
      public Adapter casechangeAddress(changeAddress object)
      {
        return createchangeAddressAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Require <em>Require</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Require
   * @generated
   */
  public Adapter createRequireAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Initialize <em>Initialize</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Initialize
   * @generated
   */
  public Adapter createInitializeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.initExpressions <em>init Expressions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.initExpressions
   * @generated
   */
  public Adapter createinitExpressionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.initExpressiono <em>init Expressiono</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.initExpressiono
   * @generated
   */
  public Adapter createinitExpressionoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Group <em>Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Group
   * @generated
   */
  public Adapter createGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Subject <em>Subject</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Subject
   * @generated
   */
  public Adapter createSubjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.SubjectExpression <em>Subject Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.SubjectExpression
   * @generated
   */
  public Adapter createSubjectExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ContractMessage <em>Contract Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ContractMessage
   * @generated
   */
  public Adapter createContractMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Message <em>Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Message
   * @generated
   */
  public Adapter createMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.keyvalue <em>keyvalue</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.keyvalue
   * @generated
   */
  public Adapter createkeyvalueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Value <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Value
   * @generated
   */
  public Adapter createValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Duration <em>Duration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Duration
   * @generated
   */
  public Adapter createDurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Now <em>Now</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Now
   * @generated
   */
  public Adapter createNowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ThisString <em>This String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ThisString
   * @generated
   */
  public Adapter createThisStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Address <em>Address</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Address
   * @generated
   */
  public Adapter createAddressAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.AllNumber <em>All Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.AllNumber
   * @generated
   */
  public Adapter createAllNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ThisDecimal <em>This Decimal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ThisDecimal
   * @generated
   */
  public Adapter createThisDecimalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.url <em>url</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.url
   * @generated
   */
  public Adapter createurlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ThisBoolean <em>This Boolean</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ThisBoolean
   * @generated
   */
  public Adapter createThisBooleanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ThisDate <em>This Date</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ThisDate
   * @generated
   */
  public Adapter createThisDateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Right <em>Right</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Right
   * @generated
   */
  public Adapter createRightAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.DATE <em>DATE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.DATE
   * @generated
   */
  public Adapter createDATEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Object <em>Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Object
   * @generated
   */
  public Adapter createObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ObjectExpression <em>Object Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ObjectExpression
   * @generated
   */
  public Adapter createObjectExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ConditionLink <em>Condition Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ConditionLink
   * @generated
   */
  public Adapter createConditionLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.AndOrCondition <em>And Or Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.AndOrCondition
   * @generated
   */
  public Adapter createAndOrConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.OperateLink <em>Operate Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.OperateLink
   * @generated
   */
  public Adapter createOperateLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.RuleStructure <em>Rule Structure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.RuleStructure
   * @generated
   */
  public Adapter createRuleStructureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ManyRuleExpression <em>Many Rule Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ManyRuleExpression
   * @generated
   */
  public Adapter createManyRuleExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ParallelExpression <em>Parallel Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ParallelExpression
   * @generated
   */
  public Adapter createParallelExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ExclusiveExpression <em>Exclusive Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ExclusiveExpression
   * @generated
   */
  public Adapter createExclusiveExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.RegularRuleExpression <em>Regular Rule Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.RegularRuleExpression
   * @generated
   */
  public Adapter createRegularRuleExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.AdditionExpression <em>Addition Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.AdditionExpression
   * @generated
   */
  public Adapter createAdditionExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.TotalCondition <em>Total Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.TotalCondition
   * @generated
   */
  public Adapter createTotalConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.SingleLinkCondition <em>Single Link Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.SingleLinkCondition
   * @generated
   */
  public Adapter createSingleLinkConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.TotalOperation <em>Total Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.TotalOperation
   * @generated
   */
  public Adapter createTotalOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.AndOrOperationLink <em>And Or Operation Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.AndOrOperationLink
   * @generated
   */
  public Adapter createAndOrOperationLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ThenOperation <em>Then Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ThenOperation
   * @generated
   */
  public Adapter createThenOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.TotalExpression <em>Total Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.TotalExpression
   * @generated
   */
  public Adapter createTotalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ElseExpression <em>Else Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ElseExpression
   * @generated
   */
  public Adapter createElseExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.RuleExpression <em>Rule Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.RuleExpression
   * @generated
   */
  public Adapter createRuleExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.setDateExpression <em>set Date Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.setDateExpression
   * @generated
   */
  public Adapter createsetDateExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.SubExpression <em>Sub Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.SubExpression
   * @generated
   */
  public Adapter createSubExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.FailResult <em>Fail Result</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.FailResult
   * @generated
   */
  public Adapter createFailResultAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.Timepoint <em>Timepoint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.Timepoint
   * @generated
   */
  public Adapter createTimepointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.WithinPoint <em>Within Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.WithinPoint
   * @generated
   */
  public Adapter createWithinPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.BeforePoint <em>Before Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.BeforePoint
   * @generated
   */
  public Adapter createBeforePointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.SingleCondition <em>Single Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.SingleCondition
   * @generated
   */
  public Adapter createSingleConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.TrueCondition <em>True Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.TrueCondition
   * @generated
   */
  public Adapter createTrueConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.CompareString <em>Compare String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.CompareString
   * @generated
   */
  public Adapter createCompareStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.TimeSub <em>Time Sub</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.TimeSub
   * @generated
   */
  public Adapter createTimeSubAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.isTime <em>is Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.isTime
   * @generated
   */
  public Adapter createisTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.logic <em>logic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.logic
   * @generated
   */
  public Adapter createlogicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.isTrue <em>is True</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.isTrue
   * @generated
   */
  public Adapter createisTrueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.isDone <em>is Done</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.isDone
   * @generated
   */
  public Adapter createisDoneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.checkExpression <em>check Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.checkExpression
   * @generated
   */
  public Adapter createcheckExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.MixExpression <em>Mix Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.MixExpression
   * @generated
   */
  public Adapter createMixExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.OtherMixExpression <em>Other Mix Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.OtherMixExpression
   * @generated
   */
  public Adapter createOtherMixExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.SingleExpression <em>Single Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.SingleExpression
   * @generated
   */
  public Adapter createSingleExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.PeriodExpression <em>Period Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.PeriodExpression
   * @generated
   */
  public Adapter createPeriodExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.GetPeriodExpression <em>Get Period Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.GetPeriodExpression
   * @generated
   */
  public Adapter createGetPeriodExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.RuleTimeExpression <em>Rule Time Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.RuleTimeExpression
   * @generated
   */
  public Adapter createRuleTimeExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.OtherExpression <em>Other Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.OtherExpression
   * @generated
   */
  public Adapter createOtherExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.StringExpression <em>String Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.StringExpression
   * @generated
   */
  public Adapter createStringExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.FloatExpression <em>Float Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.FloatExpression
   * @generated
   */
  public Adapter createFloatExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.PersonExpression <em>Person Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.PersonExpression
   * @generated
   */
  public Adapter createPersonExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.RegularExpression <em>Regular Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.RegularExpression
   * @generated
   */
  public Adapter createRegularExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ThingExpression <em>Thing Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ThingExpression
   * @generated
   */
  public Adapter createThingExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.SubjectExpress <em>Subject Express</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.SubjectExpress
   * @generated
   */
  public Adapter createSubjectExpressAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.ObjectExpress <em>Object Express</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.ObjectExpress
   * @generated
   */
  public Adapter createObjectExpressAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.trueOperation <em>true Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.trueOperation
   * @generated
   */
  public Adapter createtrueOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.messageExpression <em>message Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.messageExpression
   * @generated
   */
  public Adapter createmessageExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.everyMessage <em>every Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.everyMessage
   * @generated
   */
  public Adapter createeveryMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.transferExpression <em>transfer Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.transferExpression
   * @generated
   */
  public Adapter createtransferExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.changeExpression <em>change Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.changeExpression
   * @generated
   */
  public Adapter createchangeExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.changeString <em>change String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.changeString
   * @generated
   */
  public Adapter createchangeStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.otherchange <em>otherchange</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.otherchange
   * @generated
   */
  public Adapter createotherchangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.changeContract <em>change Contract</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.changeContract
   * @generated
   */
  public Adapter createchangeContractAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.changeRule <em>change Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.changeRule
   * @generated
   */
  public Adapter createchangeRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.changeOther <em>change Other</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.changeOther
   * @generated
   */
  public Adapter createchangeOtherAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.sparrow.changeAddress <em>change Address</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.sparrow.changeAddress
   * @generated
   */
  public Adapter createchangeAddressAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SparrowAdapterFactory
