/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.sparrow.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.sparrow.AdditionExpression;
import org.xtext.example.mydsl.sparrow.Address;
import org.xtext.example.mydsl.sparrow.AllNumber;
import org.xtext.example.mydsl.sparrow.AndOrCondition;
import org.xtext.example.mydsl.sparrow.AndOrOperationLink;
import org.xtext.example.mydsl.sparrow.BeforePoint;
import org.xtext.example.mydsl.sparrow.CompareString;
import org.xtext.example.mydsl.sparrow.Condition;
import org.xtext.example.mydsl.sparrow.ConditionLink;
import org.xtext.example.mydsl.sparrow.ContractMessage;
import org.xtext.example.mydsl.sparrow.DATE;
import org.xtext.example.mydsl.sparrow.Duration;
import org.xtext.example.mydsl.sparrow.ElseExpression;
import org.xtext.example.mydsl.sparrow.ExclusiveExpression;
import org.xtext.example.mydsl.sparrow.FailResult;
import org.xtext.example.mydsl.sparrow.FloatExpression;
import org.xtext.example.mydsl.sparrow.GetPeriodExpression;
import org.xtext.example.mydsl.sparrow.Group;
import org.xtext.example.mydsl.sparrow.Initialize;
import org.xtext.example.mydsl.sparrow.ManyRuleExpression;
import org.xtext.example.mydsl.sparrow.Message;
import org.xtext.example.mydsl.sparrow.MixExpression;
import org.xtext.example.mydsl.sparrow.Model;
import org.xtext.example.mydsl.sparrow.Now;
import org.xtext.example.mydsl.sparrow.ObjectExpress;
import org.xtext.example.mydsl.sparrow.ObjectExpression;
import org.xtext.example.mydsl.sparrow.OperateLink;
import org.xtext.example.mydsl.sparrow.Operation;
import org.xtext.example.mydsl.sparrow.OtherExpression;
import org.xtext.example.mydsl.sparrow.OtherMixExpression;
import org.xtext.example.mydsl.sparrow.ParallelExpression;
import org.xtext.example.mydsl.sparrow.PeriodExpression;
import org.xtext.example.mydsl.sparrow.PersonExpression;
import org.xtext.example.mydsl.sparrow.RegularExpression;
import org.xtext.example.mydsl.sparrow.RegularRuleExpression;
import org.xtext.example.mydsl.sparrow.Require;
import org.xtext.example.mydsl.sparrow.Right;
import org.xtext.example.mydsl.sparrow.RuleExpression;
import org.xtext.example.mydsl.sparrow.RuleStructure;
import org.xtext.example.mydsl.sparrow.RuleTimeExpression;
import org.xtext.example.mydsl.sparrow.SingleCondition;
import org.xtext.example.mydsl.sparrow.SingleExpression;
import org.xtext.example.mydsl.sparrow.SingleLinkCondition;
import org.xtext.example.mydsl.sparrow.SparrowPackage;
import org.xtext.example.mydsl.sparrow.StringExpression;
import org.xtext.example.mydsl.sparrow.SubExpression;
import org.xtext.example.mydsl.sparrow.Subject;
import org.xtext.example.mydsl.sparrow.SubjectExpress;
import org.xtext.example.mydsl.sparrow.SubjectExpression;
import org.xtext.example.mydsl.sparrow.ThenOperation;
import org.xtext.example.mydsl.sparrow.ThingExpression;
import org.xtext.example.mydsl.sparrow.ThisBoolean;
import org.xtext.example.mydsl.sparrow.ThisDate;
import org.xtext.example.mydsl.sparrow.ThisDecimal;
import org.xtext.example.mydsl.sparrow.ThisString;
import org.xtext.example.mydsl.sparrow.TimeSub;
import org.xtext.example.mydsl.sparrow.Timepoint;
import org.xtext.example.mydsl.sparrow.TotalCondition;
import org.xtext.example.mydsl.sparrow.TotalExpression;
import org.xtext.example.mydsl.sparrow.TotalOperation;
import org.xtext.example.mydsl.sparrow.TrueCondition;
import org.xtext.example.mydsl.sparrow.Value;
import org.xtext.example.mydsl.sparrow.WithinPoint;
import org.xtext.example.mydsl.sparrow.changeAddress;
import org.xtext.example.mydsl.sparrow.changeContract;
import org.xtext.example.mydsl.sparrow.changeExpression;
import org.xtext.example.mydsl.sparrow.changeOther;
import org.xtext.example.mydsl.sparrow.changeRule;
import org.xtext.example.mydsl.sparrow.changeString;
import org.xtext.example.mydsl.sparrow.checkExpression;
import org.xtext.example.mydsl.sparrow.everyMessage;
import org.xtext.example.mydsl.sparrow.initExpressiono;
import org.xtext.example.mydsl.sparrow.initExpressions;
import org.xtext.example.mydsl.sparrow.isDone;
import org.xtext.example.mydsl.sparrow.isTime;
import org.xtext.example.mydsl.sparrow.isTrue;
import org.xtext.example.mydsl.sparrow.keyvalue;
import org.xtext.example.mydsl.sparrow.logic;
import org.xtext.example.mydsl.sparrow.messageExpression;
import org.xtext.example.mydsl.sparrow.otherchange;
import org.xtext.example.mydsl.sparrow.setDateExpression;
import org.xtext.example.mydsl.sparrow.transferExpression;
import org.xtext.example.mydsl.sparrow.trueOperation;
import org.xtext.example.mydsl.sparrow.url;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.sparrow.SparrowPackage
 * @generated
 */
public class SparrowSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SparrowPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SparrowSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SparrowPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SparrowPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.REQUIRE:
      {
        Require require = (Require)theEObject;
        T result = caseRequire(require);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.INITIALIZE:
      {
        Initialize initialize = (Initialize)theEObject;
        T result = caseInitialize(initialize);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.INIT_EXPRESSIONS:
      {
        initExpressions initExpressions = (initExpressions)theEObject;
        T result = caseinitExpressions(initExpressions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.INIT_EXPRESSIONO:
      {
        initExpressiono initExpressiono = (initExpressiono)theEObject;
        T result = caseinitExpressiono(initExpressiono);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.GROUP:
      {
        Group group = (Group)theEObject;
        T result = caseGroup(group);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.SUBJECT:
      {
        Subject subject = (Subject)theEObject;
        T result = caseSubject(subject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.SUBJECT_EXPRESSION:
      {
        SubjectExpression subjectExpression = (SubjectExpression)theEObject;
        T result = caseSubjectExpression(subjectExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.CONTRACT_MESSAGE:
      {
        ContractMessage contractMessage = (ContractMessage)theEObject;
        T result = caseContractMessage(contractMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.MESSAGE:
      {
        Message message = (Message)theEObject;
        T result = caseMessage(message);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.KEYVALUE:
      {
        keyvalue keyvalue = (keyvalue)theEObject;
        T result = casekeyvalue(keyvalue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.VALUE:
      {
        Value value = (Value)theEObject;
        T result = caseValue(value);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.DURATION:
      {
        Duration duration = (Duration)theEObject;
        T result = caseDuration(duration);
        if (result == null) result = caseValue(duration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.NOW:
      {
        Now now = (Now)theEObject;
        T result = caseNow(now);
        if (result == null) result = caseValue(now);
        if (result == null) result = caseRegularExpression(now);
        if (result == null) result = caseSingleExpression(now);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.THIS_STRING:
      {
        ThisString thisString = (ThisString)theEObject;
        T result = caseThisString(thisString);
        if (result == null) result = caseValue(thisString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.ADDRESS:
      {
        Address address = (Address)theEObject;
        T result = caseAddress(address);
        if (result == null) result = caseValue(address);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.ALL_NUMBER:
      {
        AllNumber allNumber = (AllNumber)theEObject;
        T result = caseAllNumber(allNumber);
        if (result == null) result = caseValue(allNumber);
        if (result == null) result = caseRegularExpression(allNumber);
        if (result == null) result = caseSingleExpression(allNumber);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.THIS_DECIMAL:
      {
        ThisDecimal thisDecimal = (ThisDecimal)theEObject;
        T result = caseThisDecimal(thisDecimal);
        if (result == null) result = caseValue(thisDecimal);
        if (result == null) result = caseRegularExpression(thisDecimal);
        if (result == null) result = caseSingleExpression(thisDecimal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.URL:
      {
        url url = (url)theEObject;
        T result = caseurl(url);
        if (result == null) result = caseValue(url);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.THIS_BOOLEAN:
      {
        ThisBoolean thisBoolean = (ThisBoolean)theEObject;
        T result = caseThisBoolean(thisBoolean);
        if (result == null) result = caseValue(thisBoolean);
        if (result == null) result = caseRegularExpression(thisBoolean);
        if (result == null) result = caseSingleExpression(thisBoolean);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.THIS_DATE:
      {
        ThisDate thisDate = (ThisDate)theEObject;
        T result = caseThisDate(thisDate);
        if (result == null) result = caseValue(thisDate);
        if (result == null) result = caseRegularExpression(thisDate);
        if (result == null) result = caseSingleExpression(thisDate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.RIGHT:
      {
        Right right = (Right)theEObject;
        T result = caseRight(right);
        if (result == null) result = caseValue(right);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.DATE:
      {
        DATE date = (DATE)theEObject;
        T result = caseDATE(date);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.OBJECT:
      {
        org.xtext.example.mydsl.sparrow.Object object = (org.xtext.example.mydsl.sparrow.Object)theEObject;
        T result = caseObject(object);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.OBJECT_EXPRESSION:
      {
        ObjectExpression objectExpression = (ObjectExpression)theEObject;
        T result = caseObjectExpression(objectExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.CONDITION:
      {
        Condition condition = (Condition)theEObject;
        T result = caseCondition(condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.CONDITION_LINK:
      {
        ConditionLink conditionLink = (ConditionLink)theEObject;
        T result = caseConditionLink(conditionLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.AND_OR_CONDITION:
      {
        AndOrCondition andOrCondition = (AndOrCondition)theEObject;
        T result = caseAndOrCondition(andOrCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.OPERATION:
      {
        Operation operation = (Operation)theEObject;
        T result = caseOperation(operation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.OPERATE_LINK:
      {
        OperateLink operateLink = (OperateLink)theEObject;
        T result = caseOperateLink(operateLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.RULE_STRUCTURE:
      {
        RuleStructure ruleStructure = (RuleStructure)theEObject;
        T result = caseRuleStructure(ruleStructure);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.MANY_RULE_EXPRESSION:
      {
        ManyRuleExpression manyRuleExpression = (ManyRuleExpression)theEObject;
        T result = caseManyRuleExpression(manyRuleExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.PARALLEL_EXPRESSION:
      {
        ParallelExpression parallelExpression = (ParallelExpression)theEObject;
        T result = caseParallelExpression(parallelExpression);
        if (result == null) result = caseManyRuleExpression(parallelExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.EXCLUSIVE_EXPRESSION:
      {
        ExclusiveExpression exclusiveExpression = (ExclusiveExpression)theEObject;
        T result = caseExclusiveExpression(exclusiveExpression);
        if (result == null) result = caseManyRuleExpression(exclusiveExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.REGULAR_RULE_EXPRESSION:
      {
        RegularRuleExpression regularRuleExpression = (RegularRuleExpression)theEObject;
        T result = caseRegularRuleExpression(regularRuleExpression);
        if (result == null) result = caseManyRuleExpression(regularRuleExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.ADDITION_EXPRESSION:
      {
        AdditionExpression additionExpression = (AdditionExpression)theEObject;
        T result = caseAdditionExpression(additionExpression);
        if (result == null) result = caseManyRuleExpression(additionExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.TOTAL_CONDITION:
      {
        TotalCondition totalCondition = (TotalCondition)theEObject;
        T result = caseTotalCondition(totalCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.SINGLE_LINK_CONDITION:
      {
        SingleLinkCondition singleLinkCondition = (SingleLinkCondition)theEObject;
        T result = caseSingleLinkCondition(singleLinkCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.TOTAL_OPERATION:
      {
        TotalOperation totalOperation = (TotalOperation)theEObject;
        T result = caseTotalOperation(totalOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.AND_OR_OPERATION_LINK:
      {
        AndOrOperationLink andOrOperationLink = (AndOrOperationLink)theEObject;
        T result = caseAndOrOperationLink(andOrOperationLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.THEN_OPERATION:
      {
        ThenOperation thenOperation = (ThenOperation)theEObject;
        T result = caseThenOperation(thenOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.TOTAL_EXPRESSION:
      {
        TotalExpression totalExpression = (TotalExpression)theEObject;
        T result = caseTotalExpression(totalExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.ELSE_EXPRESSION:
      {
        ElseExpression elseExpression = (ElseExpression)theEObject;
        T result = caseElseExpression(elseExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.RULE_EXPRESSION:
      {
        RuleExpression ruleExpression = (RuleExpression)theEObject;
        T result = caseRuleExpression(ruleExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.SET_DATE_EXPRESSION:
      {
        setDateExpression setDateExpression = (setDateExpression)theEObject;
        T result = casesetDateExpression(setDateExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.SUB_EXPRESSION:
      {
        SubExpression subExpression = (SubExpression)theEObject;
        T result = caseSubExpression(subExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.FAIL_RESULT:
      {
        FailResult failResult = (FailResult)theEObject;
        T result = caseFailResult(failResult);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.TIMEPOINT:
      {
        Timepoint timepoint = (Timepoint)theEObject;
        T result = caseTimepoint(timepoint);
        if (result == null) result = caseTrueCondition(timepoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.WITHIN_POINT:
      {
        WithinPoint withinPoint = (WithinPoint)theEObject;
        T result = caseWithinPoint(withinPoint);
        if (result == null) result = caseTimepoint(withinPoint);
        if (result == null) result = caseTrueCondition(withinPoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.BEFORE_POINT:
      {
        BeforePoint beforePoint = (BeforePoint)theEObject;
        T result = caseBeforePoint(beforePoint);
        if (result == null) result = caseTimepoint(beforePoint);
        if (result == null) result = caseTrueCondition(beforePoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.SINGLE_CONDITION:
      {
        SingleCondition singleCondition = (SingleCondition)theEObject;
        T result = caseSingleCondition(singleCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.TRUE_CONDITION:
      {
        TrueCondition trueCondition = (TrueCondition)theEObject;
        T result = caseTrueCondition(trueCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.COMPARE_STRING:
      {
        CompareString compareString = (CompareString)theEObject;
        T result = caseCompareString(compareString);
        if (result == null) result = caseTrueCondition(compareString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.TIME_SUB:
      {
        TimeSub timeSub = (TimeSub)theEObject;
        T result = caseTimeSub(timeSub);
        if (result == null) result = caseTrueCondition(timeSub);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.IS_TIME:
      {
        isTime isTime = (isTime)theEObject;
        T result = caseisTime(isTime);
        if (result == null) result = caseTrueCondition(isTime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.LOGIC:
      {
        logic logic = (logic)theEObject;
        T result = caselogic(logic);
        if (result == null) result = caseTrueCondition(logic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.IS_TRUE:
      {
        isTrue isTrue = (isTrue)theEObject;
        T result = caseisTrue(isTrue);
        if (result == null) result = caseTrueCondition(isTrue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.IS_DONE:
      {
        isDone isDone = (isDone)theEObject;
        T result = caseisDone(isDone);
        if (result == null) result = caseTrueCondition(isDone);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.CHECK_EXPRESSION:
      {
        checkExpression checkExpression = (checkExpression)theEObject;
        T result = casecheckExpression(checkExpression);
        if (result == null) result = caseTrueCondition(checkExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.MIX_EXPRESSION:
      {
        MixExpression mixExpression = (MixExpression)theEObject;
        T result = caseMixExpression(mixExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.OTHER_MIX_EXPRESSION:
      {
        OtherMixExpression otherMixExpression = (OtherMixExpression)theEObject;
        T result = caseOtherMixExpression(otherMixExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.SINGLE_EXPRESSION:
      {
        SingleExpression singleExpression = (SingleExpression)theEObject;
        T result = caseSingleExpression(singleExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.PERIOD_EXPRESSION:
      {
        PeriodExpression periodExpression = (PeriodExpression)theEObject;
        T result = casePeriodExpression(periodExpression);
        if (result == null) result = caseSingleExpression(periodExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.GET_PERIOD_EXPRESSION:
      {
        GetPeriodExpression getPeriodExpression = (GetPeriodExpression)theEObject;
        T result = caseGetPeriodExpression(getPeriodExpression);
        if (result == null) result = caseSingleExpression(getPeriodExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.RULE_TIME_EXPRESSION:
      {
        RuleTimeExpression ruleTimeExpression = (RuleTimeExpression)theEObject;
        T result = caseRuleTimeExpression(ruleTimeExpression);
        if (result == null) result = caseSingleExpression(ruleTimeExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.OTHER_EXPRESSION:
      {
        OtherExpression otherExpression = (OtherExpression)theEObject;
        T result = caseOtherExpression(otherExpression);
        if (result == null) result = caseSingleExpression(otherExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.STRING_EXPRESSION:
      {
        StringExpression stringExpression = (StringExpression)theEObject;
        T result = caseStringExpression(stringExpression);
        if (result == null) result = caseSingleExpression(stringExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.FLOAT_EXPRESSION:
      {
        FloatExpression floatExpression = (FloatExpression)theEObject;
        T result = caseFloatExpression(floatExpression);
        if (result == null) result = caseSingleExpression(floatExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.PERSON_EXPRESSION:
      {
        PersonExpression personExpression = (PersonExpression)theEObject;
        T result = casePersonExpression(personExpression);
        if (result == null) result = caseSingleExpression(personExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.REGULAR_EXPRESSION:
      {
        RegularExpression regularExpression = (RegularExpression)theEObject;
        T result = caseRegularExpression(regularExpression);
        if (result == null) result = caseSingleExpression(regularExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.THING_EXPRESSION:
      {
        ThingExpression thingExpression = (ThingExpression)theEObject;
        T result = caseThingExpression(thingExpression);
        if (result == null) result = caseSingleExpression(thingExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.SUBJECT_EXPRESS:
      {
        SubjectExpress subjectExpress = (SubjectExpress)theEObject;
        T result = caseSubjectExpress(subjectExpress);
        if (result == null) result = caseThingExpression(subjectExpress);
        if (result == null) result = caseSingleExpression(subjectExpress);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.OBJECT_EXPRESS:
      {
        ObjectExpress objectExpress = (ObjectExpress)theEObject;
        T result = caseObjectExpress(objectExpress);
        if (result == null) result = caseThingExpression(objectExpress);
        if (result == null) result = caseSingleExpression(objectExpress);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.TRUE_OPERATION:
      {
        trueOperation trueOperation = (trueOperation)theEObject;
        T result = casetrueOperation(trueOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.MESSAGE_EXPRESSION:
      {
        messageExpression messageExpression = (messageExpression)theEObject;
        T result = casemessageExpression(messageExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.EVERY_MESSAGE:
      {
        everyMessage everyMessage = (everyMessage)theEObject;
        T result = caseeveryMessage(everyMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.TRANSFER_EXPRESSION:
      {
        transferExpression transferExpression = (transferExpression)theEObject;
        T result = casetransferExpression(transferExpression);
        if (result == null) result = casetrueOperation(transferExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.CHANGE_EXPRESSION:
      {
        changeExpression changeExpression = (changeExpression)theEObject;
        T result = casechangeExpression(changeExpression);
        if (result == null) result = casetrueOperation(changeExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.CHANGE_STRING:
      {
        changeString changeString = (changeString)theEObject;
        T result = casechangeString(changeString);
        if (result == null) result = casechangeExpression(changeString);
        if (result == null) result = casetrueOperation(changeString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.OTHERCHANGE:
      {
        otherchange otherchange = (otherchange)theEObject;
        T result = caseotherchange(otherchange);
        if (result == null) result = casechangeExpression(otherchange);
        if (result == null) result = casetrueOperation(otherchange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.CHANGE_CONTRACT:
      {
        changeContract changeContract = (changeContract)theEObject;
        T result = casechangeContract(changeContract);
        if (result == null) result = casechangeExpression(changeContract);
        if (result == null) result = casetrueOperation(changeContract);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.CHANGE_RULE:
      {
        changeRule changeRule = (changeRule)theEObject;
        T result = casechangeRule(changeRule);
        if (result == null) result = casechangeExpression(changeRule);
        if (result == null) result = casetrueOperation(changeRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.CHANGE_OTHER:
      {
        changeOther changeOther = (changeOther)theEObject;
        T result = casechangeOther(changeOther);
        if (result == null) result = casechangeExpression(changeOther);
        if (result == null) result = casetrueOperation(changeOther);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SparrowPackage.CHANGE_ADDRESS:
      {
        changeAddress changeAddress = (changeAddress)theEObject;
        T result = casechangeAddress(changeAddress);
        if (result == null) result = casechangeExpression(changeAddress);
        if (result == null) result = casetrueOperation(changeAddress);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Require</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Require</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequire(Require object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initialize</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initialize</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitialize(Initialize object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>init Expressions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>init Expressions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinitExpressions(initExpressions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>init Expressiono</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>init Expressiono</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinitExpressiono(initExpressiono object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGroup(Group object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubject(Subject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subject Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subject Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubjectExpression(SubjectExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContractMessage(ContractMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessage(Message object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>keyvalue</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>keyvalue</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casekeyvalue(keyvalue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValue(Value object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Duration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Duration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDuration(Duration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Now</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Now</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNow(Now object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>This String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>This String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThisString(ThisString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Address</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Address</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddress(Address object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>All Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>All Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAllNumber(AllNumber object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>This Decimal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>This Decimal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThisDecimal(ThisDecimal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>url</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>url</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseurl(url object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>This Boolean</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>This Boolean</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThisBoolean(ThisBoolean object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>This Date</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>This Date</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThisDate(ThisDate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Right</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Right</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRight(Right object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DATE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DATE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDATE(DATE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObject(org.xtext.example.mydsl.sparrow.Object object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Object Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Object Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObjectExpression(ObjectExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondition(Condition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionLink(ConditionLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Or Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Or Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndOrCondition(AndOrCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperation(Operation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operate Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operate Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperateLink(OperateLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule Structure</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule Structure</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleStructure(RuleStructure object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Many Rule Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Many Rule Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseManyRuleExpression(ManyRuleExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parallel Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parallel Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParallelExpression(ParallelExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exclusive Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exclusive Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExclusiveExpression(ExclusiveExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regular Rule Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regular Rule Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegularRuleExpression(RegularRuleExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Addition Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Addition Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdditionExpression(AdditionExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Total Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Total Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTotalCondition(TotalCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Link Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Link Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleLinkCondition(SingleLinkCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Total Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Total Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTotalOperation(TotalOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Or Operation Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Or Operation Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndOrOperationLink(AndOrOperationLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Then Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Then Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThenOperation(ThenOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Total Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Total Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTotalExpression(TotalExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Else Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Else Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElseExpression(ElseExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleExpression(RuleExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>set Date Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>set Date Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesetDateExpression(setDateExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubExpression(SubExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fail Result</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fail Result</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFailResult(FailResult object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timepoint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timepoint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimepoint(Timepoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Within Point</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Within Point</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWithinPoint(WithinPoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Before Point</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Before Point</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBeforePoint(BeforePoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleCondition(SingleCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>True Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>True Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTrueCondition(TrueCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compare String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compare String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompareString(CompareString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Time Sub</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Time Sub</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeSub(TimeSub object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>is Time</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>is Time</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseisTime(isTime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>logic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>logic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselogic(logic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>is True</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>is True</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseisTrue(isTrue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>is Done</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>is Done</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseisDone(isDone object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>check Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>check Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecheckExpression(checkExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mix Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mix Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMixExpression(MixExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Other Mix Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Other Mix Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOtherMixExpression(OtherMixExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleExpression(SingleExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Period Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Period Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePeriodExpression(PeriodExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Get Period Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Get Period Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGetPeriodExpression(GetPeriodExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule Time Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule Time Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleTimeExpression(RuleTimeExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Other Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Other Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOtherExpression(OtherExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringExpression(StringExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Float Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Float Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFloatExpression(FloatExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Person Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Person Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePersonExpression(PersonExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regular Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regular Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegularExpression(RegularExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thing Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thing Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThingExpression(ThingExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subject Express</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subject Express</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubjectExpress(SubjectExpress object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Object Express</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Object Express</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObjectExpress(ObjectExpress object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>true Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>true Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetrueOperation(trueOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>message Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>message Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemessageExpression(messageExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>every Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>every Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseeveryMessage(everyMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>transfer Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>transfer Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetransferExpression(transferExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>change Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>change Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casechangeExpression(changeExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>change String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>change String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casechangeString(changeString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>otherchange</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>otherchange</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseotherchange(otherchange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>change Contract</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>change Contract</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casechangeContract(changeContract object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>change Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>change Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casechangeRule(changeRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>change Other</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>change Other</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casechangeOther(changeOther object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>change Address</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>change Address</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casechangeAddress(changeAddress object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SparrowSwitch
