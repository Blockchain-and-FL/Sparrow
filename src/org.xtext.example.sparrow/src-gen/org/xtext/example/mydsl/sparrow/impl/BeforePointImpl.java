/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.sparrow.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.sparrow.BeforePoint;
import org.xtext.example.mydsl.sparrow.SparrowPackage;
import org.xtext.example.mydsl.sparrow.ThisDate;
import org.xtext.example.mydsl.sparrow.keyvalue;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Before Point</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.BeforePointImpl#getLineTime <em>Line Time</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.BeforePointImpl#getValue <em>Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BeforePointImpl extends TimepointImpl implements BeforePoint
{
  /**
   * The cached value of the '{@link #getLineTime() <em>Line Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLineTime()
   * @generated
   * @ordered
   */
  protected ThisDate lineTime;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected keyvalue value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BeforePointImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SparrowPackage.Literals.BEFORE_POINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ThisDate getLineTime()
  {
    return lineTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLineTime(ThisDate newLineTime, NotificationChain msgs)
  {
    ThisDate oldLineTime = lineTime;
    lineTime = newLineTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.BEFORE_POINT__LINE_TIME, oldLineTime, newLineTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLineTime(ThisDate newLineTime)
  {
    if (newLineTime != lineTime)
    {
      NotificationChain msgs = null;
      if (lineTime != null)
        msgs = ((InternalEObject)lineTime).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.BEFORE_POINT__LINE_TIME, null, msgs);
      if (newLineTime != null)
        msgs = ((InternalEObject)newLineTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.BEFORE_POINT__LINE_TIME, null, msgs);
      msgs = basicSetLineTime(newLineTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.BEFORE_POINT__LINE_TIME, newLineTime, newLineTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public keyvalue getValue()
  {
    if (value != null && value.eIsProxy())
    {
      InternalEObject oldValue = (InternalEObject)value;
      value = (keyvalue)eResolveProxy(oldValue);
      if (value != oldValue)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SparrowPackage.BEFORE_POINT__VALUE, oldValue, value));
      }
    }
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public keyvalue basicGetValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(keyvalue newValue)
  {
    keyvalue oldValue = value;
    value = newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.BEFORE_POINT__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SparrowPackage.BEFORE_POINT__LINE_TIME:
        return basicSetLineTime(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SparrowPackage.BEFORE_POINT__LINE_TIME:
        return getLineTime();
      case SparrowPackage.BEFORE_POINT__VALUE:
        if (resolve) return getValue();
        return basicGetValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SparrowPackage.BEFORE_POINT__LINE_TIME:
        setLineTime((ThisDate)newValue);
        return;
      case SparrowPackage.BEFORE_POINT__VALUE:
        setValue((keyvalue)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.BEFORE_POINT__LINE_TIME:
        setLineTime((ThisDate)null);
        return;
      case SparrowPackage.BEFORE_POINT__VALUE:
        setValue((keyvalue)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.BEFORE_POINT__LINE_TIME:
        return lineTime != null;
      case SparrowPackage.BEFORE_POINT__VALUE:
        return value != null;
    }
    return super.eIsSet(featureID);
  }

} //BeforePointImpl
