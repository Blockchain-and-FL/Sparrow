/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.sparrow.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.sparrow.Duration;
import org.xtext.example.mydsl.sparrow.MixExpression;
import org.xtext.example.mydsl.sparrow.RuleExpression;
import org.xtext.example.mydsl.sparrow.SparrowPackage;
import org.xtext.example.mydsl.sparrow.TimeSub;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Time Sub</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.TimeSubImpl#getValueA <em>Value A</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.TimeSubImpl#getValueB <em>Value B</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.TimeSubImpl#getValueC <em>Value C</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.TimeSubImpl#getDuration <em>Duration</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.TimeSubImpl#getCompare <em>Compare</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TimeSubImpl extends TrueConditionImpl implements TimeSub
{
  /**
   * The cached value of the '{@link #getValueA() <em>Value A</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueA()
   * @generated
   * @ordered
   */
  protected MixExpression valueA;

  /**
   * The cached value of the '{@link #getValueB() <em>Value B</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueB()
   * @generated
   * @ordered
   */
  protected MixExpression valueB;

  /**
   * The cached value of the '{@link #getValueC() <em>Value C</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueC()
   * @generated
   * @ordered
   */
  protected RuleExpression valueC;

  /**
   * The cached value of the '{@link #getDuration() <em>Duration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDuration()
   * @generated
   * @ordered
   */
  protected Duration duration;

  /**
   * The default value of the '{@link #getCompare() <em>Compare</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompare()
   * @generated
   * @ordered
   */
  protected static final String COMPARE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCompare() <em>Compare</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompare()
   * @generated
   * @ordered
   */
  protected String compare = COMPARE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TimeSubImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SparrowPackage.Literals.TIME_SUB;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MixExpression getValueA()
  {
    return valueA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValueA(MixExpression newValueA, NotificationChain msgs)
  {
    MixExpression oldValueA = valueA;
    valueA = newValueA;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.TIME_SUB__VALUE_A, oldValueA, newValueA);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueA(MixExpression newValueA)
  {
    if (newValueA != valueA)
    {
      NotificationChain msgs = null;
      if (valueA != null)
        msgs = ((InternalEObject)valueA).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.TIME_SUB__VALUE_A, null, msgs);
      if (newValueA != null)
        msgs = ((InternalEObject)newValueA).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.TIME_SUB__VALUE_A, null, msgs);
      msgs = basicSetValueA(newValueA, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.TIME_SUB__VALUE_A, newValueA, newValueA));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MixExpression getValueB()
  {
    return valueB;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValueB(MixExpression newValueB, NotificationChain msgs)
  {
    MixExpression oldValueB = valueB;
    valueB = newValueB;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.TIME_SUB__VALUE_B, oldValueB, newValueB);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueB(MixExpression newValueB)
  {
    if (newValueB != valueB)
    {
      NotificationChain msgs = null;
      if (valueB != null)
        msgs = ((InternalEObject)valueB).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.TIME_SUB__VALUE_B, null, msgs);
      if (newValueB != null)
        msgs = ((InternalEObject)newValueB).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.TIME_SUB__VALUE_B, null, msgs);
      msgs = basicSetValueB(newValueB, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.TIME_SUB__VALUE_B, newValueB, newValueB));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RuleExpression getValueC()
  {
    if (valueC != null && valueC.eIsProxy())
    {
      InternalEObject oldValueC = (InternalEObject)valueC;
      valueC = (RuleExpression)eResolveProxy(oldValueC);
      if (valueC != oldValueC)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SparrowPackage.TIME_SUB__VALUE_C, oldValueC, valueC));
      }
    }
    return valueC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleExpression basicGetValueC()
  {
    return valueC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueC(RuleExpression newValueC)
  {
    RuleExpression oldValueC = valueC;
    valueC = newValueC;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.TIME_SUB__VALUE_C, oldValueC, valueC));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Duration getDuration()
  {
    return duration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDuration(Duration newDuration, NotificationChain msgs)
  {
    Duration oldDuration = duration;
    duration = newDuration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.TIME_SUB__DURATION, oldDuration, newDuration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDuration(Duration newDuration)
  {
    if (newDuration != duration)
    {
      NotificationChain msgs = null;
      if (duration != null)
        msgs = ((InternalEObject)duration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.TIME_SUB__DURATION, null, msgs);
      if (newDuration != null)
        msgs = ((InternalEObject)newDuration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.TIME_SUB__DURATION, null, msgs);
      msgs = basicSetDuration(newDuration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.TIME_SUB__DURATION, newDuration, newDuration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCompare()
  {
    return compare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompare(String newCompare)
  {
    String oldCompare = compare;
    compare = newCompare;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.TIME_SUB__COMPARE, oldCompare, compare));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SparrowPackage.TIME_SUB__VALUE_A:
        return basicSetValueA(null, msgs);
      case SparrowPackage.TIME_SUB__VALUE_B:
        return basicSetValueB(null, msgs);
      case SparrowPackage.TIME_SUB__DURATION:
        return basicSetDuration(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SparrowPackage.TIME_SUB__VALUE_A:
        return getValueA();
      case SparrowPackage.TIME_SUB__VALUE_B:
        return getValueB();
      case SparrowPackage.TIME_SUB__VALUE_C:
        if (resolve) return getValueC();
        return basicGetValueC();
      case SparrowPackage.TIME_SUB__DURATION:
        return getDuration();
      case SparrowPackage.TIME_SUB__COMPARE:
        return getCompare();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SparrowPackage.TIME_SUB__VALUE_A:
        setValueA((MixExpression)newValue);
        return;
      case SparrowPackage.TIME_SUB__VALUE_B:
        setValueB((MixExpression)newValue);
        return;
      case SparrowPackage.TIME_SUB__VALUE_C:
        setValueC((RuleExpression)newValue);
        return;
      case SparrowPackage.TIME_SUB__DURATION:
        setDuration((Duration)newValue);
        return;
      case SparrowPackage.TIME_SUB__COMPARE:
        setCompare((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.TIME_SUB__VALUE_A:
        setValueA((MixExpression)null);
        return;
      case SparrowPackage.TIME_SUB__VALUE_B:
        setValueB((MixExpression)null);
        return;
      case SparrowPackage.TIME_SUB__VALUE_C:
        setValueC((RuleExpression)null);
        return;
      case SparrowPackage.TIME_SUB__DURATION:
        setDuration((Duration)null);
        return;
      case SparrowPackage.TIME_SUB__COMPARE:
        setCompare(COMPARE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.TIME_SUB__VALUE_A:
        return valueA != null;
      case SparrowPackage.TIME_SUB__VALUE_B:
        return valueB != null;
      case SparrowPackage.TIME_SUB__VALUE_C:
        return valueC != null;
      case SparrowPackage.TIME_SUB__DURATION:
        return duration != null;
      case SparrowPackage.TIME_SUB__COMPARE:
        return COMPARE_EDEFAULT == null ? compare != null : !COMPARE_EDEFAULT.equals(compare);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (compare: ");
    result.append(compare);
    result.append(')');
    return result.toString();
  }

} //TimeSubImpl
