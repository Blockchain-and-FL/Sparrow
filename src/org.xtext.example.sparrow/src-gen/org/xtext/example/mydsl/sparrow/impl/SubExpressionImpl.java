/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.sparrow.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.sparrow.SparrowPackage;
import org.xtext.example.mydsl.sparrow.SubExpression;
import org.xtext.example.mydsl.sparrow.TotalExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sub Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.SubExpressionImpl#getTotalExpression <em>Total Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SubExpressionImpl extends MinimalEObjectImpl.Container implements SubExpression
{
  /**
   * The cached value of the '{@link #getTotalExpression() <em>Total Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTotalExpression()
   * @generated
   * @ordered
   */
  protected TotalExpression totalExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SubExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SparrowPackage.Literals.SUB_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TotalExpression getTotalExpression()
  {
    return totalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTotalExpression(TotalExpression newTotalExpression, NotificationChain msgs)
  {
    TotalExpression oldTotalExpression = totalExpression;
    totalExpression = newTotalExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.SUB_EXPRESSION__TOTAL_EXPRESSION, oldTotalExpression, newTotalExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTotalExpression(TotalExpression newTotalExpression)
  {
    if (newTotalExpression != totalExpression)
    {
      NotificationChain msgs = null;
      if (totalExpression != null)
        msgs = ((InternalEObject)totalExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.SUB_EXPRESSION__TOTAL_EXPRESSION, null, msgs);
      if (newTotalExpression != null)
        msgs = ((InternalEObject)newTotalExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.SUB_EXPRESSION__TOTAL_EXPRESSION, null, msgs);
      msgs = basicSetTotalExpression(newTotalExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.SUB_EXPRESSION__TOTAL_EXPRESSION, newTotalExpression, newTotalExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SparrowPackage.SUB_EXPRESSION__TOTAL_EXPRESSION:
        return basicSetTotalExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SparrowPackage.SUB_EXPRESSION__TOTAL_EXPRESSION:
        return getTotalExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SparrowPackage.SUB_EXPRESSION__TOTAL_EXPRESSION:
        setTotalExpression((TotalExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.SUB_EXPRESSION__TOTAL_EXPRESSION:
        setTotalExpression((TotalExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.SUB_EXPRESSION__TOTAL_EXPRESSION:
        return totalExpression != null;
    }
    return super.eIsSet(featureID);
  }

} //SubExpressionImpl
