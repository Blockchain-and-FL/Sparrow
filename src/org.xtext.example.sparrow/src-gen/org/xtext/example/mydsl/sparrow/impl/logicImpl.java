/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.sparrow.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.sparrow.MixExpression;
import org.xtext.example.mydsl.sparrow.SparrowPackage;
import org.xtext.example.mydsl.sparrow.logic;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>logic</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.logicImpl#getValueA <em>Value A</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.logicImpl#getValueB <em>Value B</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.logicImpl#getMathSymbol <em>Math Symbol</em>}</li>
 * </ul>
 *
 * @generated
 */
public class logicImpl extends TrueConditionImpl implements logic
{
  /**
   * The cached value of the '{@link #getValueA() <em>Value A</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueA()
   * @generated
   * @ordered
   */
  protected MixExpression valueA;

  /**
   * The cached value of the '{@link #getValueB() <em>Value B</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueB()
   * @generated
   * @ordered
   */
  protected MixExpression valueB;

  /**
   * The default value of the '{@link #getMathSymbol() <em>Math Symbol</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMathSymbol()
   * @generated
   * @ordered
   */
  protected static final String MATH_SYMBOL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMathSymbol() <em>Math Symbol</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMathSymbol()
   * @generated
   * @ordered
   */
  protected String mathSymbol = MATH_SYMBOL_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected logicImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SparrowPackage.Literals.LOGIC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MixExpression getValueA()
  {
    return valueA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValueA(MixExpression newValueA, NotificationChain msgs)
  {
    MixExpression oldValueA = valueA;
    valueA = newValueA;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.LOGIC__VALUE_A, oldValueA, newValueA);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueA(MixExpression newValueA)
  {
    if (newValueA != valueA)
    {
      NotificationChain msgs = null;
      if (valueA != null)
        msgs = ((InternalEObject)valueA).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.LOGIC__VALUE_A, null, msgs);
      if (newValueA != null)
        msgs = ((InternalEObject)newValueA).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.LOGIC__VALUE_A, null, msgs);
      msgs = basicSetValueA(newValueA, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.LOGIC__VALUE_A, newValueA, newValueA));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MixExpression getValueB()
  {
    return valueB;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValueB(MixExpression newValueB, NotificationChain msgs)
  {
    MixExpression oldValueB = valueB;
    valueB = newValueB;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.LOGIC__VALUE_B, oldValueB, newValueB);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueB(MixExpression newValueB)
  {
    if (newValueB != valueB)
    {
      NotificationChain msgs = null;
      if (valueB != null)
        msgs = ((InternalEObject)valueB).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.LOGIC__VALUE_B, null, msgs);
      if (newValueB != null)
        msgs = ((InternalEObject)newValueB).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.LOGIC__VALUE_B, null, msgs);
      msgs = basicSetValueB(newValueB, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.LOGIC__VALUE_B, newValueB, newValueB));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMathSymbol()
  {
    return mathSymbol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMathSymbol(String newMathSymbol)
  {
    String oldMathSymbol = mathSymbol;
    mathSymbol = newMathSymbol;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.LOGIC__MATH_SYMBOL, oldMathSymbol, mathSymbol));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SparrowPackage.LOGIC__VALUE_A:
        return basicSetValueA(null, msgs);
      case SparrowPackage.LOGIC__VALUE_B:
        return basicSetValueB(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SparrowPackage.LOGIC__VALUE_A:
        return getValueA();
      case SparrowPackage.LOGIC__VALUE_B:
        return getValueB();
      case SparrowPackage.LOGIC__MATH_SYMBOL:
        return getMathSymbol();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SparrowPackage.LOGIC__VALUE_A:
        setValueA((MixExpression)newValue);
        return;
      case SparrowPackage.LOGIC__VALUE_B:
        setValueB((MixExpression)newValue);
        return;
      case SparrowPackage.LOGIC__MATH_SYMBOL:
        setMathSymbol((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.LOGIC__VALUE_A:
        setValueA((MixExpression)null);
        return;
      case SparrowPackage.LOGIC__VALUE_B:
        setValueB((MixExpression)null);
        return;
      case SparrowPackage.LOGIC__MATH_SYMBOL:
        setMathSymbol(MATH_SYMBOL_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.LOGIC__VALUE_A:
        return valueA != null;
      case SparrowPackage.LOGIC__VALUE_B:
        return valueB != null;
      case SparrowPackage.LOGIC__MATH_SYMBOL:
        return MATH_SYMBOL_EDEFAULT == null ? mathSymbol != null : !MATH_SYMBOL_EDEFAULT.equals(mathSymbol);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (mathSymbol: ");
    result.append(mathSymbol);
    result.append(')');
    return result.toString();
  }

} //logicImpl
