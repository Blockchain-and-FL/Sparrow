/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.sparrow.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.sparrow.AndOrOperationLink;
import org.xtext.example.mydsl.sparrow.OperateLink;
import org.xtext.example.mydsl.sparrow.SparrowPackage;
import org.xtext.example.mydsl.sparrow.trueOperation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>And Or Operation Link</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.AndOrOperationLinkImpl#getLink <em>Link</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.AndOrOperationLinkImpl#getFirstOperation <em>First Operation</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.AndOrOperationLinkImpl#getLinkOperation <em>Link Operation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AndOrOperationLinkImpl extends MinimalEObjectImpl.Container implements AndOrOperationLink
{
  /**
   * The default value of the '{@link #getLink() <em>Link</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLink()
   * @generated
   * @ordered
   */
  protected static final String LINK_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLink() <em>Link</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLink()
   * @generated
   * @ordered
   */
  protected String link = LINK_EDEFAULT;

  /**
   * The cached value of the '{@link #getFirstOperation() <em>First Operation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFirstOperation()
   * @generated
   * @ordered
   */
  protected trueOperation firstOperation;

  /**
   * The cached value of the '{@link #getLinkOperation() <em>Link Operation</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLinkOperation()
   * @generated
   * @ordered
   */
  protected OperateLink linkOperation;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AndOrOperationLinkImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SparrowPackage.Literals.AND_OR_OPERATION_LINK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLink()
  {
    return link;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLink(String newLink)
  {
    String oldLink = link;
    link = newLink;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.AND_OR_OPERATION_LINK__LINK, oldLink, link));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public trueOperation getFirstOperation()
  {
    return firstOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFirstOperation(trueOperation newFirstOperation, NotificationChain msgs)
  {
    trueOperation oldFirstOperation = firstOperation;
    firstOperation = newFirstOperation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.AND_OR_OPERATION_LINK__FIRST_OPERATION, oldFirstOperation, newFirstOperation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFirstOperation(trueOperation newFirstOperation)
  {
    if (newFirstOperation != firstOperation)
    {
      NotificationChain msgs = null;
      if (firstOperation != null)
        msgs = ((InternalEObject)firstOperation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.AND_OR_OPERATION_LINK__FIRST_OPERATION, null, msgs);
      if (newFirstOperation != null)
        msgs = ((InternalEObject)newFirstOperation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.AND_OR_OPERATION_LINK__FIRST_OPERATION, null, msgs);
      msgs = basicSetFirstOperation(newFirstOperation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.AND_OR_OPERATION_LINK__FIRST_OPERATION, newFirstOperation, newFirstOperation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperateLink getLinkOperation()
  {
    if (linkOperation != null && linkOperation.eIsProxy())
    {
      InternalEObject oldLinkOperation = (InternalEObject)linkOperation;
      linkOperation = (OperateLink)eResolveProxy(oldLinkOperation);
      if (linkOperation != oldLinkOperation)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SparrowPackage.AND_OR_OPERATION_LINK__LINK_OPERATION, oldLinkOperation, linkOperation));
      }
    }
    return linkOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OperateLink basicGetLinkOperation()
  {
    return linkOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLinkOperation(OperateLink newLinkOperation)
  {
    OperateLink oldLinkOperation = linkOperation;
    linkOperation = newLinkOperation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.AND_OR_OPERATION_LINK__LINK_OPERATION, oldLinkOperation, linkOperation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SparrowPackage.AND_OR_OPERATION_LINK__FIRST_OPERATION:
        return basicSetFirstOperation(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SparrowPackage.AND_OR_OPERATION_LINK__LINK:
        return getLink();
      case SparrowPackage.AND_OR_OPERATION_LINK__FIRST_OPERATION:
        return getFirstOperation();
      case SparrowPackage.AND_OR_OPERATION_LINK__LINK_OPERATION:
        if (resolve) return getLinkOperation();
        return basicGetLinkOperation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SparrowPackage.AND_OR_OPERATION_LINK__LINK:
        setLink((String)newValue);
        return;
      case SparrowPackage.AND_OR_OPERATION_LINK__FIRST_OPERATION:
        setFirstOperation((trueOperation)newValue);
        return;
      case SparrowPackage.AND_OR_OPERATION_LINK__LINK_OPERATION:
        setLinkOperation((OperateLink)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.AND_OR_OPERATION_LINK__LINK:
        setLink(LINK_EDEFAULT);
        return;
      case SparrowPackage.AND_OR_OPERATION_LINK__FIRST_OPERATION:
        setFirstOperation((trueOperation)null);
        return;
      case SparrowPackage.AND_OR_OPERATION_LINK__LINK_OPERATION:
        setLinkOperation((OperateLink)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.AND_OR_OPERATION_LINK__LINK:
        return LINK_EDEFAULT == null ? link != null : !LINK_EDEFAULT.equals(link);
      case SparrowPackage.AND_OR_OPERATION_LINK__FIRST_OPERATION:
        return firstOperation != null;
      case SparrowPackage.AND_OR_OPERATION_LINK__LINK_OPERATION:
        return linkOperation != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (link: ");
    result.append(link);
    result.append(')');
    return result.toString();
  }

} //AndOrOperationLinkImpl
