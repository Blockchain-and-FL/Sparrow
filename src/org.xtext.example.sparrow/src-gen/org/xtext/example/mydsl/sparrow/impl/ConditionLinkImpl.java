/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.sparrow.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.sparrow.AndOrCondition;
import org.xtext.example.mydsl.sparrow.ConditionLink;
import org.xtext.example.mydsl.sparrow.SingleCondition;
import org.xtext.example.mydsl.sparrow.SingleLinkCondition;
import org.xtext.example.mydsl.sparrow.SparrowPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condition Link</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.ConditionLinkImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.ConditionLinkImpl#getConditionExpression <em>Condition Expression</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.ConditionLinkImpl#getLinkCondition <em>Link Condition</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.ConditionLinkImpl#getAndOrLink <em>And Or Link</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionLinkImpl extends MinimalEObjectImpl.Container implements ConditionLink
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getConditionExpression() <em>Condition Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionExpression()
   * @generated
   * @ordered
   */
  protected SingleCondition conditionExpression;

  /**
   * The cached value of the '{@link #getLinkCondition() <em>Link Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLinkCondition()
   * @generated
   * @ordered
   */
  protected SingleLinkCondition linkCondition;

  /**
   * The cached value of the '{@link #getAndOrLink() <em>And Or Link</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAndOrLink()
   * @generated
   * @ordered
   */
  protected EList<AndOrCondition> andOrLink;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionLinkImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SparrowPackage.Literals.CONDITION_LINK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.CONDITION_LINK__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleCondition getConditionExpression()
  {
    return conditionExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditionExpression(SingleCondition newConditionExpression, NotificationChain msgs)
  {
    SingleCondition oldConditionExpression = conditionExpression;
    conditionExpression = newConditionExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.CONDITION_LINK__CONDITION_EXPRESSION, oldConditionExpression, newConditionExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionExpression(SingleCondition newConditionExpression)
  {
    if (newConditionExpression != conditionExpression)
    {
      NotificationChain msgs = null;
      if (conditionExpression != null)
        msgs = ((InternalEObject)conditionExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.CONDITION_LINK__CONDITION_EXPRESSION, null, msgs);
      if (newConditionExpression != null)
        msgs = ((InternalEObject)newConditionExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.CONDITION_LINK__CONDITION_EXPRESSION, null, msgs);
      msgs = basicSetConditionExpression(newConditionExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.CONDITION_LINK__CONDITION_EXPRESSION, newConditionExpression, newConditionExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleLinkCondition getLinkCondition()
  {
    return linkCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLinkCondition(SingleLinkCondition newLinkCondition, NotificationChain msgs)
  {
    SingleLinkCondition oldLinkCondition = linkCondition;
    linkCondition = newLinkCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.CONDITION_LINK__LINK_CONDITION, oldLinkCondition, newLinkCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLinkCondition(SingleLinkCondition newLinkCondition)
  {
    if (newLinkCondition != linkCondition)
    {
      NotificationChain msgs = null;
      if (linkCondition != null)
        msgs = ((InternalEObject)linkCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.CONDITION_LINK__LINK_CONDITION, null, msgs);
      if (newLinkCondition != null)
        msgs = ((InternalEObject)newLinkCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.CONDITION_LINK__LINK_CONDITION, null, msgs);
      msgs = basicSetLinkCondition(newLinkCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.CONDITION_LINK__LINK_CONDITION, newLinkCondition, newLinkCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AndOrCondition> getAndOrLink()
  {
    if (andOrLink == null)
    {
      andOrLink = new EObjectContainmentEList<AndOrCondition>(AndOrCondition.class, this, SparrowPackage.CONDITION_LINK__AND_OR_LINK);
    }
    return andOrLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SparrowPackage.CONDITION_LINK__CONDITION_EXPRESSION:
        return basicSetConditionExpression(null, msgs);
      case SparrowPackage.CONDITION_LINK__LINK_CONDITION:
        return basicSetLinkCondition(null, msgs);
      case SparrowPackage.CONDITION_LINK__AND_OR_LINK:
        return ((InternalEList<?>)getAndOrLink()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SparrowPackage.CONDITION_LINK__NAME:
        return getName();
      case SparrowPackage.CONDITION_LINK__CONDITION_EXPRESSION:
        return getConditionExpression();
      case SparrowPackage.CONDITION_LINK__LINK_CONDITION:
        return getLinkCondition();
      case SparrowPackage.CONDITION_LINK__AND_OR_LINK:
        return getAndOrLink();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SparrowPackage.CONDITION_LINK__NAME:
        setName((String)newValue);
        return;
      case SparrowPackage.CONDITION_LINK__CONDITION_EXPRESSION:
        setConditionExpression((SingleCondition)newValue);
        return;
      case SparrowPackage.CONDITION_LINK__LINK_CONDITION:
        setLinkCondition((SingleLinkCondition)newValue);
        return;
      case SparrowPackage.CONDITION_LINK__AND_OR_LINK:
        getAndOrLink().clear();
        getAndOrLink().addAll((Collection<? extends AndOrCondition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.CONDITION_LINK__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SparrowPackage.CONDITION_LINK__CONDITION_EXPRESSION:
        setConditionExpression((SingleCondition)null);
        return;
      case SparrowPackage.CONDITION_LINK__LINK_CONDITION:
        setLinkCondition((SingleLinkCondition)null);
        return;
      case SparrowPackage.CONDITION_LINK__AND_OR_LINK:
        getAndOrLink().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.CONDITION_LINK__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SparrowPackage.CONDITION_LINK__CONDITION_EXPRESSION:
        return conditionExpression != null;
      case SparrowPackage.CONDITION_LINK__LINK_CONDITION:
        return linkCondition != null;
      case SparrowPackage.CONDITION_LINK__AND_OR_LINK:
        return andOrLink != null && !andOrLink.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ConditionLinkImpl
