/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.sparrow.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.sparrow.MixExpression;
import org.xtext.example.mydsl.sparrow.SparrowPackage;
import org.xtext.example.mydsl.sparrow.changeString;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>change String</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.changeStringImpl#getChangeThing <em>Change Thing</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.changeStringImpl#getChangeResult <em>Change Result</em>}</li>
 * </ul>
 *
 * @generated
 */
public class changeStringImpl extends changeExpressionImpl implements changeString
{
  /**
   * The cached value of the '{@link #getChangeThing() <em>Change Thing</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChangeThing()
   * @generated
   * @ordered
   */
  protected MixExpression changeThing;

  /**
   * The cached value of the '{@link #getChangeResult() <em>Change Result</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChangeResult()
   * @generated
   * @ordered
   */
  protected MixExpression changeResult;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected changeStringImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SparrowPackage.Literals.CHANGE_STRING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MixExpression getChangeThing()
  {
    return changeThing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChangeThing(MixExpression newChangeThing, NotificationChain msgs)
  {
    MixExpression oldChangeThing = changeThing;
    changeThing = newChangeThing;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.CHANGE_STRING__CHANGE_THING, oldChangeThing, newChangeThing);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setChangeThing(MixExpression newChangeThing)
  {
    if (newChangeThing != changeThing)
    {
      NotificationChain msgs = null;
      if (changeThing != null)
        msgs = ((InternalEObject)changeThing).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.CHANGE_STRING__CHANGE_THING, null, msgs);
      if (newChangeThing != null)
        msgs = ((InternalEObject)newChangeThing).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.CHANGE_STRING__CHANGE_THING, null, msgs);
      msgs = basicSetChangeThing(newChangeThing, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.CHANGE_STRING__CHANGE_THING, newChangeThing, newChangeThing));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MixExpression getChangeResult()
  {
    return changeResult;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChangeResult(MixExpression newChangeResult, NotificationChain msgs)
  {
    MixExpression oldChangeResult = changeResult;
    changeResult = newChangeResult;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.CHANGE_STRING__CHANGE_RESULT, oldChangeResult, newChangeResult);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setChangeResult(MixExpression newChangeResult)
  {
    if (newChangeResult != changeResult)
    {
      NotificationChain msgs = null;
      if (changeResult != null)
        msgs = ((InternalEObject)changeResult).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.CHANGE_STRING__CHANGE_RESULT, null, msgs);
      if (newChangeResult != null)
        msgs = ((InternalEObject)newChangeResult).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.CHANGE_STRING__CHANGE_RESULT, null, msgs);
      msgs = basicSetChangeResult(newChangeResult, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.CHANGE_STRING__CHANGE_RESULT, newChangeResult, newChangeResult));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SparrowPackage.CHANGE_STRING__CHANGE_THING:
        return basicSetChangeThing(null, msgs);
      case SparrowPackage.CHANGE_STRING__CHANGE_RESULT:
        return basicSetChangeResult(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SparrowPackage.CHANGE_STRING__CHANGE_THING:
        return getChangeThing();
      case SparrowPackage.CHANGE_STRING__CHANGE_RESULT:
        return getChangeResult();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SparrowPackage.CHANGE_STRING__CHANGE_THING:
        setChangeThing((MixExpression)newValue);
        return;
      case SparrowPackage.CHANGE_STRING__CHANGE_RESULT:
        setChangeResult((MixExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.CHANGE_STRING__CHANGE_THING:
        setChangeThing((MixExpression)null);
        return;
      case SparrowPackage.CHANGE_STRING__CHANGE_RESULT:
        setChangeResult((MixExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.CHANGE_STRING__CHANGE_THING:
        return changeThing != null;
      case SparrowPackage.CHANGE_STRING__CHANGE_RESULT:
        return changeResult != null;
    }
    return super.eIsSet(featureID);
  }

} //changeStringImpl
