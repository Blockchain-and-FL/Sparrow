/**
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.sparrow.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.sparrow.AndOrCondition;
import org.xtext.example.mydsl.sparrow.SingleCondition;
import org.xtext.example.mydsl.sparrow.SingleLinkCondition;
import org.xtext.example.mydsl.sparrow.SparrowPackage;
import org.xtext.example.mydsl.sparrow.TotalCondition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Total Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.TotalConditionImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.TotalConditionImpl#getLinkCondition <em>Link Condition</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sparrow.impl.TotalConditionImpl#getAndorcondition <em>Andorcondition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TotalConditionImpl extends MinimalEObjectImpl.Container implements TotalCondition
{
  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected SingleCondition condition;

  /**
   * The cached value of the '{@link #getLinkCondition() <em>Link Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLinkCondition()
   * @generated
   * @ordered
   */
  protected SingleLinkCondition linkCondition;

  /**
   * The cached value of the '{@link #getAndorcondition() <em>Andorcondition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAndorcondition()
   * @generated
   * @ordered
   */
  protected EList<AndOrCondition> andorcondition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TotalConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SparrowPackage.Literals.TOTAL_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleCondition getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(SingleCondition newCondition, NotificationChain msgs)
  {
    SingleCondition oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.TOTAL_CONDITION__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(SingleCondition newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.TOTAL_CONDITION__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.TOTAL_CONDITION__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.TOTAL_CONDITION__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleLinkCondition getLinkCondition()
  {
    return linkCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLinkCondition(SingleLinkCondition newLinkCondition, NotificationChain msgs)
  {
    SingleLinkCondition oldLinkCondition = linkCondition;
    linkCondition = newLinkCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SparrowPackage.TOTAL_CONDITION__LINK_CONDITION, oldLinkCondition, newLinkCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLinkCondition(SingleLinkCondition newLinkCondition)
  {
    if (newLinkCondition != linkCondition)
    {
      NotificationChain msgs = null;
      if (linkCondition != null)
        msgs = ((InternalEObject)linkCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.TOTAL_CONDITION__LINK_CONDITION, null, msgs);
      if (newLinkCondition != null)
        msgs = ((InternalEObject)newLinkCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SparrowPackage.TOTAL_CONDITION__LINK_CONDITION, null, msgs);
      msgs = basicSetLinkCondition(newLinkCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SparrowPackage.TOTAL_CONDITION__LINK_CONDITION, newLinkCondition, newLinkCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AndOrCondition> getAndorcondition()
  {
    if (andorcondition == null)
    {
      andorcondition = new EObjectContainmentEList<AndOrCondition>(AndOrCondition.class, this, SparrowPackage.TOTAL_CONDITION__ANDORCONDITION);
    }
    return andorcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SparrowPackage.TOTAL_CONDITION__CONDITION:
        return basicSetCondition(null, msgs);
      case SparrowPackage.TOTAL_CONDITION__LINK_CONDITION:
        return basicSetLinkCondition(null, msgs);
      case SparrowPackage.TOTAL_CONDITION__ANDORCONDITION:
        return ((InternalEList<?>)getAndorcondition()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SparrowPackage.TOTAL_CONDITION__CONDITION:
        return getCondition();
      case SparrowPackage.TOTAL_CONDITION__LINK_CONDITION:
        return getLinkCondition();
      case SparrowPackage.TOTAL_CONDITION__ANDORCONDITION:
        return getAndorcondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SparrowPackage.TOTAL_CONDITION__CONDITION:
        setCondition((SingleCondition)newValue);
        return;
      case SparrowPackage.TOTAL_CONDITION__LINK_CONDITION:
        setLinkCondition((SingleLinkCondition)newValue);
        return;
      case SparrowPackage.TOTAL_CONDITION__ANDORCONDITION:
        getAndorcondition().clear();
        getAndorcondition().addAll((Collection<? extends AndOrCondition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.TOTAL_CONDITION__CONDITION:
        setCondition((SingleCondition)null);
        return;
      case SparrowPackage.TOTAL_CONDITION__LINK_CONDITION:
        setLinkCondition((SingleLinkCondition)null);
        return;
      case SparrowPackage.TOTAL_CONDITION__ANDORCONDITION:
        getAndorcondition().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SparrowPackage.TOTAL_CONDITION__CONDITION:
        return condition != null;
      case SparrowPackage.TOTAL_CONDITION__LINK_CONDITION:
        return linkCondition != null;
      case SparrowPackage.TOTAL_CONDITION__ANDORCONDITION:
        return andorcondition != null && !andorcondition.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TotalConditionImpl
