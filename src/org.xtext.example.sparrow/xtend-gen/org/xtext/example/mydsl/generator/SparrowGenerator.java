/**
 * generated by Xtext 2.28.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.example.mydsl.sparrow.AdditionExpression;
import org.xtext.example.mydsl.sparrow.Address;
import org.xtext.example.mydsl.sparrow.AllNumber;
import org.xtext.example.mydsl.sparrow.AndOrCondition;
import org.xtext.example.mydsl.sparrow.AndOrOperationLink;
import org.xtext.example.mydsl.sparrow.BeforePoint;
import org.xtext.example.mydsl.sparrow.CompareString;
import org.xtext.example.mydsl.sparrow.Condition;
import org.xtext.example.mydsl.sparrow.ConditionLink;
import org.xtext.example.mydsl.sparrow.ContractMessage;
import org.xtext.example.mydsl.sparrow.Duration;
import org.xtext.example.mydsl.sparrow.ElseExpression;
import org.xtext.example.mydsl.sparrow.ExclusiveExpression;
import org.xtext.example.mydsl.sparrow.FailResult;
import org.xtext.example.mydsl.sparrow.FloatExpression;
import org.xtext.example.mydsl.sparrow.GetPeriodExpression;
import org.xtext.example.mydsl.sparrow.Group;
import org.xtext.example.mydsl.sparrow.Initialize;
import org.xtext.example.mydsl.sparrow.ManyRuleExpression;
import org.xtext.example.mydsl.sparrow.Message;
import org.xtext.example.mydsl.sparrow.MixExpression;
import org.xtext.example.mydsl.sparrow.Model;
import org.xtext.example.mydsl.sparrow.Now;
import org.xtext.example.mydsl.sparrow.ObjectExpress;
import org.xtext.example.mydsl.sparrow.ObjectExpression;
import org.xtext.example.mydsl.sparrow.OperateLink;
import org.xtext.example.mydsl.sparrow.Operation;
import org.xtext.example.mydsl.sparrow.OtherExpression;
import org.xtext.example.mydsl.sparrow.OtherMixExpression;
import org.xtext.example.mydsl.sparrow.ParallelExpression;
import org.xtext.example.mydsl.sparrow.PeriodExpression;
import org.xtext.example.mydsl.sparrow.PersonExpression;
import org.xtext.example.mydsl.sparrow.RegularExpression;
import org.xtext.example.mydsl.sparrow.RegularRuleExpression;
import org.xtext.example.mydsl.sparrow.Require;
import org.xtext.example.mydsl.sparrow.Right;
import org.xtext.example.mydsl.sparrow.RuleExpression;
import org.xtext.example.mydsl.sparrow.RuleStructure;
import org.xtext.example.mydsl.sparrow.RuleTimeExpression;
import org.xtext.example.mydsl.sparrow.SingleCondition;
import org.xtext.example.mydsl.sparrow.SingleExpression;
import org.xtext.example.mydsl.sparrow.SingleLinkCondition;
import org.xtext.example.mydsl.sparrow.StringExpression;
import org.xtext.example.mydsl.sparrow.SubExpression;
import org.xtext.example.mydsl.sparrow.Subject;
import org.xtext.example.mydsl.sparrow.SubjectExpress;
import org.xtext.example.mydsl.sparrow.SubjectExpression;
import org.xtext.example.mydsl.sparrow.ThenOperation;
import org.xtext.example.mydsl.sparrow.ThingExpression;
import org.xtext.example.mydsl.sparrow.ThisBoolean;
import org.xtext.example.mydsl.sparrow.ThisDate;
import org.xtext.example.mydsl.sparrow.ThisDecimal;
import org.xtext.example.mydsl.sparrow.ThisString;
import org.xtext.example.mydsl.sparrow.TimeSub;
import org.xtext.example.mydsl.sparrow.Timepoint;
import org.xtext.example.mydsl.sparrow.TotalCondition;
import org.xtext.example.mydsl.sparrow.TotalOperation;
import org.xtext.example.mydsl.sparrow.TrueCondition;
import org.xtext.example.mydsl.sparrow.Value;
import org.xtext.example.mydsl.sparrow.WithinPoint;
import org.xtext.example.mydsl.sparrow.changeAddress;
import org.xtext.example.mydsl.sparrow.changeContract;
import org.xtext.example.mydsl.sparrow.changeExpression;
import org.xtext.example.mydsl.sparrow.changeOther;
import org.xtext.example.mydsl.sparrow.changeRule;
import org.xtext.example.mydsl.sparrow.changeString;
import org.xtext.example.mydsl.sparrow.checkExpression;
import org.xtext.example.mydsl.sparrow.everyMessage;
import org.xtext.example.mydsl.sparrow.initExpressiono;
import org.xtext.example.mydsl.sparrow.initExpressions;
import org.xtext.example.mydsl.sparrow.isDone;
import org.xtext.example.mydsl.sparrow.isTime;
import org.xtext.example.mydsl.sparrow.isTrue;
import org.xtext.example.mydsl.sparrow.keyvalue;
import org.xtext.example.mydsl.sparrow.logic;
import org.xtext.example.mydsl.sparrow.messageExpression;
import org.xtext.example.mydsl.sparrow.otherchange;
import org.xtext.example.mydsl.sparrow.setDateExpression;
import org.xtext.example.mydsl.sparrow.transferExpression;
import org.xtext.example.mydsl.sparrow.trueOperation;
import org.xtext.example.mydsl.sparrow.url;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SparrowGenerator extends AbstractGenerator {
  private int time = 1;

  private int con = 1;

  private int exclu = 1;

  @Override
  public void doGenerate(final Resource res, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Model> _filter = Iterables.<Model>filter(IteratorExtensions.<EObject>toIterable(res.getAllContents()), Model.class);
    for (final Model e : _filter) {
      {
        final LocalDateTime currentDateTime1 = LocalDateTime.now();
        String _name = e.getName();
        String _plus = ("sparrow2solidity/" + _name);
        String _plus_1 = (_plus + ".sol");
        fsa.generateFile(_plus_1, 
          this.compileSolidity(e));
        String _name_1 = e.getName();
        String _plus_2 = ("sparrow2go/" + _name_1);
        String _plus_3 = (_plus_2 + ".go");
        fsa.generateFile(_plus_3, 
          this.compileGo(e));
        final LocalDateTime currentDateTime2 = LocalDateTime.now();
        final long duration = ChronoUnit.MILLIS.between(currentDateTime1, currentDateTime2);
        String _name_2 = e.getName();
        String _plus_4 = (_name_2 + ": ");
        String _plus_5 = (_plus_4 + Long.valueOf(duration));
        InputOutput.<String>println(_plus_5);
      }
    }
  }

  public CharSequence compileGo(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package main");
    _builder.newLine();
    _builder.append("import (");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"encoding/json\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"fmt\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"log\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"strings\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"time\"");
    _builder.newLine();
    {
      EList<String> _packageName = model.getPackageName();
      for(final String name : _packageName) {
        _builder.append("\t");
        _builder.append("import \"");
        _builder.append(name, "\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"github.com/hyperledger/fabric-contract-api-go/contractapi\"");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.append("type ");
    String _name = model.getName();
    _builder.append(_name);
    _builder.append(" struct {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("contractapi.Contract");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("functionStatus map[string]bool");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("functionFinishTime map[string]int");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("contractState string");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    {
      EList<Subject> _subjects = model.getSubjects();
      for(final Subject subject : _subjects) {
        CharSequence _compileSubjectGo = this.compileSubjectGo(subject);
        _builder.append(_compileSubjectGo);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      EList<org.xtext.example.mydsl.sparrow.Object> _objects = model.getObjects();
      for(final org.xtext.example.mydsl.sparrow.Object object : _objects) {
        CharSequence _compileObjectGo = this.compileObjectGo(object);
        _builder.append(_compileObjectGo);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      ContractMessage _contractMessage = model.getContractMessage();
      boolean _tripleNotEquals = (_contractMessage != null);
      if (_tripleNotEquals) {
        CharSequence _compileMessageGo = this.compileMessageGo(model.getContractMessage());
        _builder.append(_compileMessageGo);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("func (s *SmartContract) Init(ctx contractapi.TransactionContextInterface) error {");
    _builder.newLine();
    {
      Initialize _initialize = model.getInitialize();
      boolean _tripleNotEquals_1 = (_initialize != null);
      if (_tripleNotEquals_1) {
        CharSequence _compileInitGo = this.compileInitGo(model.getInitialize());
        _builder.append(_compileInitGo);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      EList<Group> _group = model.getGroup();
      for(final Group group : _group) {
        String _compileGroupGo = this.compileGroupGo(group);
        _builder.append(_compileGroupGo);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      ContractMessage _contractMessage_1 = model.getContractMessage();
      boolean _tripleNotEquals_2 = (_contractMessage_1 != null);
      if (_tripleNotEquals_2) {
        CharSequence _compileMessageGo2 = this.compileMessageGo2(model.getContractMessage());
        _builder.append(_compileMessageGo2);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      Operation _operations = model.getOperations();
      boolean _tripleNotEquals_3 = (_operations != null);
      if (_tripleNotEquals_3) {
        String _compileOperationGo = this.compileOperationGo(model.getOperations());
        _builder.append(_compileOperationGo);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Condition _conditions = model.getConditions();
      boolean _tripleNotEquals_4 = (_conditions != null);
      if (_tripleNotEquals_4) {
        String _compileConditionGo = this.compileConditionGo(model.getConditions());
        _builder.append(_compileConditionGo);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      RuleStructure _ruleStructures = model.getRuleStructures();
      boolean _tripleNotEquals_5 = (_ruleStructures != null);
      if (_tripleNotEquals_5) {
        CharSequence _compileRuleGo = this.compileRuleGo(model.getRuleStructures());
        _builder.append(_compileRuleGo);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Require _require = model.getRequire();
      boolean _tripleNotEquals_6 = (_require != null);
      if (_tripleNotEquals_6) {
        CharSequence _compileRequireGo = this.compileRequireGo(model.getRequire());
        _builder.append(_compileRequireGo);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("// changeRule 方法用于更新 functionStatus 和 functionFinishTime 的值");
    _builder.newLine();
    _builder.append("func changeRule(expressionName string) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// 更新 functionStatus");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("functionStatus[expressionName] = true");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// 更新 functionFinishTime");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("functionFinishTime[expressionName] = time.Now().UTC()");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("func onlyState(State string) bool {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if compareStrings(State, \"start\") || compareStrings(State, \"restart\") ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else return false");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("func onlySomeone(s Person) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//如何限制角色对功能的调用？");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//好像也是要链接外部？");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("func main() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// 初始化Contract结构体的map变量");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("contract := &SimpleContract{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("functionStatus: make(map[string]bool),");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("functionFinishTime: make(map[string]int), ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ContractState: \"start\",");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// 启动Fabric链码服务");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("cc, err := contractapi.NewChaincode(contract)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if err != nil {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fmt.Printf(\"Error starting SimpleContract chaincode: %v\\n\", err)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if err := cc.Start(); err != nil {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fmt.Printf(\"Error starting SimpleContract chaincode: %v\\n\", err)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<ManyRuleExpression> _manyRuleExpression = model.getRuleStructures().getManyRuleExpression();
      for(final ManyRuleExpression i : _manyRuleExpression) {
        CharSequence _compileManyRuleGo = this.compileManyRuleGo(i);
        _builder.append(_compileManyRuleGo);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public String compileGroupGo(final Group group) {
    String string1 = "";
    boolean first = true;
    EList<initExpressions> _value = group.getValue();
    for (final initExpressions i : _value) {
      if ((!first)) {
        String _string1 = string1;
        String _name = i.getName();
        String _plus = ("," + _name);
        string1 = (_string1 + _plus);
      } else {
        String _string1_1 = string1;
        String _name_1 = i.getName();
        string1 = (_string1_1 + _name_1);
        first = false;
      }
    }
    String _name_2 = group.getName();
    String _plus_1 = (_name_2 + ":= []");
    String _name_3 = group.getSubtype().getName();
    String _plus_2 = (_plus_1 + _name_3);
    String _plus_3 = (_plus_2 + "{");
    String _plus_4 = (_plus_3 + string1);
    String _plus_5 = (_plus_4 + "}");
    string1 = _plus_5;
    return string1;
  }

  public CharSequence compileSubjectGo(final Subject subject) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type ");
    String _name = subject.getName();
    _builder.append(_name);
    _builder.append(" struct {");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("MSPID  string `json:\"MSPID\"`");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Name   string `json:\"name\"`");
    _builder.newLine();
    {
      String _type = subject.getType();
      boolean _equals = Objects.equal(_type, "CA");
      if (_equals) {
        _builder.append("Key  int `json:\"key\"`");
        _builder.newLine();
        _builder.append("Year   int `json:\"year\"`");
        _builder.newLine();
      }
    }
    {
      SubjectExpression _subjectExpression = subject.getSubjectExpression();
      boolean _tripleNotEquals = (_subjectExpression != null);
      if (_tripleNotEquals) {
        CharSequence _compileSubjectExpressionGo = this.compileSubjectExpressionGo(subject.getSubjectExpression());
        _builder.append(_compileSubjectExpressionGo);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence compileSubjectExpressionGo(final SubjectExpression SuE) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<keyvalue> _keyValue = SuE.getKeyValue();
      for(final keyvalue key : _keyValue) {
        {
          String _type = key.getType();
          boolean _equals = Objects.equal(_type, "fixed");
          if (_equals) {
            String _firstUpper = StringExtensions.toFirstUpper(key.getName());
            _builder.append(_firstUpper);
            _builder.append("\tfloat `json:\"");
            String _name = key.getName();
            _builder.append(_name);
            _builder.append("\"`");
            _builder.newLineIfNotEmpty();
          } else {
            String _type_1 = key.getType();
            boolean _equals_1 = Objects.equal(_type_1, "date");
            if (_equals_1) {
              String _firstUpper_1 = StringExtensions.toFirstUpper(key.getName());
              _builder.append(_firstUpper_1);
              _builder.append("\tstring `json:\"");
              String _name_1 = key.getName();
              _builder.append(_name_1);
              _builder.append("\"`");
              _builder.newLineIfNotEmpty();
            } else {
              String _firstUpper_2 = StringExtensions.toFirstUpper(key.getName());
              _builder.append(_firstUpper_2);
              _builder.append(" ");
              String _type_2 = key.getType();
              _builder.append(_type_2);
              _builder.append(" `json:\"");
              String _name_2 = key.getName();
              _builder.append(_name_2);
              _builder.append("\"`");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }

  public CharSequence compileObjectGo(final org.xtext.example.mydsl.sparrow.Object object) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type ");
    String _name = object.getName();
    _builder.append(_name);
    _builder.append(" struct {");
    _builder.newLineIfNotEmpty();
    {
      ObjectExpression _objectExpression = object.getObjectExpression();
      boolean _tripleNotEquals = (_objectExpression != null);
      if (_tripleNotEquals) {
        CharSequence _compileObjectExpressionGo = this.compileObjectExpressionGo(object.getObjectExpression());
        _builder.append(_compileObjectExpressionGo);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence compileObjectExpressionGo(final ObjectExpression ObE) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<keyvalue> _keyValue = ObE.getKeyValue();
      for(final keyvalue key : _keyValue) {
        {
          String _type = key.getType();
          boolean _equals = Objects.equal(_type, "fixed");
          if (_equals) {
            String _firstUpper = StringExtensions.toFirstUpper(key.getName());
            _builder.append(_firstUpper);
            _builder.append("\tfloat `json:\"");
            String _name = key.getName();
            _builder.append(_name);
            _builder.append("\"`");
            _builder.newLineIfNotEmpty();
          } else {
            String _type_1 = key.getType();
            boolean _equals_1 = Objects.equal(_type_1, "date");
            if (_equals_1) {
              String _firstUpper_1 = StringExtensions.toFirstUpper(key.getName());
              _builder.append(_firstUpper_1);
              _builder.append("\tstring `json:\"");
              String _name_1 = key.getName();
              _builder.append(_name_1);
              _builder.append("\"`");
              _builder.newLineIfNotEmpty();
            } else {
              String _firstUpper_2 = StringExtensions.toFirstUpper(key.getName());
              _builder.append(_firstUpper_2);
              _builder.append(" ");
              String _type_2 = key.getType();
              _builder.append(_type_2);
              _builder.append(" `json:\"");
              String _name_2 = key.getName();
              _builder.append(_name_2);
              _builder.append("\"`");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }

  public CharSequence compileMessageGo(final ContractMessage message) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type ContractMessage struct{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Status string `json:\"status\"`");
    _builder.newLine();
    {
      EList<Message> _message = message.getMessage();
      for(final Message key : _message) {
        {
          String _type = key.getType().getType();
          boolean _equals = Objects.equal(_type, "fixed");
          if (_equals) {
            _builder.append("\t");
            String _firstUpper = StringExtensions.toFirstUpper(key.getType().getName());
            _builder.append(_firstUpper, "\t");
            _builder.append(" float `json:\"");
            String _name = key.getType().getName();
            _builder.append(_name, "\t");
            _builder.append("\"`");
            _builder.newLineIfNotEmpty();
          } else {
            keyvalue _type_1 = key.getType();
            boolean _equals_1 = Objects.equal(_type_1, "date");
            if (_equals_1) {
              _builder.append("\t");
              String _firstUpper_1 = StringExtensions.toFirstUpper(key.getType().getName());
              _builder.append(_firstUpper_1, "\t");
              _builder.append(" string `json:\"");
              String _name_1 = key.getType().getName();
              _builder.append(_name_1, "\t");
              _builder.append("\"`");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              String _firstUpper_2 = StringExtensions.toFirstUpper(key.getType().getName());
              _builder.append(_firstUpper_2, "\t");
              _builder.append(" ");
              String _type_2 = key.getType().getType();
              _builder.append(_type_2, "\t");
              _builder.append(" `json:\"");
              String _name_2 = key.getType().getName();
              _builder.append(_name_2, "\t");
              _builder.append("\"`");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence compileMessageGo2(final ContractMessage message) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("contractMessage := ContractMessage{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Status: \"start\",");
    _builder.newLine();
    {
      EList<Message> _message = message.getMessage();
      for(final Message key : _message) {
        _builder.append("\t");
        String _firstUpper = StringExtensions.toFirstUpper(key.getType().getName());
        _builder.append(_firstUpper, "\t");
        _builder.append(": ");
        Object _compilevalue = this.compilevalue(key.getValue());
        _builder.append(_compilevalue, "\t");
        _builder.append(" ,");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence compileInitGo(final Initialize init) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<initExpressions> _inits = init.getInits();
      for(final initExpressions sinit : _inits) {
        String _name = sinit.getName();
        _builder.append(_name);
        _builder.append(" := ");
        String _name_1 = sinit.getSubtype().getName();
        _builder.append(_name_1);
        _builder.append("{");
        String _compileSinitGo = this.compileSinitGo(sinit);
        _builder.append(_compileSinitGo);
        _builder.append("}");
        _builder.newLineIfNotEmpty();
        String _name_2 = sinit.getName();
        _builder.append(_name_2);
        _builder.append("JSON, _ := json.Marshal(");
        String _name_3 = sinit.getName();
        _builder.append(_name_3);
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("err := ctx.GetStub().PutState(\"");
        String _name_4 = sinit.getName();
        _builder.append(_name_4);
        _builder.append("\", ");
        String _name_5 = sinit.getName();
        _builder.append(_name_5);
        _builder.append("JSON)");
        _builder.newLineIfNotEmpty();
        _builder.append("if err != nil {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("return fmt.Errorf(\"failed to put ");
        String _name_6 = sinit.getName();
        _builder.append(_name_6, "\t");
        _builder.append(" to world state. %v\", err)");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      EList<initExpressiono> _inito = init.getInito();
      for(final initExpressiono oinit : _inito) {
        String _name_7 = oinit.getName();
        _builder.append(_name_7);
        _builder.append(" := ");
        String _name_8 = oinit.getObtype().getName();
        _builder.append(_name_8);
        _builder.append("{");
        String _compileOinitGo = this.compileOinitGo(oinit);
        _builder.append(_compileOinitGo);
        _builder.append("}");
        _builder.newLineIfNotEmpty();
        String _name_9 = oinit.getName();
        _builder.append(_name_9);
        _builder.append("JSON, _ := json.Marshal(");
        String _name_10 = oinit.getName();
        _builder.append(_name_10);
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("err := ctx.GetStub().PutState(\"");
        String _name_11 = oinit.getName();
        _builder.append(_name_11);
        _builder.append("\", ");
        String _name_12 = oinit.getName();
        _builder.append(_name_12);
        _builder.append("JSON)");
        _builder.newLineIfNotEmpty();
        _builder.append("if err != nil {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("return fmt.Errorf(\"failed to put ");
        String _name_13 = oinit.getName();
        _builder.append(_name_13, "\t");
        _builder.append(" to world state. %v\", err)");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }

  public String compileOinitGo(final initExpressiono expressiono) {
    final int length = expressiono.getValue().size();
    String valueString = "";
    for (int i = 0; (i < length); i++) {
      String _valueString = valueString;
      String _firstUpper = StringExtensions.toFirstUpper(expressiono.getObtype().getObjectExpression().getKeyValue().get(i).getName());
      String _plus = (_firstUpper + ":");
      Object _compilevalue = this.compilevalue(expressiono.getValue().get(i));
      String _plus_1 = (_plus + _compilevalue);
      String _plus_2 = (_plus_1 + ",");
      valueString = (_valueString + _plus_2);
    }
    return valueString;
  }

  public String compileSinitGo(final initExpressions expressions) {
    final int length = expressions.getValue().size();
    String valueString = "";
    String _type = expressions.getSubtype().getType();
    boolean _equals = Objects.equal(_type, "CA");
    if (_equals) {
      for (int i = 0; (i < length); i++) {
        {
          if ((i == 0)) {
            String _valueString = valueString;
            Object _compilevalue = this.compilevalue(expressions.getValue().get(i));
            String _plus = ("Name:" + _compilevalue);
            String _plus_1 = (_plus + ",");
            valueString = (_valueString + _plus_1);
          }
          if ((i == 1)) {
            String _valueString_1 = valueString;
            Object _compilevalue_1 = this.compilevalue(expressions.getValue().get(i));
            String _plus_2 = ("MSPID:" + _compilevalue_1);
            String _plus_3 = (_plus_2 + ",");
            valueString = (_valueString_1 + _plus_3);
          }
          if ((i == 2)) {
            String _valueString_2 = valueString;
            Object _compilevalue_2 = this.compilevalue(expressions.getValue().get(i));
            String _plus_4 = ("Year:" + _compilevalue_2);
            String _plus_5 = (_plus_4 + ",");
            valueString = (_valueString_2 + _plus_5);
          }
          if ((i == 3)) {
            String _valueString_3 = valueString;
            Object _compilevalue_3 = this.compilevalue(expressions.getValue().get(i));
            String _plus_6 = ("Key:" + _compilevalue_3);
            String _plus_7 = (_plus_6 + ",");
            valueString = (_valueString_3 + _plus_7);
          } else {
            if ((length > 4)) {
              String _valueString_4 = valueString;
              String _firstUpper = StringExtensions.toFirstUpper(expressions.getSubtype().getSubjectExpression().getKeyValue().get((i - 4)).getName());
              String _plus_8 = (_firstUpper + ":");
              Object _compilevalue_4 = this.compilevalue(expressions.getValue().get(i));
              String _plus_9 = (_plus_8 + _compilevalue_4);
              String _plus_10 = (_plus_9 + ",");
              valueString = (_valueString_4 + _plus_10);
            }
          }
        }
      }
    } else {
      for (int i = 0; (i < length); i++) {
        {
          if ((i == 0)) {
            String _valueString = valueString;
            Object _compilevalue = this.compilevalue(expressions.getValue().get(i));
            String _plus = ("Name:" + _compilevalue);
            String _plus_1 = (_plus + ",");
            valueString = (_valueString + _plus_1);
          }
          if ((i == 1)) {
            String _valueString_1 = valueString;
            Object _compilevalue_1 = this.compilevalue(expressions.getValue().get(i));
            String _plus_2 = ("MSPID:" + _compilevalue_1);
            String _plus_3 = (_plus_2 + ",");
            valueString = (_valueString_1 + _plus_3);
          } else {
            if ((length > 2)) {
              String _valueString_2 = valueString;
              String _firstUpper = StringExtensions.toFirstUpper(expressions.getSubtype().getSubjectExpression().getKeyValue().get((i - 2)).getName());
              String _plus_4 = (_firstUpper + ":");
              Object _compilevalue_2 = this.compilevalue(expressions.getValue().get(i));
              String _plus_5 = (_plus_4 + _compilevalue_2);
              String _plus_6 = (_plus_5 + ",");
              valueString = (_valueString_2 + _plus_6);
            }
          }
        }
      }
    }
    return valueString;
  }

  public String compileConditionGo(final Condition condition) {
    StringConcatenation _builder = new StringConcatenation();
    String myString = _builder.toString();
    EList<ConditionLink> _conditions = condition.getConditions();
    for (final ConditionLink everycondition : _conditions) {
      {
        String _name = everycondition.getName();
        String _plus = ("func (s *SmartContract) " + _name);
        String string1 = (_plus + "(ctx contractapi.TransactionContextInterface) bool {");
        String string2 = "";
        SingleCondition _conditionExpression = everycondition.getConditionExpression();
        boolean _tripleNotEquals = (_conditionExpression != null);
        if (_tripleNotEquals) {
          String _no = everycondition.getConditionExpression().getNo();
          boolean _tripleNotEquals_1 = (_no != null);
          if (_tripleNotEquals_1) {
            Object _compileTrueCondition = this.compileTrueCondition(everycondition.getConditionExpression().getCondition());
            String _plus_1 = (("if (" + "!") + _compileTrueCondition);
            string2 = _plus_1;
          } else {
            Object _compileTrueCondition_1 = this.compileTrueCondition(everycondition.getConditionExpression().getCondition());
            String _plus_2 = ("if (" + _compileTrueCondition_1);
            string2 = _plus_2;
          }
        } else {
          SingleLinkCondition _linkCondition = everycondition.getLinkCondition();
          boolean _tripleNotEquals_2 = (_linkCondition != null);
          if (_tripleNotEquals_2) {
            String _no_1 = everycondition.getLinkCondition().getNo();
            boolean _tripleNotEquals_3 = (_no_1 != null);
            if (_tripleNotEquals_3) {
              String _name_1 = everycondition.getLinkCondition().getLinkCondition().getName();
              String _plus_3 = (("if (" + "!") + _name_1);
              String _plus_4 = (_plus_3 + "(ctx)");
              string2 = _plus_4;
            } else {
              String _name_2 = everycondition.getLinkCondition().getLinkCondition().getName();
              String _plus_5 = ("if (" + _name_2);
              String _plus_6 = (_plus_5 + "(ctx)");
              string2 = _plus_6;
            }
          }
        }
        EList<AndOrCondition> _andOrLink = everycondition.getAndOrLink();
        for (final AndOrCondition everylink : _andOrLink) {
          {
            String _link = everylink.getLink();
            boolean _equals = Objects.equal(_link, "and");
            if (_equals) {
              SingleCondition _condition = everylink.getCondition();
              boolean _tripleNotEquals_4 = (_condition != null);
              if (_tripleNotEquals_4) {
                String _no_2 = everylink.getCondition().getNo();
                boolean _tripleNotEquals_5 = (_no_2 != null);
                if (_tripleNotEquals_5) {
                  String _string2 = string2;
                  Object _compileTrueCondition_2 = this.compileTrueCondition(everylink.getCondition().getCondition());
                  String _plus_7 = (("&&" + " !") + _compileTrueCondition_2);
                  string2 = (_string2 + _plus_7);
                } else {
                  String _string2_1 = string2;
                  Object _compileTrueCondition_3 = this.compileTrueCondition(everylink.getCondition().getCondition());
                  String _plus_8 = ("&&" + _compileTrueCondition_3);
                  string2 = (_string2_1 + _plus_8);
                }
              }
              SingleLinkCondition _linkCondition_1 = everylink.getLinkCondition();
              boolean _tripleNotEquals_6 = (_linkCondition_1 != null);
              if (_tripleNotEquals_6) {
                String _no_3 = everylink.getLinkCondition().getNo();
                boolean _tripleNotEquals_7 = (_no_3 != null);
                if (_tripleNotEquals_7) {
                  String _string2_2 = string2;
                  String _name_3 = everylink.getLinkCondition().getLinkCondition().getName();
                  String _plus_9 = (("&&" + " !") + _name_3);
                  String _plus_10 = (_plus_9 + "(ctx)");
                  string2 = (_string2_2 + _plus_10);
                } else {
                  String _string2_3 = string2;
                  String _name_4 = everylink.getLinkCondition().getLinkCondition().getName();
                  String _plus_11 = ("&&" + _name_4);
                  String _plus_12 = (_plus_11 + "(ctx)");
                  string2 = (_string2_3 + _plus_12);
                }
              }
            } else {
              String _link_1 = everylink.getLink();
              boolean _equals_1 = Objects.equal(_link_1, "or");
              if (_equals_1) {
                String _no_4 = everylink.getCondition().getNo();
                boolean _tripleNotEquals_8 = (_no_4 != null);
                if (_tripleNotEquals_8) {
                  String _string2_4 = string2;
                  Object _compileTrueCondition_4 = this.compileTrueCondition(everylink.getCondition().getCondition());
                  String _plus_13 = (("||" + " !") + _compileTrueCondition_4);
                  string2 = (_string2_4 + _plus_13);
                } else {
                  String _string2_5 = string2;
                  Object _compileTrueCondition_5 = this.compileTrueCondition(everylink.getCondition().getCondition());
                  String _plus_14 = ("||" + _compileTrueCondition_5);
                  string2 = (_string2_5 + _plus_14);
                }
              }
            }
            SingleLinkCondition _linkCondition_2 = everylink.getLinkCondition();
            boolean _tripleNotEquals_9 = (_linkCondition_2 != null);
            if (_tripleNotEquals_9) {
              String _no_5 = everylink.getLinkCondition().getNo();
              boolean _tripleNotEquals_10 = (_no_5 != null);
              if (_tripleNotEquals_10) {
                String _string2_6 = string2;
                String _name_5 = everylink.getLinkCondition().getLinkCondition().getName();
                String _plus_15 = (("||" + " !") + _name_5);
                String _plus_16 = (_plus_15 + "(ctx)");
                string2 = (_string2_6 + _plus_16);
              } else {
                String _string2_7 = string2;
                String _name_6 = everylink.getLinkCondition().getLinkCondition().getName();
                String _plus_17 = ("||" + _name_6);
                String _plus_18 = (_plus_17 + "(ctx)");
                string2 = (_string2_7 + _plus_18);
              }
            }
          }
        }
        String _string2 = string2;
        string2 = (_string2 + ")");
        String _myString = myString;
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append(string1);
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append(string2, "\t");
        _builder_1.append(" return true;");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append("else return false;");
        _builder_1.newLine();
        _builder_1.append("}");
        _builder_1.newLine();
        myString = (_myString + _builder_1);
      }
    }
    return myString;
  }

  public String compileOperationGo(final Operation operation) {
    StringConcatenation _builder = new StringConcatenation();
    String myString = _builder.toString();
    EList<OperateLink> _operates = operation.getOperates();
    for (final OperateLink everyoperation : _operates) {
      {
        String _name = everyoperation.getName();
        String _plus = ("func " + _name);
        String string1 = (_plus + "() {");
        String string2 = "";
        trueOperation _firstOperation = everyoperation.getFirstOperation();
        boolean _tripleNotEquals = (_firstOperation != null);
        if (_tripleNotEquals) {
          string2 = this.compileTrueOperate(everyoperation.getFirstOperation());
        } else {
          OperateLink _linkOperation = everyoperation.getLinkOperation();
          boolean _tripleNotEquals_1 = (_linkOperation != null);
          if (_tripleNotEquals_1) {
            String _name_1 = everyoperation.getLinkOperation().getName();
            String _plus_1 = (_name_1 + "();");
            string2 = _plus_1;
          }
        }
        StringConcatenation _builder_1 = new StringConcatenation();
        String string3 = _builder_1.toString();
        EList<AndOrOperationLink> _andOrLink = everyoperation.getAndOrLink();
        for (final AndOrOperationLink everylink : _andOrLink) {
          trueOperation _firstOperation_1 = everylink.getFirstOperation();
          boolean _tripleNotEquals_2 = (_firstOperation_1 != null);
          if (_tripleNotEquals_2) {
            String _string3 = string3;
            String _compileTrueOperate = this.compileTrueOperate(everylink.getFirstOperation());
            string3 = (_string3 + _compileTrueOperate);
          } else {
            OperateLink _linkOperation_1 = everylink.getLinkOperation();
            boolean _tripleNotEquals_3 = (_linkOperation_1 != null);
            if (_tripleNotEquals_3) {
              String _string3_1 = string3;
              String _name_2 = everylink.getLinkOperation().getName();
              String _plus_2 = (_name_2 + "();");
              string3 = (_string3_1 + _plus_2);
            }
          }
        }
        String _myString = myString;
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append(string1);
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        _builder_2.append(string2, "\t");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        _builder_2.append(string3, "\t");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("}");
        _builder_2.newLine();
        myString = (_myString + _builder_2);
      }
    }
    return myString;
  }

  public CharSequence compileRuleGo(final RuleStructure structure) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<ManyRuleExpression> _manyRuleExpression = structure.getManyRuleExpression();
      for(final ManyRuleExpression i : _manyRuleExpression) {
        CharSequence _compileManyRuleExpressionGo = this.compileManyRuleExpressionGo(i);
        _builder.append(_compileManyRuleExpressionGo);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  protected CharSequence _compileManyRuleExpressionGo(final ParallelExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<RuleExpression> _ruleExpression = expression.getRuleExpression();
      for(final RuleExpression i : _ruleExpression) {
        String _compileRuleExpressionGo = this.compileRuleExpressionGo(i);
        _builder.append(_compileRuleExpressionGo);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public String compileRuleExpressionGo(final RuleExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    String code = _builder.toString();
    String string1 = "";
    String string1_1 = "";
    String link = "";
    String setDateString1 = "";
    String setDateString2 = "";
    setDateExpression _setdate = expression.getSetdate();
    boolean _tripleNotEquals = (_setdate != null);
    if (_tripleNotEquals) {
      setDateString1 = "_year uint16, _months uint8, _days uint8, _hours uint8, _minutes uint8";
      String _message = expression.getSetdate().getMessage();
      String _plus = (_message + "=convertToTimestamp(_year,_months,_days,_hours,_minutes);");
      setDateString2 = _plus;
    }
    if (((expression.getSetdate() != null) && (expression.getSet() != null))) {
      link = ",";
    }
    String _repeat = expression.getRepeat();
    boolean _tripleEquals = (_repeat == null);
    if (_tripleEquals) {
      messageExpression _set = expression.getSet();
      boolean _tripleEquals_1 = (_set == null);
      if (_tripleEquals_1) {
        String _name = expression.getName();
        String _plus_1 = ("func " + _name);
        String _plus_2 = (_plus_1 + "(");
        String _plus_3 = (_plus_2 + setDateString1);
        String _plus_4 = (_plus_3 + ") {");
        string1 = _plus_4;
        initExpressions _person = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_1 = (_person != null);
        if (_tripleNotEquals_1) {
          String _name_1 = expression.getName();
          String _plus_5 = ("if onlyState(ContractState)&&!functionStatus[" + _name_1);
          String _plus_6 = (_plus_5 + "]{");
          string1_1 = _plus_6;
        } else {
          Group _person2 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_2 = (_person2 != null);
          if (_tripleNotEquals_2) {
            String _name_2 = expression.getName();
            String _plus_7 = ("if onlyState(ContractState)&&!functionStatus[" + _name_2);
            String _plus_8 = (_plus_7 + "]{");
            string1_1 = _plus_8;
          } else {
            String _name_3 = expression.getName();
            String _plus_9 = ("if onlyState(ContractState)&&!functionStatus[" + _name_3);
            String _plus_10 = (_plus_9 + "]{");
            string1_1 = _plus_10;
          }
        }
      }
      messageExpression _set_1 = expression.getSet();
      boolean _tripleNotEquals_3 = (_set_1 != null);
      if (_tripleNotEquals_3) {
        String _name_4 = expression.getName();
        String _plus_11 = ("func " + _name_4);
        String _plus_12 = (_plus_11 + "(");
        String _plus_13 = (_plus_12 + setDateString1);
        String _plus_14 = (_plus_13 + link);
        String _compileMessageOperate = this.compileMessageOperate(expression.getSet());
        String _plus_15 = (_plus_14 + _compileMessageOperate);
        String _plus_16 = (_plus_15 + ") {");
        string1 = _plus_16;
        initExpressions _person_1 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_4 = (_person_1 != null);
        if (_tripleNotEquals_4) {
          String _name_5 = expression.getName();
          String _plus_17 = ("if onlyState(ContractState)&&!functionStatus[" + _name_5);
          String _plus_18 = (_plus_17 + "]{");
          string1_1 = _plus_18;
        } else {
          Group _person2_1 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_5 = (_person2_1 != null);
          if (_tripleNotEquals_5) {
            String _name_6 = expression.getName();
            String _plus_19 = ("if onlyState(ContractState)&&!functionStatus[" + _name_6);
            String _plus_20 = (_plus_19 + "]{");
            string1_1 = _plus_20;
          } else {
            String _name_7 = expression.getName();
            String _plus_21 = ("if onlyState(ContractState)&&!functionStatus[" + _name_7);
            String _plus_22 = (_plus_21 + "]{");
            string1_1 = _plus_22;
          }
        }
      }
    }
    String _repeat_1 = expression.getRepeat();
    boolean _tripleNotEquals_6 = (_repeat_1 != null);
    if (_tripleNotEquals_6) {
      messageExpression _set_2 = expression.getSet();
      boolean _tripleEquals_2 = (_set_2 == null);
      if (_tripleEquals_2) {
        String _name_8 = expression.getName();
        String _plus_23 = ("func " + _name_8);
        String _plus_24 = (_plus_23 + "(");
        String _plus_25 = (_plus_24 + setDateString1);
        String _plus_26 = (_plus_25 + ") {");
        string1 = _plus_26;
        initExpressions _person_2 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_7 = (_person_2 != null);
        if (_tripleNotEquals_7) {
          string1_1 = "if onlyState(ContractState){";
        } else {
          Group _person2_2 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_8 = (_person2_2 != null);
          if (_tripleNotEquals_8) {
            string1_1 = "if onlyState(ContractState){";
          } else {
            string1_1 = "if onlyState(ContractState){";
          }
        }
      }
      messageExpression _set_3 = expression.getSet();
      boolean _tripleNotEquals_9 = (_set_3 != null);
      if (_tripleNotEquals_9) {
        String _name_9 = expression.getName();
        String _plus_27 = ("func " + _name_9);
        String _plus_28 = (_plus_27 + "(");
        String _plus_29 = (_plus_28 + setDateString1);
        String _plus_30 = (_plus_29 + link);
        String _compileMessageOperate_1 = this.compileMessageOperate(expression.getSet());
        String _plus_31 = (_plus_30 + _compileMessageOperate_1);
        String _plus_32 = (_plus_31 + ") {");
        string1 = _plus_32;
        initExpressions _person_3 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_10 = (_person_3 != null);
        if (_tripleNotEquals_10) {
          string1_1 = "if onlyState(ContractState){";
        } else {
          Group _person2_3 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_11 = (_person2_3 != null);
          if (_tripleNotEquals_11) {
            string1_1 = "if onlyState(ContractState){";
          } else {
            string1_1 = "if onlyState(ContractState){";
          }
        }
      }
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    String string2 = _builder_1.toString();
    messageExpression _set_4 = expression.getSet();
    boolean _tripleNotEquals_12 = (_set_4 != null);
    if (_tripleNotEquals_12) {
      String _string2 = string2;
      CharSequence _compileMessageOperateThing = this.compileMessageOperateThing(expression.getSet());
      string2 = (_string2 + _compileMessageOperateThing);
    }
    String string3 = "";
    TotalCondition _totalCondition = expression.getTotalCondition();
    boolean _tripleNotEquals_13 = (_totalCondition != null);
    if (_tripleNotEquals_13) {
      String _compileTotalCondition = this.compileTotalCondition(expression.getTotalCondition());
      String _plus_33 = ((string3 + "if(") + _compileTotalCondition);
      String _plus_34 = (_plus_33 + "){");
      string3 = _plus_34;
    }
    StringConcatenation _builder_2 = new StringConcatenation();
    String string4 = _builder_2.toString();
    String _string4 = string4;
    String _compileTotalOperation = this.compileTotalOperation(expression.getTotalOperation());
    string4 = (_string4 + _compileTotalOperation);
    StringConcatenation _builder_3 = new StringConcatenation();
    String string5 = _builder_3.toString();
    EList<SubExpression> _subExpression = expression.getSubExpression();
    boolean _tripleNotEquals_14 = (_subExpression != null);
    if (_tripleNotEquals_14) {
      EList<SubExpression> _subExpression_1 = expression.getSubExpression();
      for (final SubExpression i : _subExpression_1) {
        {
          String string6 = "";
          StringConcatenation _builder_4 = new StringConcatenation();
          String string7 = _builder_4.toString();
          String string8 = "";
          String string9 = "";
          TotalCondition _totalCondition_1 = i.getTotalExpression().getTotalCondition();
          boolean _tripleNotEquals_15 = (_totalCondition_1 != null);
          if (_tripleNotEquals_15) {
            String _string6 = string6;
            String _compileTotalCondition_1 = this.compileTotalCondition(i.getTotalExpression().getTotalCondition());
            String _plus_35 = ("if(" + _compileTotalCondition_1);
            String _plus_36 = (_plus_35 + "){");
            string6 = (_string6 + _plus_36);
          }
          String _string7 = string7;
          String _compileTotalOperation_1 = this.compileTotalOperation(i.getTotalExpression().getTotalOperation());
          string7 = (_string7 + _compileTotalOperation_1);
          ElseExpression _elseExpression = i.getTotalExpression().getElseExpression();
          boolean _tripleNotEquals_16 = (_elseExpression != null);
          if (_tripleNotEquals_16) {
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("else{ ");
            _builder_5.newLine();
            _builder_5.append("\t\t\t\t\t\t");
            String _compileTotalOperation_2 = this.compileTotalOperation(i.getTotalExpression().getElseExpression().getTotalOperation());
            _builder_5.append(_compileTotalOperation_2, "\t\t\t\t\t\t");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("\t\t\t\t\t\t");
            _builder_5.append("}");
            string8 = _builder_5.toString();
          }
          TotalCondition _totalCondition_2 = i.getTotalExpression().getTotalCondition();
          boolean _tripleNotEquals_17 = (_totalCondition_2 != null);
          if (_tripleNotEquals_17) {
            string9 = "}";
          }
          String _string5 = string5;
          StringConcatenation _builder_6 = new StringConcatenation();
          _builder_6.append(string6);
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("\t");
          _builder_6.append(string7, "\t");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append(string8);
          _builder_6.newLineIfNotEmpty();
          _builder_6.append(string9);
          _builder_6.newLineIfNotEmpty();
          string5 = (_string5 + _builder_6);
        }
      }
    }
    String _name_10 = expression.getName();
    String _plus_35 = ("changeRule(\"" + _name_10);
    String string6 = (_plus_35 + "\");");
    StringConcatenation _builder_4 = new StringConcatenation();
    String string7 = _builder_4.toString();
    TotalCondition _totalCondition_1 = expression.getTotalCondition();
    boolean _tripleNotEquals_15 = (_totalCondition_1 != null);
    if (_tripleNotEquals_15) {
      string7 = "}";
    }
    String _code = code;
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append(string1);
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string1_1, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(setDateString2, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string2, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string3, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string4, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string5, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string6, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string7, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.append("}");
    _builder_5.newLine();
    code = (_code + _builder_5);
    ElseExpression _elseExpression = expression.getElseExpression();
    boolean _tripleEquals_3 = (_elseExpression == null);
    if (_tripleEquals_3) {
      return code;
    }
    ElseExpression _elseExpression_1 = expression.getElseExpression();
    boolean _tripleNotEquals_16 = (_elseExpression_1 != null);
    if (_tripleNotEquals_16) {
      StringConcatenation _builder_6 = new StringConcatenation();
      String string8 = _builder_6.toString();
      String string9 = "";
      String string9_1 = "";
      messageExpression _set_5 = expression.getElseExpression().getSet();
      boolean _tripleEquals_4 = (_set_5 == null);
      if (_tripleEquals_4) {
        String _name_11 = expression.getName();
        String _plus_36 = ("func else" + _name_11);
        String _plus_37 = (_plus_36 + "(){");
        string9 = _plus_37;
        initExpressions _person_4 = expression.getElseExpression().getTotalOperation().getPerson();
        boolean _tripleNotEquals_17 = (_person_4 != null);
        if (_tripleNotEquals_17) {
          String _name_12 = expression.getName();
          String _plus_38 = ("if onlyState(ContractState)&&!functionStatus[" + _name_12);
          String _plus_39 = (_plus_38 + "]{");
          string9_1 = _plus_39;
        } else {
          Group _person2_4 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_18 = (_person2_4 != null);
          if (_tripleNotEquals_18) {
            String _name_13 = expression.getName();
            String _plus_40 = ("if onlyState(ContractState)&&!functionStatus[" + _name_13);
            String _plus_41 = (_plus_40 + "]{");
            string9_1 = _plus_41;
          } else {
            String _name_14 = expression.getName();
            String _plus_42 = ("if onlyState(ContractState)&&!functionStatus[" + _name_14);
            String _plus_43 = (_plus_42 + "]{");
            string9_1 = _plus_43;
          }
        }
      }
      messageExpression _set_6 = expression.getElseExpression().getSet();
      boolean _tripleNotEquals_19 = (_set_6 != null);
      if (_tripleNotEquals_19) {
        String _name_15 = expression.getName();
        String _plus_44 = ("func else" + _name_15);
        String _plus_45 = (_plus_44 + "(");
        String _compileMessageOperate_2 = this.compileMessageOperate(expression.getElseExpression().getSet());
        String _plus_46 = (_plus_45 + _compileMessageOperate_2);
        String _plus_47 = (_plus_46 + "){");
        string9 = _plus_47;
        initExpressions _person_5 = expression.getElseExpression().getTotalOperation().getPerson();
        boolean _tripleNotEquals_20 = (_person_5 != null);
        if (_tripleNotEquals_20) {
          String _name_16 = expression.getName();
          String _plus_48 = ("if onlyState(ContractState)&&!functionStatus[" + _name_16);
          String _plus_49 = (_plus_48 + "]{");
          string9_1 = _plus_49;
        } else {
          Group _person2_5 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_21 = (_person2_5 != null);
          if (_tripleNotEquals_21) {
            String _name_17 = expression.getName();
            String _plus_50 = ("if onlyState(ContractState)&&!functionStatus[" + _name_17);
            String _plus_51 = (_plus_50 + "]{");
            string9_1 = _plus_51;
          } else {
            String _name_18 = expression.getName();
            String _plus_52 = ("if onlyState(ContractState)&&!functionStatus[" + _name_18);
            String _plus_53 = (_plus_52 + "]{");
            string9_1 = _plus_53;
          }
        }
      }
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("bool one=true;");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("if(one){");
      _builder_7.newLine();
      String onlyOne = _builder_7.toString();
      String string10 = "";
      String string11 = "";
      StringConcatenation _builder_8 = new StringConcatenation();
      String string12 = _builder_8.toString();
      String string13 = "";
      TotalCondition _totalCondition_2 = expression.getTotalCondition();
      boolean _tripleNotEquals_22 = (_totalCondition_2 != null);
      if (_tripleNotEquals_22) {
        String _string10 = string10;
        String _compileTotalCondition_1 = this.compileTotalCondition(expression.getTotalCondition());
        String _plus_54 = ("if(!(" + _compileTotalCondition_1);
        String _plus_55 = (_plus_54 + ")){");
        string10 = (_string10 + _plus_55);
      }
      String _string11 = string11;
      String _compileTotalOperation_1 = this.compileTotalOperation(expression.getElseExpression().getTotalOperation());
      string11 = (_string11 + _compileTotalOperation_1);
      TotalCondition _totalCondition_3 = expression.getTotalCondition();
      boolean _tripleNotEquals_23 = (_totalCondition_3 != null);
      if (_tripleNotEquals_23) {
        string13 = "}";
      }
      TotalCondition _totalCondition_4 = expression.getTotalCondition();
      boolean _tripleNotEquals_24 = (_totalCondition_4 != null);
      if (_tripleNotEquals_24) {
        string12 = "}";
      }
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append(string9);
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string9_1, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(onlyOne, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string10, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t");
      _builder_9.append(string11, "\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string13, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append(string12);
      _builder_9.newLineIfNotEmpty();
      string8 = _builder_9.toString();
      String _code_1 = code;
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append(string8);
      _builder_10.newLineIfNotEmpty();
      _builder_10.append("one=false;");
      _builder_10.newLine();
      _builder_10.append("}");
      _builder_10.newLine();
      code = (_code_1 + _builder_10);
      return code;
    }
    return null;
  }

  protected CharSequence _compileManyRuleExpressionGo(final ExclusiveExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<RuleExpression> _ruleExpression = expression.getRuleExpression();
      for(final RuleExpression i : _ruleExpression) {
        String _compileExclusiveRuleExpressionGo = this.compileExclusiveRuleExpressionGo(i);
        _builder.append(_compileExclusiveRuleExpressionGo);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public String compileExclusiveRuleExpressionGo(final RuleExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    String code = _builder.toString();
    String string1 = "";
    String string1_1 = "";
    String link = "";
    String setDateString1 = "";
    String setDateString2 = "";
    setDateExpression _setdate = expression.getSetdate();
    boolean _tripleNotEquals = (_setdate != null);
    if (_tripleNotEquals) {
      setDateString1 = "_year uint16, _months uint8, _days uint8, _hours uint8, _minutes uint8";
      String _message = expression.getSetdate().getMessage();
      String _plus = (_message + "=convertToTimestamp(_year,_months,_days,_hours,_minutes);");
      setDateString2 = _plus;
    }
    if (((expression.getSetdate() != null) && (expression.getSet() != null))) {
      link = ",";
    }
    String _repeat = expression.getRepeat();
    boolean _tripleEquals = (_repeat == null);
    if (_tripleEquals) {
      messageExpression _set = expression.getSet();
      boolean _tripleEquals_1 = (_set == null);
      if (_tripleEquals_1) {
        String _name = expression.getName();
        String _plus_1 = ("func " + _name);
        String _plus_2 = (_plus_1 + "(");
        String _plus_3 = (_plus_2 + setDateString1);
        String _plus_4 = (_plus_3 + ") {");
        string1 = _plus_4;
        initExpressions _person = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_1 = (_person != null);
        if (_tripleNotEquals_1) {
          String _name_1 = expression.getName();
          String _plus_5 = ("if onlyState(ContractState)&&!functionStatus[" + _name_1);
          String _plus_6 = (_plus_5 + "]{");
          string1_1 = _plus_6;
        } else {
          Group _person2 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_2 = (_person2 != null);
          if (_tripleNotEquals_2) {
            String _name_2 = expression.getName();
            String _plus_7 = ("if onlyState(ContractState)&&!functionStatus[" + _name_2);
            String _plus_8 = (_plus_7 + "]{");
            string1_1 = _plus_8;
          } else {
            String _name_3 = expression.getName();
            String _plus_9 = ("if onlyState(ContractState)&&!functionStatus[" + _name_3);
            String _plus_10 = (_plus_9 + "]{");
            string1_1 = _plus_10;
          }
        }
      }
      messageExpression _set_1 = expression.getSet();
      boolean _tripleNotEquals_3 = (_set_1 != null);
      if (_tripleNotEquals_3) {
        String _name_4 = expression.getName();
        String _plus_11 = ("func " + _name_4);
        String _plus_12 = (_plus_11 + "(");
        String _plus_13 = (_plus_12 + setDateString1);
        String _plus_14 = (_plus_13 + link);
        String _compileMessageOperate = this.compileMessageOperate(expression.getSet());
        String _plus_15 = (_plus_14 + _compileMessageOperate);
        String _plus_16 = (_plus_15 + ") {");
        string1 = _plus_16;
        initExpressions _person_1 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_4 = (_person_1 != null);
        if (_tripleNotEquals_4) {
          String _name_5 = expression.getName();
          String _plus_17 = ("if onlyState(ContractState)&&!functionStatus[" + _name_5);
          String _plus_18 = (_plus_17 + "]{");
          string1_1 = _plus_18;
        } else {
          Group _person2_1 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_5 = (_person2_1 != null);
          if (_tripleNotEquals_5) {
            String _name_6 = expression.getName();
            String _plus_19 = ("if onlyState(ContractState)&&!functionStatus[" + _name_6);
            String _plus_20 = (_plus_19 + "]{");
            string1_1 = _plus_20;
          } else {
            String _name_7 = expression.getName();
            String _plus_21 = ("if onlyState(ContractState)&&!functionStatus[" + _name_7);
            String _plus_22 = (_plus_21 + "]{");
            string1_1 = _plus_22;
          }
        }
      }
    }
    String _repeat_1 = expression.getRepeat();
    boolean _tripleNotEquals_6 = (_repeat_1 != null);
    if (_tripleNotEquals_6) {
      messageExpression _set_2 = expression.getSet();
      boolean _tripleEquals_2 = (_set_2 == null);
      if (_tripleEquals_2) {
        String _name_8 = expression.getName();
        String _plus_23 = ("func " + _name_8);
        String _plus_24 = (_plus_23 + "(");
        String _plus_25 = (_plus_24 + setDateString1);
        String _plus_26 = (_plus_25 + ") {");
        string1 = _plus_26;
        initExpressions _person_2 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_7 = (_person_2 != null);
        if (_tripleNotEquals_7) {
          string1_1 = "if onlyState(ContractState){";
        } else {
          Group _person2_2 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_8 = (_person2_2 != null);
          if (_tripleNotEquals_8) {
            string1_1 = "if onlyState(ContractState){";
          } else {
            string1_1 = "if onlyState(ContractState){";
          }
        }
      }
      messageExpression _set_3 = expression.getSet();
      boolean _tripleNotEquals_9 = (_set_3 != null);
      if (_tripleNotEquals_9) {
        String _name_9 = expression.getName();
        String _plus_27 = ("func " + _name_9);
        String _plus_28 = (_plus_27 + "(");
        String _plus_29 = (_plus_28 + setDateString1);
        String _plus_30 = (_plus_29 + link);
        String _compileMessageOperate_1 = this.compileMessageOperate(expression.getSet());
        String _plus_31 = (_plus_30 + _compileMessageOperate_1);
        String _plus_32 = (_plus_31 + ") {");
        string1 = _plus_32;
        initExpressions _person_3 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_10 = (_person_3 != null);
        if (_tripleNotEquals_10) {
          string1_1 = "if onlyState(ContractState){";
        } else {
          Group _person2_3 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_11 = (_person2_3 != null);
          if (_tripleNotEquals_11) {
            string1_1 = "if onlyState(ContractState){";
          } else {
            string1_1 = "if onlyState(ContractState){";
          }
        }
      }
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    String string2 = _builder_1.toString();
    messageExpression _set_4 = expression.getSet();
    boolean _tripleNotEquals_12 = (_set_4 != null);
    if (_tripleNotEquals_12) {
      String _string2 = string2;
      CharSequence _compileMessageOperateThing = this.compileMessageOperateThing(expression.getSet());
      string2 = (_string2 + _compileMessageOperateThing);
    }
    String string3 = "";
    TotalCondition _totalCondition = expression.getTotalCondition();
    boolean _tripleNotEquals_13 = (_totalCondition != null);
    if (_tripleNotEquals_13) {
      String _compileTotalCondition = this.compileTotalCondition(expression.getTotalCondition());
      String _plus_33 = ((string3 + "if(") + _compileTotalCondition);
      String _plus_34 = (_plus_33 + "){");
      string3 = _plus_34;
    }
    StringConcatenation _builder_2 = new StringConcatenation();
    String string4 = _builder_2.toString();
    String _string4 = string4;
    String _compileTotalOperation = this.compileTotalOperation(expression.getTotalOperation());
    string4 = (_string4 + _compileTotalOperation);
    StringConcatenation _builder_3 = new StringConcatenation();
    String string5 = _builder_3.toString();
    EList<SubExpression> _subExpression = expression.getSubExpression();
    boolean _tripleNotEquals_14 = (_subExpression != null);
    if (_tripleNotEquals_14) {
      EList<SubExpression> _subExpression_1 = expression.getSubExpression();
      for (final SubExpression i : _subExpression_1) {
        {
          String string6 = "";
          StringConcatenation _builder_4 = new StringConcatenation();
          String string7 = _builder_4.toString();
          String string8 = "";
          String string9 = "";
          TotalCondition _totalCondition_1 = i.getTotalExpression().getTotalCondition();
          boolean _tripleNotEquals_15 = (_totalCondition_1 != null);
          if (_tripleNotEquals_15) {
            String _string6 = string6;
            String _compileTotalCondition_1 = this.compileTotalCondition(i.getTotalExpression().getTotalCondition());
            String _plus_35 = ("if(" + _compileTotalCondition_1);
            String _plus_36 = (_plus_35 + "){");
            string6 = (_string6 + _plus_36);
          }
          String _string7 = string7;
          String _compileTotalOperation_1 = this.compileTotalOperation(i.getTotalExpression().getTotalOperation());
          string7 = (_string7 + _compileTotalOperation_1);
          ElseExpression _elseExpression = i.getTotalExpression().getElseExpression();
          boolean _tripleNotEquals_16 = (_elseExpression != null);
          if (_tripleNotEquals_16) {
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("else{ ");
            _builder_5.newLine();
            _builder_5.append("\t\t\t\t\t\t");
            String _compileTotalOperation_2 = this.compileTotalOperation(i.getTotalExpression().getElseExpression().getTotalOperation());
            _builder_5.append(_compileTotalOperation_2, "\t\t\t\t\t\t");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("\t\t\t\t\t\t");
            _builder_5.append("}");
            string8 = _builder_5.toString();
          }
          TotalCondition _totalCondition_2 = i.getTotalExpression().getTotalCondition();
          boolean _tripleNotEquals_17 = (_totalCondition_2 != null);
          if (_tripleNotEquals_17) {
            string9 = "}";
          }
          String _string5 = string5;
          StringConcatenation _builder_6 = new StringConcatenation();
          _builder_6.append(string6);
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("\t");
          _builder_6.append(string7, "\t");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append(string8);
          _builder_6.newLineIfNotEmpty();
          _builder_6.append(string9);
          _builder_6.newLineIfNotEmpty();
          string5 = (_string5 + _builder_6);
        }
      }
    }
    String _name_10 = expression.getName();
    String _plus_35 = ("changeRule(\"" + _name_10);
    String string6 = (_plus_35 + "\");");
    StringConcatenation _builder_4 = new StringConcatenation();
    String string7 = _builder_4.toString();
    TotalCondition _totalCondition_1 = expression.getTotalCondition();
    boolean _tripleNotEquals_15 = (_totalCondition_1 != null);
    if (_tripleNotEquals_15) {
      string7 = "}";
    }
    String _code = code;
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append(string1);
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string1_1, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(setDateString2, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string2, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string3, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string4, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string5, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string6, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string7, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.append("}");
    _builder_5.newLine();
    code = (_code + _builder_5);
    ElseExpression _elseExpression = expression.getElseExpression();
    boolean _tripleEquals_3 = (_elseExpression == null);
    if (_tripleEquals_3) {
      return code;
    }
    ElseExpression _elseExpression_1 = expression.getElseExpression();
    boolean _tripleNotEquals_16 = (_elseExpression_1 != null);
    if (_tripleNotEquals_16) {
      StringConcatenation _builder_6 = new StringConcatenation();
      String string8 = _builder_6.toString();
      String string9 = "";
      String string9_1 = "";
      messageExpression _set_5 = expression.getElseExpression().getSet();
      boolean _tripleEquals_4 = (_set_5 == null);
      if (_tripleEquals_4) {
        String _name_11 = expression.getName();
        String _plus_36 = ("func else" + _name_11);
        String _plus_37 = (_plus_36 + "(){");
        string9 = _plus_37;
        initExpressions _person_4 = expression.getElseExpression().getTotalOperation().getPerson();
        boolean _tripleNotEquals_17 = (_person_4 != null);
        if (_tripleNotEquals_17) {
          String _name_12 = expression.getName();
          String _plus_38 = ("if onlyState(ContractState)&&!functionStatus[" + _name_12);
          String _plus_39 = (_plus_38 + "]{");
          string9_1 = _plus_39;
        } else {
          Group _person2_4 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_18 = (_person2_4 != null);
          if (_tripleNotEquals_18) {
            String _name_13 = expression.getName();
            String _plus_40 = ("if onlyState(ContractState)&&!functionStatus[" + _name_13);
            String _plus_41 = (_plus_40 + "]{");
            string9_1 = _plus_41;
          } else {
            String _name_14 = expression.getName();
            String _plus_42 = ("if onlyState(ContractState)&&!functionStatus[" + _name_14);
            String _plus_43 = (_plus_42 + "]{");
            string9_1 = _plus_43;
          }
        }
      }
      messageExpression _set_6 = expression.getElseExpression().getSet();
      boolean _tripleNotEquals_19 = (_set_6 != null);
      if (_tripleNotEquals_19) {
        String _name_15 = expression.getName();
        String _plus_44 = ("func else" + _name_15);
        String _plus_45 = (_plus_44 + "(");
        String _compileMessageOperate_2 = this.compileMessageOperate(expression.getElseExpression().getSet());
        String _plus_46 = (_plus_45 + _compileMessageOperate_2);
        String _plus_47 = (_plus_46 + "){");
        string9 = _plus_47;
        initExpressions _person_5 = expression.getElseExpression().getTotalOperation().getPerson();
        boolean _tripleNotEquals_20 = (_person_5 != null);
        if (_tripleNotEquals_20) {
          String _name_16 = expression.getName();
          String _plus_48 = ("if onlyState(ContractState)&&!functionStatus[" + _name_16);
          String _plus_49 = (_plus_48 + "]{");
          string9_1 = _plus_49;
        } else {
          Group _person2_5 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_21 = (_person2_5 != null);
          if (_tripleNotEquals_21) {
            String _name_17 = expression.getName();
            String _plus_50 = ("if onlyState(ContractState)&&!functionStatus[" + _name_17);
            String _plus_51 = (_plus_50 + "]{");
            string9_1 = _plus_51;
          } else {
            String _name_18 = expression.getName();
            String _plus_52 = ("if onlyState(ContractState)&&!functionStatus[" + _name_18);
            String _plus_53 = (_plus_52 + "]{");
            string9_1 = _plus_53;
          }
        }
      }
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("bool one=true;");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("if(one){");
      _builder_7.newLine();
      String onlyOne = _builder_7.toString();
      String string10 = "";
      String string11 = "";
      StringConcatenation _builder_8 = new StringConcatenation();
      String string12 = _builder_8.toString();
      String string13 = "";
      TotalCondition _totalCondition_2 = expression.getTotalCondition();
      boolean _tripleNotEquals_22 = (_totalCondition_2 != null);
      if (_tripleNotEquals_22) {
        String _string10 = string10;
        String _compileTotalCondition_1 = this.compileTotalCondition(expression.getTotalCondition());
        String _plus_54 = ("if(!(" + _compileTotalCondition_1);
        String _plus_55 = (_plus_54 + ")){");
        string10 = (_string10 + _plus_55);
      }
      String _string11 = string11;
      String _compileTotalOperation_1 = this.compileTotalOperation(expression.getElseExpression().getTotalOperation());
      string11 = (_string11 + _compileTotalOperation_1);
      TotalCondition _totalCondition_3 = expression.getTotalCondition();
      boolean _tripleNotEquals_23 = (_totalCondition_3 != null);
      if (_tripleNotEquals_23) {
        string13 = "}";
      }
      TotalCondition _totalCondition_4 = expression.getTotalCondition();
      boolean _tripleNotEquals_24 = (_totalCondition_4 != null);
      if (_tripleNotEquals_24) {
        string12 = "}";
      }
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append(string9);
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string9_1, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(onlyOne, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string10, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t");
      _builder_9.append(string11, "\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string13, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append(string12);
      _builder_9.newLineIfNotEmpty();
      string8 = _builder_9.toString();
      String _code_1 = code;
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append(string8);
      _builder_10.newLineIfNotEmpty();
      _builder_10.append("one=false;");
      _builder_10.newLine();
      _builder_10.append("}");
      _builder_10.newLine();
      code = (_code_1 + _builder_10);
      return code;
    }
    return null;
  }

  protected CharSequence _compileManyRuleExpressionGo(final RegularRuleExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<RuleExpression> _ruleExpression = expression.getRuleExpression();
      for(final RuleExpression i : _ruleExpression) {
        String _compileRuleExpressionGo = this.compileRuleExpressionGo(i);
        _builder.append(_compileRuleExpressionGo);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  protected CharSequence _compileManyRuleExpressionGo(final AdditionExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<RuleExpression> _ruleExpression = expression.getRuleExpression();
      for(final RuleExpression i : _ruleExpression) {
        String _compileAdditionalRuleExpressionGo = this.compileAdditionalRuleExpressionGo(i);
        _builder.append(_compileAdditionalRuleExpressionGo);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public String compileAdditionalRuleExpressionGo(final RuleExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    String code = _builder.toString();
    String string1 = "";
    String string1_1 = "";
    String link = "";
    String setDateString1 = "";
    String setDateString2 = "";
    setDateExpression _setdate = expression.getSetdate();
    boolean _tripleNotEquals = (_setdate != null);
    if (_tripleNotEquals) {
      setDateString1 = "_year uint16, _months uint8, _days uint8, _hours uint8, _minutes uint8";
      String _message = expression.getSetdate().getMessage();
      String _plus = (_message + "=convertToTimestamp(_year,_months,_days,_hours,_minutes);");
      setDateString2 = _plus;
    }
    if (((expression.getSetdate() != null) && (expression.getSet() != null))) {
      link = ",";
    }
    String _repeat = expression.getRepeat();
    boolean _tripleEquals = (_repeat == null);
    if (_tripleEquals) {
      messageExpression _set = expression.getSet();
      boolean _tripleEquals_1 = (_set == null);
      if (_tripleEquals_1) {
        String _name = expression.getName();
        String _plus_1 = ("func " + _name);
        String _plus_2 = (_plus_1 + "(");
        String _plus_3 = (_plus_2 + setDateString1);
        String _plus_4 = (_plus_3 + ") {");
        string1 = _plus_4;
        initExpressions _person = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_1 = (_person != null);
        if (_tripleNotEquals_1) {
          String _name_1 = expression.getName();
          String _plus_5 = ("if !functionStatus[" + _name_1);
          String _plus_6 = (_plus_5 + "]{");
          string1_1 = _plus_6;
        } else {
          Group _person2 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_2 = (_person2 != null);
          if (_tripleNotEquals_2) {
            String _name_2 = expression.getName();
            String _plus_7 = ("if !functionStatus[" + _name_2);
            String _plus_8 = (_plus_7 + "]{");
            string1_1 = _plus_8;
          } else {
            String _name_3 = expression.getName();
            String _plus_9 = ("if !functionStatus[" + _name_3);
            String _plus_10 = (_plus_9 + "]{");
            string1_1 = _plus_10;
          }
        }
      }
      messageExpression _set_1 = expression.getSet();
      boolean _tripleNotEquals_3 = (_set_1 != null);
      if (_tripleNotEquals_3) {
        String _name_4 = expression.getName();
        String _plus_11 = ("func " + _name_4);
        String _plus_12 = (_plus_11 + "(");
        String _plus_13 = (_plus_12 + setDateString1);
        String _plus_14 = (_plus_13 + link);
        String _compileMessageOperate = this.compileMessageOperate(expression.getSet());
        String _plus_15 = (_plus_14 + _compileMessageOperate);
        String _plus_16 = (_plus_15 + ") {");
        string1 = _plus_16;
        initExpressions _person_1 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_4 = (_person_1 != null);
        if (_tripleNotEquals_4) {
          String _name_5 = expression.getName();
          String _plus_17 = ("if !functionStatus[" + _name_5);
          String _plus_18 = (_plus_17 + "]{");
          string1_1 = _plus_18;
        } else {
          Group _person2_1 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_5 = (_person2_1 != null);
          if (_tripleNotEquals_5) {
            String _name_6 = expression.getName();
            String _plus_19 = ("if !functionStatus[" + _name_6);
            String _plus_20 = (_plus_19 + "]{");
            string1_1 = _plus_20;
          } else {
            String _name_7 = expression.getName();
            String _plus_21 = ("if !functionStatus[" + _name_7);
            String _plus_22 = (_plus_21 + "]{");
            string1_1 = _plus_22;
          }
        }
      }
    }
    String _repeat_1 = expression.getRepeat();
    boolean _tripleNotEquals_6 = (_repeat_1 != null);
    if (_tripleNotEquals_6) {
      messageExpression _set_2 = expression.getSet();
      boolean _tripleEquals_2 = (_set_2 == null);
      if (_tripleEquals_2) {
        String _name_8 = expression.getName();
        String _plus_23 = ("func " + _name_8);
        String _plus_24 = (_plus_23 + "(");
        String _plus_25 = (_plus_24 + setDateString1);
        String _plus_26 = (_plus_25 + ") {");
        string1 = _plus_26;
        initExpressions _person_2 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_7 = (_person_2 != null);
        if (_tripleNotEquals_7) {
          string1_1 = "if true{";
        } else {
          Group _person2_2 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_8 = (_person2_2 != null);
          if (_tripleNotEquals_8) {
            string1_1 = "if true{";
          } else {
            string1_1 = "if true{";
          }
        }
      }
      messageExpression _set_3 = expression.getSet();
      boolean _tripleNotEquals_9 = (_set_3 != null);
      if (_tripleNotEquals_9) {
        String _name_9 = expression.getName();
        String _plus_27 = ("func " + _name_9);
        String _plus_28 = (_plus_27 + "(");
        String _plus_29 = (_plus_28 + setDateString1);
        String _plus_30 = (_plus_29 + link);
        String _compileMessageOperate_1 = this.compileMessageOperate(expression.getSet());
        String _plus_31 = (_plus_30 + _compileMessageOperate_1);
        String _plus_32 = (_plus_31 + ") {");
        string1 = _plus_32;
        initExpressions _person_3 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_10 = (_person_3 != null);
        if (_tripleNotEquals_10) {
          string1_1 = "if true{";
        } else {
          Group _person2_3 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_11 = (_person2_3 != null);
          if (_tripleNotEquals_11) {
            string1_1 = "if true{";
          } else {
            string1_1 = "if true{";
          }
        }
      }
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    String string2 = _builder_1.toString();
    messageExpression _set_4 = expression.getSet();
    boolean _tripleNotEquals_12 = (_set_4 != null);
    if (_tripleNotEquals_12) {
      String _string2 = string2;
      CharSequence _compileMessageOperateThing = this.compileMessageOperateThing(expression.getSet());
      string2 = (_string2 + _compileMessageOperateThing);
    }
    String string3 = "";
    TotalCondition _totalCondition = expression.getTotalCondition();
    boolean _tripleNotEquals_13 = (_totalCondition != null);
    if (_tripleNotEquals_13) {
      String _compileTotalCondition = this.compileTotalCondition(expression.getTotalCondition());
      String _plus_33 = ((string3 + "if(") + _compileTotalCondition);
      String _plus_34 = (_plus_33 + "){");
      string3 = _plus_34;
    }
    StringConcatenation _builder_2 = new StringConcatenation();
    String string4 = _builder_2.toString();
    String _string4 = string4;
    String _compileTotalOperation = this.compileTotalOperation(expression.getTotalOperation());
    string4 = (_string4 + _compileTotalOperation);
    StringConcatenation _builder_3 = new StringConcatenation();
    String string5 = _builder_3.toString();
    EList<SubExpression> _subExpression = expression.getSubExpression();
    boolean _tripleNotEquals_14 = (_subExpression != null);
    if (_tripleNotEquals_14) {
      EList<SubExpression> _subExpression_1 = expression.getSubExpression();
      for (final SubExpression i : _subExpression_1) {
        {
          String string6 = "";
          StringConcatenation _builder_4 = new StringConcatenation();
          String string7 = _builder_4.toString();
          String string8 = "";
          String string9 = "";
          TotalCondition _totalCondition_1 = i.getTotalExpression().getTotalCondition();
          boolean _tripleNotEquals_15 = (_totalCondition_1 != null);
          if (_tripleNotEquals_15) {
            String _string6 = string6;
            String _compileTotalCondition_1 = this.compileTotalCondition(i.getTotalExpression().getTotalCondition());
            String _plus_35 = ("if(" + _compileTotalCondition_1);
            String _plus_36 = (_plus_35 + "){");
            string6 = (_string6 + _plus_36);
          }
          String _string7 = string7;
          String _compileTotalOperation_1 = this.compileTotalOperation(i.getTotalExpression().getTotalOperation());
          string7 = (_string7 + _compileTotalOperation_1);
          ElseExpression _elseExpression = i.getTotalExpression().getElseExpression();
          boolean _tripleNotEquals_16 = (_elseExpression != null);
          if (_tripleNotEquals_16) {
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("else{ ");
            _builder_5.newLine();
            _builder_5.append("\t\t\t\t\t\t");
            String _compileTotalOperation_2 = this.compileTotalOperation(i.getTotalExpression().getElseExpression().getTotalOperation());
            _builder_5.append(_compileTotalOperation_2, "\t\t\t\t\t\t");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("\t\t\t\t\t\t");
            _builder_5.append("}");
            string8 = _builder_5.toString();
          }
          TotalCondition _totalCondition_2 = i.getTotalExpression().getTotalCondition();
          boolean _tripleNotEquals_17 = (_totalCondition_2 != null);
          if (_tripleNotEquals_17) {
            string9 = "}";
          }
          String _string5 = string5;
          StringConcatenation _builder_6 = new StringConcatenation();
          _builder_6.append(string6);
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("\t");
          _builder_6.append(string7, "\t");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append(string8);
          _builder_6.newLineIfNotEmpty();
          _builder_6.append(string9);
          _builder_6.newLineIfNotEmpty();
          string5 = (_string5 + _builder_6);
        }
      }
    }
    String _name_10 = expression.getName();
    String _plus_35 = ("changeRule(\"" + _name_10);
    String string6 = (_plus_35 + "\");");
    StringConcatenation _builder_4 = new StringConcatenation();
    String string7 = _builder_4.toString();
    TotalCondition _totalCondition_1 = expression.getTotalCondition();
    boolean _tripleNotEquals_15 = (_totalCondition_1 != null);
    if (_tripleNotEquals_15) {
      string7 = "}";
    }
    String _code = code;
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append(string1);
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string1_1, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(setDateString2, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string2, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string3, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string4, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string5, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string6, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string7, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.append("}");
    _builder_5.newLine();
    code = (_code + _builder_5);
    ElseExpression _elseExpression = expression.getElseExpression();
    boolean _tripleEquals_3 = (_elseExpression == null);
    if (_tripleEquals_3) {
      return code;
    }
    ElseExpression _elseExpression_1 = expression.getElseExpression();
    boolean _tripleNotEquals_16 = (_elseExpression_1 != null);
    if (_tripleNotEquals_16) {
      StringConcatenation _builder_6 = new StringConcatenation();
      String string8 = _builder_6.toString();
      String string9 = "";
      String string9_1 = "";
      messageExpression _set_5 = expression.getElseExpression().getSet();
      boolean _tripleEquals_4 = (_set_5 == null);
      if (_tripleEquals_4) {
        String _name_11 = expression.getName();
        String _plus_36 = ("func else" + _name_11);
        String _plus_37 = (_plus_36 + "(){");
        string9 = _plus_37;
        initExpressions _person_4 = expression.getElseExpression().getTotalOperation().getPerson();
        boolean _tripleNotEquals_17 = (_person_4 != null);
        if (_tripleNotEquals_17) {
          String _name_12 = expression.getName();
          String _plus_38 = ("if !functionStatus[" + _name_12);
          String _plus_39 = (_plus_38 + "]{");
          string9_1 = _plus_39;
        } else {
          Group _person2_4 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_18 = (_person2_4 != null);
          if (_tripleNotEquals_18) {
            String _name_13 = expression.getName();
            String _plus_40 = ("if !functionStatus[" + _name_13);
            String _plus_41 = (_plus_40 + "]{");
            string9_1 = _plus_41;
          } else {
            String _name_14 = expression.getName();
            String _plus_42 = ("if !functionStatus[" + _name_14);
            String _plus_43 = (_plus_42 + "]{");
            string9_1 = _plus_43;
          }
        }
      }
      messageExpression _set_6 = expression.getElseExpression().getSet();
      boolean _tripleNotEquals_19 = (_set_6 != null);
      if (_tripleNotEquals_19) {
        String _name_15 = expression.getName();
        String _plus_44 = ("func else" + _name_15);
        String _plus_45 = (_plus_44 + "(");
        String _compileMessageOperate_2 = this.compileMessageOperate(expression.getElseExpression().getSet());
        String _plus_46 = (_plus_45 + _compileMessageOperate_2);
        String _plus_47 = (_plus_46 + "){");
        string9 = _plus_47;
        initExpressions _person_5 = expression.getElseExpression().getTotalOperation().getPerson();
        boolean _tripleNotEquals_20 = (_person_5 != null);
        if (_tripleNotEquals_20) {
          String _name_16 = expression.getName();
          String _plus_48 = ("if !functionStatus[" + _name_16);
          String _plus_49 = (_plus_48 + "]{");
          string9_1 = _plus_49;
        } else {
          Group _person2_5 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_21 = (_person2_5 != null);
          if (_tripleNotEquals_21) {
            String _name_17 = expression.getName();
            String _plus_50 = ("if !functionStatus[" + _name_17);
            String _plus_51 = (_plus_50 + "]{");
            string9_1 = _plus_51;
          } else {
            String _name_18 = expression.getName();
            String _plus_52 = ("if !functionStatus[" + _name_18);
            String _plus_53 = (_plus_52 + "]{");
            string9_1 = _plus_53;
          }
        }
      }
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("bool one=true;");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("if(one){");
      _builder_7.newLine();
      String onlyOne = _builder_7.toString();
      String string10 = "";
      String string11 = "";
      StringConcatenation _builder_8 = new StringConcatenation();
      String string12 = _builder_8.toString();
      String string13 = "";
      TotalCondition _totalCondition_2 = expression.getTotalCondition();
      boolean _tripleNotEquals_22 = (_totalCondition_2 != null);
      if (_tripleNotEquals_22) {
        String _string10 = string10;
        String _compileTotalCondition_1 = this.compileTotalCondition(expression.getTotalCondition());
        String _plus_54 = ("if(!(" + _compileTotalCondition_1);
        String _plus_55 = (_plus_54 + ")){");
        string10 = (_string10 + _plus_55);
      }
      String _string11 = string11;
      String _compileTotalOperation_1 = this.compileTotalOperation(expression.getElseExpression().getTotalOperation());
      string11 = (_string11 + _compileTotalOperation_1);
      TotalCondition _totalCondition_3 = expression.getTotalCondition();
      boolean _tripleNotEquals_23 = (_totalCondition_3 != null);
      if (_tripleNotEquals_23) {
        string13 = "}";
      }
      TotalCondition _totalCondition_4 = expression.getTotalCondition();
      boolean _tripleNotEquals_24 = (_totalCondition_4 != null);
      if (_tripleNotEquals_24) {
        string12 = "}";
      }
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append(string9);
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string9_1, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(onlyOne, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string10, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t");
      _builder_9.append(string11, "\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string13, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append(string12);
      _builder_9.newLineIfNotEmpty();
      string8 = _builder_9.toString();
      String _code_1 = code;
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append(string8);
      _builder_10.newLineIfNotEmpty();
      _builder_10.append("one=false;");
      _builder_10.newLine();
      _builder_10.append("}");
      _builder_10.newLine();
      code = (_code_1 + _builder_10);
      return code;
    }
    return null;
  }

  public CharSequence compileRequireGo(final Require require) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<String> _value = require.getValue();
      for(final String i : _value) {
        {
          boolean _equals = Objects.equal(i, "isTime");
          if (_equals) {
            _builder.append("// 用于判断是否达到指定时间的函数");
            _builder.newLine();
            _builder.append("func isTime(targetTime int) bool {");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("return time.Now() >= targetTime;");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          } else {
            boolean _equals_1 = Objects.equal(i, "logic");
            if (_equals_1) {
              _builder.append("// 辅助函数，根据比较符号执行比较");
              _builder.newLine();
              _builder.append("func logic(a, b uint, op string) bool {");
              _builder.newLine();
              _builder.append("    ");
              _builder.append("switch op {");
              _builder.newLine();
              _builder.append("    ");
              _builder.append("case \"<\":");
              _builder.newLine();
              _builder.append("    \t");
              _builder.append("return a < b");
              _builder.newLine();
              _builder.append("   \t");
              _builder.append("case \"<=\":");
              _builder.newLine();
              _builder.append("   \t\t");
              _builder.append("return a <= b");
              _builder.newLine();
              _builder.append("   \t");
              _builder.append("case \"==\":");
              _builder.newLine();
              _builder.append("   \t\t");
              _builder.append("return a == b");
              _builder.newLine();
              _builder.append("   \t");
              _builder.append("case \"!=\":");
              _builder.newLine();
              _builder.append("    \t");
              _builder.append("return a != b");
              _builder.newLine();
              _builder.append("    ");
              _builder.append("case \">\":");
              _builder.newLine();
              _builder.append("    \t");
              _builder.append("return a > b");
              _builder.newLine();
              _builder.append("    ");
              _builder.append("case \">=\":");
              _builder.newLine();
              _builder.append("    \t");
              _builder.append("return a >= b");
              _builder.newLine();
              _builder.append("    ");
              _builder.append("default:");
              _builder.newLine();
              _builder.append("    \t");
              _builder.append("// 如果操作符不匹配任何支持的操作符，则返回 false 或者其他适当的值。");
              _builder.newLine();
              _builder.append("    \t");
              _builder.append("return false");
              _builder.newLine();
              _builder.append("    ");
              _builder.append("}");
              _builder.newLine();
              _builder.append("}");
              _builder.newLine();
            } else {
              boolean _equals_2 = Objects.equal(i, "check");
              if (_equals_2) {
                _builder.append("func check(contractName string) bool {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("return true;");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
              } else {
                boolean _equals_3 = Objects.equal(i, "isDone");
                if (_equals_3) {
                  _builder.append("// 检查某个功能是否已经执行");
                  _builder.newLine();
                  _builder.append("func isDone(functionName string) bool {");
                  _builder.newLine();
                  _builder.append("    ");
                  _builder.append("return functionStatus[functionName];");
                  _builder.newLine();
                  _builder.append("}");
                  _builder.newLine();
                } else {
                  boolean _equals_4 = Objects.equal(i, "SetDate");
                  if (_equals_4) {
                    _builder.append("// isLeapYear 判断给定的年份是否是闰年");
                    _builder.newLine();
                    _builder.append("func isLeapYear(year uint16) bool {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("if year%4 != 0 {");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("return false");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("if year%100 != 0 {");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("return true");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("if year%400 != 0 {");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("return false");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("return true");
                    _builder.newLine();
                    _builder.append("}");
                    _builder.newLine();
                    _builder.newLine();
                    _builder.append("// getDaysInMonth 根据给定的月份和年份返回该月的天数");
                    _builder.newLine();
                    _builder.append("func getDaysInMonth(month uint8, year uint16) uint8 {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("switch month {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("case 1, 3, 5, 7, 8, 10, 12:");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("return 31");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("case 4, 6, 9, 11:");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("return 30");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("default:");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("if isLeapYear(year) {");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("return 29");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("return 28");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("}");
                    _builder.newLine();
                    _builder.newLine();
                    _builder.append("// convertToTimestamp 将给定的日期和时间转换为Unix时间戳");
                    _builder.newLine();
                    _builder.append("func convertToTimestamp(year uint16, month uint8, day uint8, hour uint8, minute uint8) uint64 {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("// 检查参数的有效性");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("if year < 1970 || month < 1 || month > 12 || day < 1 || day > getDaysInMonth(month, year) || hour > 23 || minute > 59 {");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("panic(\"Invalid input parameters\")");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("var timestamp uint64");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("// 计算年份之前的天数");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("for y := uint16(1970); y < year; y++ {");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("if isLeapYear(y) {");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("timestamp += 366 * 24 * 60 * 60");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("} else {");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("timestamp += 365 * 24 * 60 * 60");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("// 计算月份之前的天数");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("for m := uint8(1); m < month; m++ {");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("timestamp += uint64(getDaysInMonth(m, year)) * 24 * 60 * 60");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("// 加上日、小时和分钟的秒数");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("timestamp += uint64((day-1)*24*60*60 + hour*60*60 + minute*60)");
                    _builder.newLine();
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("return timestamp");
                    _builder.newLine();
                    _builder.append("}");
                    _builder.newLine();
                  } else {
                    boolean _equals_5 = Objects.equal(i, "timeSub");
                    if (_equals_5) {
                      _builder.append("// compareTimestamps 比较两个时间戳，并根据给定的操作符和自定义秒数返回布尔值");
                      _builder.newLine();
                      _builder.append("func compareTimestamps(timestamp1 uint64, timestamp2 uint64, customSeconds uint64, operator string) bool {");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("// 计算两个时间戳的差值（取绝对值）");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("var timeDifference uint64");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("if timestamp1 > timestamp2 {");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("timeDifference = timestamp1 - timestamp2");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("} else {");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("timeDifference = timestamp2 - timestamp1");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("// 判断操作符并执行相应的比较");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("switch strings.TrimSpace(operator) {");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("case \">\":");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("return timeDifference > customSeconds");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("case \"<\":");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("return timeDifference < customSeconds");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("case \"==\":");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("return timeDifference == customSeconds");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("case \"!==\":");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("return timeDifference != customSeconds");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("default:");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("panic(\"Invalid operator\")");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("}");
                      _builder.newLine();
                    } else {
                      boolean _equals_6 = Objects.equal(i, "transfer");
                      if (_equals_6) {
                        _builder.append("// transferTo 用于给指定地址转账并执行模拟支付流程");
                        _builder.newLine();
                        _builder.append("func transferTo(ctx *Context, recipient Person, amount uint) error {");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("if recipient == \"\" {");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("return fmt.Errorf(\"Invalid recipient address\")");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("if amount <= 0 {");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("return fmt.Errorf(\"Amount must be greater than zero\")");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("// 获取调用者的余额");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("user := ctx.Get(\"user\").(*Person)");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("callerBalance, err := user.Balance");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("if err != nil {");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("return fmt.Errorf(\"获取调用方余额失败: %v\", err)");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("// 获取接收方余额");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("recipientBalance, err := recipient.Balance");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("if err != nil {");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("return fmt.Errorf(\"获取接收方余额失败: %v\", err)");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("// 确保调用方有足够的余额支付");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("if callerBalance < amount {");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("return fmt.Errorf(\"调用方余额不足\")");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("// 扣除调用方的金额");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("callerBalance -= amount");
                        _builder.newLine();
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("// 增加接收方的金额");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("recipientBalance += amount");
                        _builder.newLine();
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("// 更新账户余额");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("if err := ctx.GetStub().PutState(user, callerBalance); err != nil {");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("return fmt.Errorf(\"更新调用方余额失败: %v\", err)");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("if err := ctx.GetStub().PutState(recipient, recipientBalance); err != nil {");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("return fmt.Errorf(\"更新接收方余额失败: %v\", err)");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("return nil");
                        _builder.newLine();
                        _builder.append("}");
                        _builder.newLine();
                      } else {
                        boolean _equals_7 = Objects.equal(i, "compareStrings");
                        if (_equals_7) {
                          _builder.append("func compareStrings(str1, str2 string) bool {");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("return str1 == str2");
                          _builder.newLine();
                          _builder.append("}");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }

  protected CharSequence _compileManyRuleGo(final AdditionExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }

  protected CharSequence _compileManyRuleGo(final RegularRuleExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }

  protected CharSequence _compileManyRuleGo(final ParallelExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }

  protected CharSequence _compileManyRuleGo(final ExclusiveExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    String code = _builder.toString();
    String varvalue = "";
    String string01 = (("var myBoolean" + Integer.valueOf(this.exclu)) + " bool := true");
    StringConcatenation _builder_1 = new StringConcatenation();
    String string02 = _builder_1.toString();
    int j = 0;
    EList<RuleExpression> _ruleExpression = expression.getRuleExpression();
    for (final RuleExpression rule : _ruleExpression) {
      {
        messageExpression _set = expression.getRuleExpression().get(j).getSet();
        boolean _tripleNotEquals = (_set != null);
        if (_tripleNotEquals) {
          String _defineMessage2 = this.defineMessage2(expression.getRuleExpression().get(j).getSet().getEverymassage());
          String _plus = ((varvalue + ",") + _defineMessage2);
          varvalue = _plus;
        }
        j = (j + 1);
      }
    }
    String string1 = "";
    string1 = ((((((string1 + "func exclusive") + Integer.valueOf(this.exclu)) + " (_choice int") + varvalue) + ")") + "{");
    String string2 = "";
    string2 = "var choice int := _choice;";
    int i = 0;
    StringConcatenation _builder_2 = new StringConcatenation();
    String code2 = _builder_2.toString();
    EList<RuleExpression> _ruleExpression_1 = expression.getRuleExpression();
    for (final RuleExpression rule_1 : _ruleExpression_1) {
      {
        String string3 = "";
        String string4 = "";
        string3 = (((("if(choice==" + Integer.valueOf(i)) + "&& myBoolean") + Integer.valueOf(this.exclu)) + "){");
        messageExpression _set = expression.getRuleExpression().get(i).getSet();
        boolean _tripleNotEquals = (_set != null);
        if (_tripleNotEquals) {
          String _name = expression.getRuleExpression().get(i).getName();
          String _plus = (_name + "(");
          String _defineMessage = this.defineMessage(expression.getRuleExpression().get(i).getSet().getEverymassage());
          String _plus_1 = (_plus + _defineMessage);
          String _plus_2 = (_plus_1 + ");");
          string4 = _plus_2;
        } else {
          String _name_1 = expression.getRuleExpression().get(i).getName();
          String _plus_3 = (_name_1 + "();");
          string4 = _plus_3;
        }
        String _code2 = code2;
        StringConcatenation _builder_3 = new StringConcatenation();
        _builder_3.append(string3);
        _builder_3.newLineIfNotEmpty();
        _builder_3.append("\t");
        _builder_3.append(string4, "\t");
        _builder_3.newLineIfNotEmpty();
        _builder_3.append("\t");
        _builder_3.append("myBoolean");
        _builder_3.append(this.exclu, "\t");
        _builder_3.append(" = false");
        _builder_3.newLineIfNotEmpty();
        _builder_3.append("\t");
        _builder_3.append("}");
        _builder_3.newLine();
        code2 = (_code2 + _builder_3);
        i = (i + 1);
      }
    }
    this.exclu = (this.exclu + 1);
    String _code = code;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append(string01);
    _builder_3.newLineIfNotEmpty();
    _builder_3.append("\t");
    _builder_3.append(string02, "\t");
    _builder_3.newLineIfNotEmpty();
    _builder_3.append(string1);
    _builder_3.newLineIfNotEmpty();
    _builder_3.append("\t");
    _builder_3.append(string2, "\t");
    _builder_3.newLineIfNotEmpty();
    _builder_3.append("\t");
    _builder_3.append(code2, "\t");
    _builder_3.newLineIfNotEmpty();
    _builder_3.append("}");
    _builder_3.newLine();
    code = (_code + _builder_3);
    return code;
  }

  public CharSequence compileSolidity(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// SPDX-License-Identifier: MIT");
    _builder.newLine();
    _builder.append("pragma solidity >=0.7.0 <0.9.0;");
    _builder.newLine();
    {
      EList<String> _packageName = model.getPackageName();
      for(final String name : _packageName) {
        _builder.append("import \"./");
        _builder.append(name);
        _builder.append(".sol\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("contract ");
    String _name = model.getName();
    _builder.append(_name);
    _builder.append(" ");
    {
      String _extendName = model.getExtendName();
      boolean _tripleNotEquals = (_extendName != null);
      if (_tripleNotEquals) {
        _builder.append(" is ");
        String _extendName_1 = model.getExtendName();
        _builder.append(_extendName_1);
        _builder.append(" ");
      }
    }
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.append("{ ");
    _builder.newLine();
    {
      ContractMessage _contractMessage = model.getContractMessage();
      boolean _tripleNotEquals_1 = (_contractMessage != null);
      if (_tripleNotEquals_1) {
        _builder.append("\t");
        CharSequence _compileMessage = this.compileMessage(model.getContractMessage());
        _builder.append(_compileMessage, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Subject> _subjects = model.getSubjects();
      for(final Subject subject : _subjects) {
        _builder.append("\t");
        CharSequence _compileSubject = this.compileSubject(subject);
        _builder.append(_compileSubject, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<org.xtext.example.mydsl.sparrow.Object> _objects = model.getObjects();
      for(final org.xtext.example.mydsl.sparrow.Object object : _objects) {
        _builder.append("\t");
        CharSequence _compileObject = this.compileObject(object);
        _builder.append(_compileObject, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Initialize _initialize = model.getInitialize();
      boolean _tripleNotEquals_2 = (_initialize != null);
      if (_tripleNotEquals_2) {
        _builder.append("\t");
        CharSequence _compileInit = this.compileInit(model.getInitialize());
        _builder.append(_compileInit, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Group> _group = model.getGroup();
      for(final Group group : _group) {
        _builder.append("\t");
        String _compileGroup = this.compileGroup(group);
        _builder.append(_compileGroup, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("constructor() {");
    _builder.newLine();
    {
      EList<Group> _group_1 = model.getGroup();
      for(final Group group_1 : _group_1) {
        {
          EList<initExpressions> _value = group_1.getValue();
          for(final initExpressions value : _value) {
            _builder.append("\t\t");
            String _name_1 = group_1.getName();
            _builder.append(_name_1, "\t\t");
            _builder.append(".push(");
            String _name_2 = value.getName();
            _builder.append(_name_2, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event completedRule(address indexed person, string rulename);");
    _builder.newLine();
    {
      Operation _operations = model.getOperations();
      boolean _tripleNotEquals_3 = (_operations != null);
      if (_tripleNotEquals_3) {
        _builder.append("\t");
        String _compileOperation = this.compileOperation(model.getOperations());
        _builder.append(_compileOperation, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Condition _conditions = model.getConditions();
      boolean _tripleNotEquals_4 = (_conditions != null);
      if (_tripleNotEquals_4) {
        _builder.append("\t");
        String _compileCondition = this.compileCondition(model.getConditions());
        _builder.append(_compileCondition, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<ManyRuleExpression> _manyRuleExpression = model.getRuleStructures().getManyRuleExpression();
      for(final ManyRuleExpression i : _manyRuleExpression) {
        _builder.append("\t");
        CharSequence _compileManyRule = this.compileManyRule(i);
        _builder.append(_compileManyRule, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      RuleStructure _ruleStructures = model.getRuleStructures();
      boolean _tripleNotEquals_5 = (_ruleStructures != null);
      if (_tripleNotEquals_5) {
        _builder.append("\t");
        CharSequence _compileRule = this.compileRule(model.getRuleStructures());
        _builder.append(_compileRule, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Require _require = model.getRequire();
      boolean _tripleNotEquals_6 = (_require != null);
      if (_tripleNotEquals_6) {
        _builder.append("\t");
        CharSequence _compileRequire = this.compileRequire(model.getRequire());
        _builder.append(_compileRequire, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("modifier unDone(string memory functionName){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("require(!(functionStatus[functionName]),\"require do this function unsucessfully\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("_;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event ContractStateChange(string newState);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// 自定义 modifier：根据字符串参数值允许或禁止执行");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("modifier onlyState(string memory State) {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("require(compareStrings(State, \"start\") || compareStrings(State, \"restart\"), \"Not allowed in this state\");");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("emit ContractStateChange(State);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("_;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// 辅助函数，比较两个字符串是否相等");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("function compareStrings(string memory a, string memory b) internal pure returns (bool) {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("return (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b)));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//每个条款固定调用函数，条款执行后更改条款状态，记录事件和时间");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("function changeRule(string memory ruleName) internal {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("functionStatus[ruleName] = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("functionFinishTime[ruleName]=block.timestamp;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("emit completedRule(msg.sender,ruleName);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  protected CharSequence _compileManyRule(final AdditionExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }

  protected CharSequence _compileManyRule(final RegularRuleExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }

  protected CharSequence _compileManyRule(final ParallelExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }

  protected CharSequence _compileManyRule(final ExclusiveExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    String code = _builder.toString();
    String varvalue = "";
    String string01 = (("mapping(uint => string) public Exclusive" + Integer.valueOf(this.exclu)) + " ;");
    StringConcatenation _builder_1 = new StringConcatenation();
    String string02 = _builder_1.toString();
    String _string02 = string02;
    string02 = (_string02 + (("function initializeExclusive" + Integer.valueOf(this.exclu)) + "() public {\n"));
    int index = 0;
    EList<RuleExpression> _ruleExpression = expression.getRuleExpression();
    for (final RuleExpression rule : _ruleExpression) {
      {
        String _string02_1 = string02;
        String _name = rule.getName();
        String _plus = (((((("Exclusive" + Integer.valueOf(this.exclu)) + "[") + Integer.valueOf(index)) + "]") + "=\"") + _name);
        String _plus_1 = (_plus + "\";\n");
        string02 = (_string02_1 + _plus_1);
        index = (index + 1);
      }
    }
    String _string02_1 = string02;
    string02 = (_string02_1 + "}");
    int j = 0;
    EList<RuleExpression> _ruleExpression_1 = expression.getRuleExpression();
    for (final RuleExpression rule_1 : _ruleExpression_1) {
      {
        messageExpression _set = expression.getRuleExpression().get(j).getSet();
        boolean _tripleNotEquals = (_set != null);
        if (_tripleNotEquals) {
          String _defineMessage2 = this.defineMessage2(expression.getRuleExpression().get(j).getSet().getEverymassage());
          String _plus = ((varvalue + ",") + _defineMessage2);
          varvalue = _plus;
        }
        j = (j + 1);
      }
    }
    String string1 = "";
    String _name = expression.getRuleExpression().get(0).getTotalOperation().getPerson().getName();
    String _plus = ((((((string1 + "function exclusive") + Integer.valueOf(this.exclu)) + " (uint _choice") + varvalue) + ") public payable \r\n\t\t\tonly") + _name);
    String _plus_1 = (_plus + " {");
    string1 = _plus_1;
    String string2 = "";
    string2 = "uint choice=_choice;";
    int i = 0;
    StringConcatenation _builder_2 = new StringConcatenation();
    String code2 = _builder_2.toString();
    EList<RuleExpression> _ruleExpression_2 = expression.getRuleExpression();
    for (final RuleExpression rule_2 : _ruleExpression_2) {
      {
        String string3 = "";
        String string4 = "";
        string3 = (("if(choice==" + Integer.valueOf(i)) + ")");
        messageExpression _set = expression.getRuleExpression().get(i).getSet();
        boolean _tripleNotEquals = (_set != null);
        if (_tripleNotEquals) {
          String _name_1 = expression.getRuleExpression().get(i).getName();
          String _plus_2 = (_name_1 + "(");
          String _defineMessage = this.defineMessage(expression.getRuleExpression().get(i).getSet().getEverymassage());
          String _plus_3 = (_plus_2 + _defineMessage);
          String _plus_4 = (_plus_3 + ");");
          string4 = _plus_4;
        } else {
          String _name_2 = expression.getRuleExpression().get(i).getName();
          String _plus_5 = (_name_2 + "();");
          string4 = _plus_5;
        }
        String _code2 = code2;
        StringConcatenation _builder_3 = new StringConcatenation();
        _builder_3.append(string3);
        _builder_3.newLineIfNotEmpty();
        _builder_3.append("\t");
        _builder_3.append(string4, "\t");
        _builder_3.newLineIfNotEmpty();
        code2 = (_code2 + _builder_3);
        i = (i + 1);
      }
    }
    this.exclu = (this.exclu + 1);
    String _code = code;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append(string01);
    _builder_3.newLineIfNotEmpty();
    _builder_3.append("\t");
    _builder_3.append(string02, "\t");
    _builder_3.newLineIfNotEmpty();
    _builder_3.append(string1);
    _builder_3.newLineIfNotEmpty();
    _builder_3.append("\t");
    _builder_3.append(string2, "\t");
    _builder_3.newLineIfNotEmpty();
    _builder_3.append("\t");
    _builder_3.append(code2, "\t");
    _builder_3.newLineIfNotEmpty();
    _builder_3.append("}");
    _builder_3.newLine();
    code = (_code + _builder_3);
    return code;
  }

  public String defineMessage2(final EList<everyMessage> list) {
    String result = "";
    for (final everyMessage i : list) {
      String _type = i.getType();
      String _plus = (", " + _type);
      String _plus_1 = (_plus + " _");
      String _message = i.getMessage();
      String _plus_2 = (_plus_1 + _message);
      result = _plus_2;
    }
    return result;
  }

  public String defineMessage(final EList<everyMessage> list) {
    boolean isFirst = true;
    String result = "";
    for (final everyMessage i : list) {
      {
        if ((!isFirst)) {
          result = (", " + result);
        }
        String _result = result;
        String _message = i.getMessage();
        result = (_result + _message);
        isFirst = false;
      }
    }
    return result;
  }

  public CharSequence compileRequire(final Require require) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<String> _value = require.getValue();
      for(final String i : _value) {
        {
          boolean _equals = Objects.equal(i, "isTime");
          if (_equals) {
            _builder.append("// 用于判断是否达到指定时间的函数");
            _builder.newLine();
            _builder.append("function isTime(uint256 targetTime) internal view returns (bool) {");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("return block.timestamp >= targetTime;");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          } else {
            boolean _equals_1 = Objects.equal(i, "logic");
            if (_equals_1) {
              _builder.append("// 辅助函数，根据比较符号执行比较");
              _builder.newLine();
              _builder.append("    ");
              _builder.append("function compare(uint a, uint b, string memory op) internal pure returns (bool) {");
              _builder.newLine();
              _builder.append("        ");
              _builder.append("if (compareStrings(op, \">\")) {");
              _builder.newLine();
              _builder.append("            ");
              _builder.append("return a > b;");
              _builder.newLine();
              _builder.append("        ");
              _builder.append("} else if (compareStrings(op, \"<\")) {");
              _builder.newLine();
              _builder.append("            ");
              _builder.append("return a < b;");
              _builder.newLine();
              _builder.append("        ");
              _builder.append("} else if (compareStrings(op, \">=\")) {");
              _builder.newLine();
              _builder.append("            ");
              _builder.append("return a >= b;");
              _builder.newLine();
              _builder.append("        ");
              _builder.append("} else if (compareStrings(op, \"<=\")) {");
              _builder.newLine();
              _builder.append("            ");
              _builder.append("return a <= b;");
              _builder.newLine();
              _builder.append("        ");
              _builder.append("} else if (compareStrings(op, \"==\")) {");
              _builder.newLine();
              _builder.append("            ");
              _builder.append("return a == b;");
              _builder.newLine();
              _builder.append("        ");
              _builder.append("} else if (compareStrings(op, \"!=\")) {");
              _builder.newLine();
              _builder.append("            ");
              _builder.append("return a != b;");
              _builder.newLine();
              _builder.append("        ");
              _builder.append("}");
              _builder.newLine();
              _builder.append("        ");
              _builder.append("revert(\"Invalid operator.\");");
              _builder.newLine();
              _builder.append("    ");
              _builder.append("}");
              _builder.newLine();
              _builder.newLine();
              _builder.newLine();
              _builder.append("    ");
              _builder.append("// 只有当满足条件 valueA > valueB 时，才能执行 setValue 函数");
              _builder.newLine();
              _builder.append("    ");
              _builder.append("function logic(uint256 valueA, uint256 valueB, string memory symbol) internal pure returns (bool) {");
              _builder.newLine();
              _builder.append("        ");
              _builder.append("return compare(valueA, valueB, symbol);");
              _builder.newLine();
              _builder.append("    ");
              _builder.append("}");
              _builder.newLine();
            } else {
              boolean _equals_2 = Objects.equal(i, "check");
              if (_equals_2) {
                _builder.append("function check(string memory contractName) public view returns (bool){");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("return true;");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
              } else {
                boolean _equals_3 = Objects.equal(i, "isDone");
                if (_equals_3) {
                  _builder.append("// 检查某个功能是否已经执行");
                  _builder.newLine();
                  _builder.append("function isDone(string memory functionName) internal view returns (bool) {");
                  _builder.newLine();
                  _builder.append("    ");
                  _builder.append("return functionStatus[functionName];");
                  _builder.newLine();
                  _builder.append("}");
                  _builder.newLine();
                } else {
                  boolean _equals_4 = Objects.equal(i, "isCompleted");
                  if (_equals_4) {
                    _builder.append("function isCompleted(string memory ruleName) internal view returns (bool){");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("return true;");
                    _builder.newLine();
                    _builder.append("}");
                    _builder.newLine();
                  } else {
                    boolean _equals_5 = Objects.equal(i, "SetDate");
                    if (_equals_5) {
                      _builder.append("function isLeapYear(uint16 year) internal pure returns (bool) {");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("if (year % 4 != 0) {");
                      _builder.newLine();
                      _builder.append("        ");
                      _builder.append("return false;");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("if (year % 100 != 0) {");
                      _builder.newLine();
                      _builder.append("        ");
                      _builder.append("return true;");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("if (year % 400 != 0) {");
                      _builder.newLine();
                      _builder.append("        ");
                      _builder.append("return false;");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("return true;");
                      _builder.newLine();
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t\t\t\t");
                      _builder.newLine();
                      _builder.append("function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {");
                      _builder.newLine();
                      _builder.append("        ");
                      _builder.append("return 31;");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("} else if (month == 4 || month == 6 || month == 9 || month == 11) {");
                      _builder.newLine();
                      _builder.append("        ");
                      _builder.append("return 30;");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("} else if (isLeapYear(year)) {");
                      _builder.newLine();
                      _builder.append("        ");
                      _builder.append("return 29;");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("} else {");
                      _builder.newLine();
                      _builder.append("        ");
                      _builder.append("return 28;");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t\t\t\t");
                      _builder.newLine();
                      _builder.append("function convertToTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint256) {");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("require(year >= 1970, \"Year must be 1970 or later\");");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("require(month >= 1 && month <= 12, \"Invalid month\");");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("require(day >= 1 && day <= getDaysInMonth(month, year), \"Invalid day\");");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("require(hour >= 0 && hour <= 23, \"Invalid hour\");");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("require(minute >= 0 && minute <= 59, \"Invalid minute\");");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("uint256 timestamp = 0;");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("for (uint16 y = 1970; y < year; y++) {");
                      _builder.newLine();
                      _builder.append("        ");
                      _builder.append("if (isLeapYear(y)) {");
                      _builder.newLine();
                      _builder.append("            ");
                      _builder.append("timestamp += 366 days;");
                      _builder.newLine();
                      _builder.append("        ");
                      _builder.append("} else {");
                      _builder.newLine();
                      _builder.append("            ");
                      _builder.append("timestamp += 365 days;");
                      _builder.newLine();
                      _builder.append("        ");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("for (uint8 m = 1; m < month; m++) {");
                      _builder.newLine();
                      _builder.append("        ");
                      _builder.append("timestamp += uint256(getDaysInMonth(m, year)) * 1 days;");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("timestamp += uint256(day - 1) * 1 days;");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("timestamp += uint256(hour) * 1 hours;");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("timestamp += uint256(minute) * 1 minutes;");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("return timestamp;");
                      _builder.newLine();
                      _builder.append("}");
                      _builder.newLine();
                    } else {
                      boolean _equals_6 = Objects.equal(i, "timeSub");
                      if (_equals_6) {
                        _builder.append("function compareTimestamps(uint256 timestamp1, uint256 timestamp2, uint256 customSeconds, string memory operator) internal pure returns (bool) {");
                        _builder.newLine();
                        _builder.append("       ");
                        _builder.append("// 计算两个时间戳的差值（取绝对值，确保差值为正数）");
                        _builder.newLine();
                        _builder.append("       ");
                        _builder.append("uint256 timeDifference = timestamp1 - timestamp2;");
                        _builder.newLine();
                        _builder.append("       ");
                        _builder.append("if (keccak256(bytes(operator)) == keccak256(bytes(\">\"))) {");
                        _builder.newLine();
                        _builder.append("           ");
                        _builder.append("return timeDifference > customSeconds;");
                        _builder.newLine();
                        _builder.append("       ");
                        _builder.append("} else if (keccak256(bytes(operator)) == keccak256(bytes(\"<\"))) {");
                        _builder.newLine();
                        _builder.append("           ");
                        _builder.append("return timeDifference < customSeconds;");
                        _builder.newLine();
                        _builder.append("       ");
                        _builder.append("} else if (keccak256(bytes(operator)) == keccak256(bytes(\"==\"))) {");
                        _builder.newLine();
                        _builder.append("           ");
                        _builder.append("return timeDifference == customSeconds;");
                        _builder.newLine();
                        _builder.append("       ");
                        _builder.append("} else if (keccak256(bytes(operator)) == keccak256(bytes(\"!==\"))) {");
                        _builder.newLine();
                        _builder.append("           ");
                        _builder.append("return timeDifference != customSeconds;");
                        _builder.newLine();
                        _builder.append("       ");
                        _builder.append("} else {");
                        _builder.newLine();
                        _builder.append("           ");
                        _builder.append("revert(\"Invalid operator\");");
                        _builder.newLine();
                        _builder.append("       ");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("   ");
                        _builder.append("}");
                        _builder.newLine();
                      } else {
                        boolean _equals_7 = Objects.equal(i, "transfer");
                        if (_equals_7) {
                          _builder.append("event Transfer(address indexed from, address indexed to, uint amount);");
                          _builder.newLine();
                          _builder.append("// 用于给指定地址转账");
                          _builder.newLine();
                          _builder.append("function transferTo(address payable recipient, uint amount) internal {");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("require(recipient != address(0), \"Invalid recipient address\");");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("require(amount > 0, \"Amount must be greater than zero\");");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("recipient.transfer(amount);");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("emit Transfer(msg.sender,recipient, amount);");
                          _builder.newLine();
                          _builder.append("}");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }

  public CharSequence compileMessage(final ContractMessage message) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Message> _message = message.getMessage();
      for(final Message i : _message) {
        {
          String _type = i.getType().getType();
          boolean _equals = Objects.equal(_type, "date");
          if (_equals) {
            _builder.append("uint256 public ");
            String _name = i.getType().getName();
            _builder.append(_name);
            _builder.append(" = ");
            Object _compilevalue = this.compilevalue(i.getValue());
            _builder.append(_compilevalue);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          } else {
            String _type_1 = i.getType().getType();
            boolean _equals_1 = Objects.equal(_type_1, "address");
            if (_equals_1) {
              String _type_2 = i.getType().getType();
              _builder.append(_type_2);
              _builder.append(" public ");
              String _name_1 = i.getType().getName();
              _builder.append(_name_1);
              _builder.append(" = payable(");
              Object _compilevalue_1 = this.compilevalue(i.getValue());
              _builder.append(_compilevalue_1);
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              String _type_3 = i.getType().getType();
              boolean _equals_2 = Objects.equal(_type_3, "duration");
              if (_equals_2) {
                _builder.append("uint256 public ");
                String _name_2 = i.getType().getName();
                _builder.append(_name_2);
                _builder.append(" = ");
                Object _compilevalue_2 = this.compilevalue(i.getValue());
                _builder.append(_compilevalue_2);
                _builder.append(" ;");
                _builder.newLineIfNotEmpty();
              } else {
                if ((Objects.equal(i.getType().getType(), "ufixed") || Objects.equal(i.getType().getType(), "fixed"))) {
                  _builder.append("uint256 public ");
                  String _name_3 = i.getType().getName();
                  _builder.append(_name_3);
                  _builder.append(" = ");
                  Object _compilevalue_3 = this.compilevalue(i.getValue());
                  _builder.append(_compilevalue_3);
                  _builder.append(" ;");
                  _builder.newLineIfNotEmpty();
                } else {
                  if (((!Objects.equal(i.getType().getType(), "date")) && (!Objects.equal(i.getType().getType(), "address")))) {
                    String _type_4 = i.getType().getType();
                    _builder.append(_type_4);
                    _builder.append(" public ");
                    String _name_4 = i.getType().getName();
                    _builder.append(_name_4);
                    _builder.append(" = ");
                    Object _compilevalue_4 = this.compilevalue(i.getValue());
                    _builder.append(_compilevalue_4);
                    _builder.append(" ;");
                  }
                }
              }
            }
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("string public ContractState=\"start\";");
    _builder.newLine();
    _builder.append("mapping(string => bool) public functionStatus;");
    _builder.newLine();
    _builder.append("mapping(string => uint) public functionFinishTime;\t");
    _builder.newLine();
    return _builder;
  }

  public CharSequence compileSubject(final Subject subject) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("struct ");
    String _name = subject.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      String _type = subject.getType();
      boolean _notEquals = (!Objects.equal(_type, "CA"));
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("string name;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("address payable account;");
        _builder.newLine();
      }
    }
    {
      String _type_1 = subject.getType();
      boolean _equals = Objects.equal(_type_1, "CA");
      if (_equals) {
        _builder.append("\t");
        _builder.append("string name;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("address payable account;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("uint256 key;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("uint256 year;");
        _builder.newLine();
      }
    }
    {
      SubjectExpression _subjectExpression = subject.getSubjectExpression();
      boolean _tripleNotEquals = (_subjectExpression != null);
      if (_tripleNotEquals) {
        _builder.append("\t");
        CharSequence _compileSubjectExpression = this.compileSubjectExpression(subject.getSubjectExpression());
        _builder.append(_compileSubjectExpression, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence compileSubjectExpression(final SubjectExpression SuE) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<keyvalue> _keyValue = SuE.getKeyValue();
      for(final keyvalue key : _keyValue) {
        {
          if ((Objects.equal(key.getType(), "date") || Objects.equal(key.getType(), "ufixed"))) {
            _builder.append("uint256  ");
            String _name = key.getName();
            _builder.append(_name);
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          } else {
            if (((!Objects.equal(key.getType(), "date")) && (!Objects.equal(key.getType(), "ufixed")))) {
              String _type = key.getType();
              _builder.append(_type);
              _builder.append("   ");
              String _name_1 = key.getName();
              _builder.append(_name_1);
              _builder.append(" ; ");
            }
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public CharSequence compileObject(final org.xtext.example.mydsl.sparrow.Object object) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("struct ");
    String _name = object.getName();
    _builder.append(_name, "\t");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t   ");
    CharSequence _compileObjectExpression = this.compileObjectExpression(object.getObjectExpression());
    _builder.append(_compileObjectExpression, "\t   ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }

  public CharSequence compileObjectExpression(final ObjectExpression ObE) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<keyvalue> _keyValue = ObE.getKeyValue();
      for(final keyvalue key : _keyValue) {
        {
          if ((Objects.equal(key.getType(), "date") || Objects.equal(key.getType(), "ufixed"))) {
            _builder.append("uint256  ");
            String _name = key.getName();
            _builder.append(_name);
            _builder.append(" ;");
            _builder.newLineIfNotEmpty();
          } else {
            if (((!Objects.equal(key.getType(), "date")) && (!Objects.equal(key.getType(), "ufixed")))) {
              String _type = key.getType();
              _builder.append(_type);
              _builder.append("   ");
              String _name_1 = key.getName();
              _builder.append(_name_1);
              _builder.append(" ; ");
            }
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public CharSequence compileInit(final Initialize init) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<initExpressions> _inits = init.getInits();
      for(final initExpressions sinit : _inits) {
        String _name = sinit.getSubtype().getName();
        _builder.append(_name);
        _builder.append(" public ");
        String _name_1 = sinit.getName();
        _builder.append(_name_1);
        _builder.append(" = ");
        String _name_2 = sinit.getSubtype().getName();
        _builder.append(_name_2);
        _builder.append("(");
        String _compilevaluelist = this.compilevaluelist(sinit.getValue());
        _builder.append(_compilevaluelist);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<initExpressions> _inits_1 = init.getInits();
      for(final initExpressions sinit_1 : _inits_1) {
        _builder.append("modifier only");
        String _name_3 = sinit_1.getName();
        _builder.append(_name_3);
        _builder.append("(){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("require(msg.sender == ");
        String _name_4 = sinit_1.getName();
        _builder.append(_name_4, "\t");
        _builder.append(".account,\"Only ");
        String _name_5 = sinit_1.getName();
        _builder.append(_name_5, "\t");
        _builder.append(" can access this.\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t ");
        _builder.append("_; ");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      EList<initExpressiono> _inito = init.getInito();
      for(final initExpressiono oinit : _inito) {
        String _name_6 = oinit.getObtype().getName();
        _builder.append(_name_6);
        _builder.append(" public ");
        String _name_7 = oinit.getName();
        _builder.append(_name_7);
        _builder.append(" = ");
        String _name_8 = oinit.getObtype().getName();
        _builder.append(_name_8);
        _builder.append("(");
        String _compilevaluelist_1 = this.compilevaluelist(oinit.getValue());
        _builder.append(_compilevaluelist_1);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public String compilevaluelist(final EList<Value> list) {
    boolean isFirst = true;
    String result = "";
    for (final Value value : list) {
      {
        if ((!isFirst)) {
          String _result = result;
          result = (_result + ", ");
        }
        String _result_1 = result;
        Object _compilevalue = this.compilevalue(value);
        result = (_result_1 + _compilevalue);
        isFirst = false;
      }
    }
    return result;
  }

  protected Object _compilevalue(final Address value) {
    String _value = value.getValue();
    String _plus = ("payable(" + _value);
    return (_plus + ")");
  }

  protected Object _compilevalue(final AllNumber value) {
    return Integer.valueOf(value.getNumber());
  }

  protected Object _compilevalue(final Now value) {
    return "block.timestamp";
  }

  protected Object _compilevalue(final ThisDecimal value) {
    double _stringToDouble = this.stringToDouble(value.getValue());
    return Double.valueOf((_stringToDouble * 1000));
  }

  public double stringToDouble(final String str) {
    return Double.parseDouble(str);
  }

  protected Object _compilevalue(final url value) {
    return value.getValue();
  }

  protected Object _compilevalue(final ThisString value) {
    String _value = value.getValue();
    String _plus = ("\"" + _value);
    return (_plus + "\"");
  }

  protected Object _compilevalue(final ThisBoolean value) {
    return value.getValue();
  }

  protected Object _compilevalue(final Duration value) {
    String _symbol = value.getSymbol();
    boolean _equals = Objects.equal(_symbol, "months");
    if (_equals) {
      int _value = value.getValue();
      int _multiply = (_value * 60);
      int _multiply_1 = (_multiply * 60);
      int _multiply_2 = (_multiply_1 * 24);
      return Integer.valueOf((_multiply_2 * 30));
    } else {
      String _symbol_1 = value.getSymbol();
      boolean _equals_1 = Objects.equal(_symbol_1, "days");
      if (_equals_1) {
        int _value_1 = value.getValue();
        int _multiply_3 = (_value_1 * 60);
        int _multiply_4 = (_multiply_3 * 60);
        return Integer.valueOf((_multiply_4 * 24));
      } else {
        String _symbol_2 = value.getSymbol();
        boolean _equals_2 = Objects.equal(_symbol_2, "mins");
        if (_equals_2) {
          int _value_2 = value.getValue();
          return Integer.valueOf((_value_2 * 60));
        } else {
          String _symbol_3 = value.getSymbol();
          boolean _equals_3 = Objects.equal(_symbol_3, "hours");
          if (_equals_3) {
            int _value_3 = value.getValue();
            int _multiply_5 = (_value_3 * 60);
            return Integer.valueOf((_multiply_5 * 60));
          } else {
            String _symbol_4 = value.getSymbol();
            boolean _equals_4 = Objects.equal(_symbol_4, "years");
            if (_equals_4) {
              int _value_4 = value.getValue();
              int _multiply_6 = (_value_4 * 60);
              int _multiply_7 = (_multiply_6 * 60);
              int _multiply_8 = (_multiply_7 * 24);
              int _multiply_9 = (_multiply_8 * 30);
              return Integer.valueOf((_multiply_9 * 365));
            }
          }
        }
      }
    }
    return null;
  }

  protected Object _compilevalue(final ThisDate value) {
    return Long.valueOf(this.toTimestamp(value.getValue().getYear(), value.getValue().getMonth(), value.getValue().getDay(), value.getValue().getHour(), value.getValue().getMin()));
  }

  protected Object _compilevalue(final Right value) {
    String _name = value.getRight().getName();
    String _plus = ("\"" + _name);
    return (_plus + "\"");
  }

  public String compilevalue2(final Address value) {
    String _value = value.getValue();
    String _plus = ("payable(" + _value);
    return (_plus + ")");
  }

  public String compileGroup(final Group group) {
    StringConcatenation _builder = new StringConcatenation();
    String string = _builder.toString();
    String string1 = "";
    boolean first = true;
    EList<initExpressions> _value = group.getValue();
    for (final initExpressions i : _value) {
      if ((!first)) {
        String _string1 = string1;
        String _name = i.getName();
        String _plus = ("," + _name);
        string1 = (_string1 + _plus);
      } else {
        String _string1_1 = string1;
        String _name_1 = i.getName();
        string1 = (_string1_1 + _name_1);
        first = false;
      }
    }
    String _name_2 = group.getSubtype().getName();
    String _plus_1 = (_name_2 + "[] public ");
    String _name_3 = group.getName();
    String _plus_2 = (_plus_1 + _name_3);
    String _plus_3 = (_plus_2 + ";");
    string1 = _plus_3;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("// Modifier：仅允许一堆结构体中的任何一个地址执行");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("modifier only");
    String _name_4 = group.getName();
    _builder_1.append(_name_4, "    ");
    _builder_1.append("() {");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("        ");
    _builder_1.append("bool found = false;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("for (uint256 i = 0; i < ");
    String _name_5 = group.getName();
    _builder_1.append(_name_5, "        ");
    _builder_1.append(".length; i++) {");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("            ");
    _builder_1.append("if (");
    String _name_6 = group.getName();
    _builder_1.append(_name_6, "            ");
    _builder_1.append("[i].account == msg.sender) {");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("                ");
    _builder_1.append("found = true;");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("break;");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("require(found, \"Permission denied\");");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    String string2 = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append(string1);
    _builder_2.newLineIfNotEmpty();
    _builder_2.append(string2);
    _builder_2.newLineIfNotEmpty();
    string = _builder_2.toString();
    return string;
  }

  public String compileOperation(final Operation operation) {
    StringConcatenation _builder = new StringConcatenation();
    String myString = _builder.toString();
    EList<OperateLink> _operates = operation.getOperates();
    for (final OperateLink everyoperation : _operates) {
      {
        String _name = everyoperation.getName();
        String _plus = ("function " + _name);
        String string1 = (_plus + "() internal{");
        String string2 = "";
        trueOperation _firstOperation = everyoperation.getFirstOperation();
        boolean _tripleNotEquals = (_firstOperation != null);
        if (_tripleNotEquals) {
          string2 = this.compileTrueOperate(everyoperation.getFirstOperation());
        } else {
          OperateLink _linkOperation = everyoperation.getLinkOperation();
          boolean _tripleNotEquals_1 = (_linkOperation != null);
          if (_tripleNotEquals_1) {
            String _name_1 = everyoperation.getLinkOperation().getName();
            String _plus_1 = (_name_1 + "();");
            string2 = _plus_1;
          }
        }
        StringConcatenation _builder_1 = new StringConcatenation();
        String string3 = _builder_1.toString();
        EList<AndOrOperationLink> _andOrLink = everyoperation.getAndOrLink();
        for (final AndOrOperationLink everylink : _andOrLink) {
          trueOperation _firstOperation_1 = everylink.getFirstOperation();
          boolean _tripleNotEquals_2 = (_firstOperation_1 != null);
          if (_tripleNotEquals_2) {
            String _string3 = string3;
            String _compileTrueOperate = this.compileTrueOperate(everylink.getFirstOperation());
            string3 = (_string3 + _compileTrueOperate);
          } else {
            OperateLink _linkOperation_1 = everylink.getLinkOperation();
            boolean _tripleNotEquals_3 = (_linkOperation_1 != null);
            if (_tripleNotEquals_3) {
              String _string3_1 = string3;
              String _name_2 = everylink.getLinkOperation().getName();
              String _plus_2 = (_name_2 + "();");
              string3 = (_string3_1 + _plus_2);
            }
          }
        }
        String _myString = myString;
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append(string1);
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        _builder_2.append(string2, "\t");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        _builder_2.append(string3, "\t");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("}");
        _builder_2.newLine();
        myString = (_myString + _builder_2);
      }
    }
    return myString;
  }

  public String compileCondition(final Condition condition) {
    StringConcatenation _builder = new StringConcatenation();
    String myString = _builder.toString();
    EList<ConditionLink> _conditions = condition.getConditions();
    for (final ConditionLink everycondition : _conditions) {
      {
        String _name = everycondition.getName();
        String _plus = ("function " + _name);
        String string1 = (_plus + "() internal view returns (bool) {");
        String string2 = "";
        SingleCondition _conditionExpression = everycondition.getConditionExpression();
        boolean _tripleNotEquals = (_conditionExpression != null);
        if (_tripleNotEquals) {
          String _no = everycondition.getConditionExpression().getNo();
          boolean _tripleNotEquals_1 = (_no != null);
          if (_tripleNotEquals_1) {
            Object _compileTrueCondition = this.compileTrueCondition(everycondition.getConditionExpression().getCondition());
            String _plus_1 = (("if (" + "!") + _compileTrueCondition);
            string2 = _plus_1;
          } else {
            Object _compileTrueCondition_1 = this.compileTrueCondition(everycondition.getConditionExpression().getCondition());
            String _plus_2 = ("if (" + _compileTrueCondition_1);
            string2 = _plus_2;
          }
        } else {
          SingleLinkCondition _linkCondition = everycondition.getLinkCondition();
          boolean _tripleNotEquals_2 = (_linkCondition != null);
          if (_tripleNotEquals_2) {
            String _no_1 = everycondition.getLinkCondition().getNo();
            boolean _tripleNotEquals_3 = (_no_1 != null);
            if (_tripleNotEquals_3) {
              String _name_1 = everycondition.getLinkCondition().getLinkCondition().getName();
              String _plus_3 = (("if (" + "!") + _name_1);
              String _plus_4 = (_plus_3 + "()");
              string2 = _plus_4;
            } else {
              String _name_2 = everycondition.getLinkCondition().getLinkCondition().getName();
              String _plus_5 = ("if (" + _name_2);
              String _plus_6 = (_plus_5 + "()");
              string2 = _plus_6;
            }
          }
        }
        EList<AndOrCondition> _andOrLink = everycondition.getAndOrLink();
        for (final AndOrCondition everylink : _andOrLink) {
          {
            String _link = everylink.getLink();
            boolean _equals = Objects.equal(_link, "And");
            if (_equals) {
              SingleCondition _condition = everylink.getCondition();
              boolean _tripleNotEquals_4 = (_condition != null);
              if (_tripleNotEquals_4) {
                String _no_2 = everylink.getCondition().getNo();
                boolean _tripleNotEquals_5 = (_no_2 != null);
                if (_tripleNotEquals_5) {
                  String _string2 = string2;
                  Object _compileTrueCondition_2 = this.compileTrueCondition(everylink.getCondition().getCondition());
                  String _plus_7 = (("&&" + " !") + _compileTrueCondition_2);
                  string2 = (_string2 + _plus_7);
                } else {
                  String _string2_1 = string2;
                  Object _compileTrueCondition_3 = this.compileTrueCondition(everylink.getCondition().getCondition());
                  String _plus_8 = ("&&" + _compileTrueCondition_3);
                  string2 = (_string2_1 + _plus_8);
                }
              }
              SingleLinkCondition _linkCondition_1 = everylink.getLinkCondition();
              boolean _tripleNotEquals_6 = (_linkCondition_1 != null);
              if (_tripleNotEquals_6) {
                String _no_3 = everylink.getLinkCondition().getNo();
                boolean _tripleNotEquals_7 = (_no_3 != null);
                if (_tripleNotEquals_7) {
                  String _string2_2 = string2;
                  String _name_3 = everylink.getLinkCondition().getLinkCondition().getName();
                  String _plus_9 = (("&&" + " !") + _name_3);
                  String _plus_10 = (_plus_9 + "()");
                  string2 = (_string2_2 + _plus_10);
                } else {
                  String _string2_3 = string2;
                  String _name_4 = everylink.getLinkCondition().getLinkCondition().getName();
                  String _plus_11 = ("&&" + _name_4);
                  String _plus_12 = (_plus_11 + "()");
                  string2 = (_string2_3 + _plus_12);
                }
              }
            } else {
              String _link_1 = everylink.getLink();
              boolean _equals_1 = Objects.equal(_link_1, "Or");
              if (_equals_1) {
                String _no_4 = everylink.getCondition().getNo();
                boolean _tripleNotEquals_8 = (_no_4 != null);
                if (_tripleNotEquals_8) {
                  String _string2_4 = string2;
                  Object _compileTrueCondition_4 = this.compileTrueCondition(everylink.getCondition().getCondition());
                  String _plus_13 = (("||" + " !") + _compileTrueCondition_4);
                  string2 = (_string2_4 + _plus_13);
                } else {
                  String _string2_5 = string2;
                  Object _compileTrueCondition_5 = this.compileTrueCondition(everylink.getCondition().getCondition());
                  String _plus_14 = ("||" + _compileTrueCondition_5);
                  string2 = (_string2_5 + _plus_14);
                }
              }
            }
            SingleLinkCondition _linkCondition_2 = everylink.getLinkCondition();
            boolean _tripleNotEquals_9 = (_linkCondition_2 != null);
            if (_tripleNotEquals_9) {
              String _no_5 = everylink.getLinkCondition().getNo();
              boolean _tripleNotEquals_10 = (_no_5 != null);
              if (_tripleNotEquals_10) {
                String _string2_6 = string2;
                String _name_5 = everylink.getLinkCondition().getLinkCondition().getName();
                String _plus_15 = (("||" + " !") + _name_5);
                String _plus_16 = (_plus_15 + "()");
                string2 = (_string2_6 + _plus_16);
              } else {
                String _string2_7 = string2;
                String _name_6 = everylink.getLinkCondition().getLinkCondition().getName();
                String _plus_17 = ("||" + _name_6);
                String _plus_18 = (_plus_17 + "()");
                string2 = (_string2_7 + _plus_18);
              }
            }
          }
        }
        String _string2 = string2;
        string2 = (_string2 + ")");
        String _myString = myString;
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append(string1);
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append(string2, "\t");
        _builder_1.append(" return true;");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append("else return false;");
        _builder_1.newLine();
        _builder_1.append("}");
        _builder_1.newLine();
        myString = (_myString + _builder_1);
      }
    }
    return myString;
  }

  protected Object _compileTrueCondition(final isTime condition) {
    String string = "";
    MixExpression _expression = condition.getExpression();
    boolean _tripleNotEquals = (_expression != null);
    if (_tripleNotEquals) {
      Duration _duration = condition.getDuration();
      boolean _tripleEquals = (_duration == null);
      if (_tripleEquals) {
        String _compileExpression = this.compileExpression(condition.getExpression());
        String _plus = ("isTime(" + _compileExpression);
        String _plus_1 = (_plus + ")");
        string = _plus_1;
      } else {
        Duration _duration_1 = condition.getDuration();
        boolean _tripleNotEquals_1 = (_duration_1 != null);
        if (_tripleNotEquals_1) {
          String _compileExpression_1 = this.compileExpression(condition.getExpression());
          String _plus_2 = ("isTime(" + _compileExpression_1);
          String _symbol = condition.getSymbol();
          String _plus_3 = (_plus_2 + _symbol);
          Object _compilevalue = this.compilevalue(condition.getDuration());
          String _plus_4 = (_plus_3 + _compilevalue);
          String _plus_5 = (_plus_4 + ")");
          string = _plus_5;
        }
      }
    }
    RuleExpression _value = condition.getValue();
    boolean _tripleNotEquals_2 = (_value != null);
    if (_tripleNotEquals_2) {
      Duration _duration_2 = condition.getDuration();
      boolean _tripleEquals_1 = (_duration_2 == null);
      if (_tripleEquals_1) {
        String _name = condition.getValue().getName();
        String _plus_6 = ("isTime(functionFinishTime[\"" + _name);
        String _plus_7 = (_plus_6 + "\"])");
        string = _plus_7;
      } else {
        Duration _duration_3 = condition.getDuration();
        boolean _tripleNotEquals_3 = (_duration_3 != null);
        if (_tripleNotEquals_3) {
          String _name_1 = condition.getValue().getName();
          String _plus_8 = ("isTime(functionFinishTime[\"" + _name_1);
          String _plus_9 = (_plus_8 + "\"]+");
          String _symbol_1 = condition.getSymbol();
          String _plus_10 = (_plus_9 + _symbol_1);
          Object _compilevalue_1 = this.compilevalue(condition.getDuration());
          String _plus_11 = (_plus_10 + _compilevalue_1);
          String _plus_12 = (_plus_11 + ")");
          string = _plus_12;
        }
      }
    }
    return string;
  }

  protected Object _compileTrueCondition(final Timepoint timepoint) {
    return this.compileTimePoint2(timepoint);
  }

  protected Object _compileTrueCondition(final TimeSub condition) {
    String a = this.compileExpression(condition.getValueA());
    String b = "";
    MixExpression _valueB = condition.getValueB();
    boolean _tripleNotEquals = (_valueB != null);
    if (_tripleNotEquals) {
      b = this.compileExpression(condition.getValueB());
    }
    RuleExpression _valueC = condition.getValueC();
    boolean _tripleNotEquals_1 = (_valueC != null);
    if (_tripleNotEquals_1) {
      String _name = condition.getValueC().getName();
      String _plus = ("functionFinishTime[\"" + _name);
      String _plus_1 = (_plus + "\"]");
      b = _plus_1;
    }
    Object c = this.compilevalue(condition.getDuration());
    String _compare = condition.getCompare();
    String _plus_2 = ((((((("compareTimestamps(" + a) + ",") + b) + ",") + c) + ",\"") + _compare);
    return (_plus_2 + "\")");
  }

  protected Object _compileTrueCondition(final CompareString condition) {
    String _compileExpression = this.compileExpression(condition.getValueA());
    String _plus = ("compareStrings(" + _compileExpression);
    String _plus_1 = (_plus + ",");
    String _compileExpression_1 = this.compileExpression(condition.getValueB());
    String _plus_2 = (_plus_1 + _compileExpression_1);
    return (_plus_2 + ")");
  }

  protected Object _compileTrueCondition(final isTrue condition) {
    return this.compileSingleExpression(condition.getCompare());
  }

  protected Object _compileTrueCondition(final isDone condition) {
    String _name = condition.getName().getName();
    String _plus = ("isDone(\"" + _name);
    return (_plus + "\")");
  }

  protected Object _compileTrueCondition(final logic condition) {
    String _compileExpression = this.compileExpression(condition.getValueA());
    String _plus = ("logic(" + _compileExpression);
    String _plus_1 = (_plus + ",");
    String _compileExpression_1 = this.compileExpression(condition.getValueB());
    String _plus_2 = (_plus_1 + _compileExpression_1);
    String _plus_3 = (_plus_2 + ",\"");
    String _mathSymbol = condition.getMathSymbol();
    String _plus_4 = (_plus_3 + _mathSymbol);
    return (_plus_4 + "\")");
  }

  public String compileExpression(final MixExpression expression) {
    String string = "";
    String _string = string;
    Object _compileSingleExpression = this.compileSingleExpression(expression.getExpression());
    string = (_string + _compileSingleExpression);
    EList<OtherMixExpression> _otherMixExpression = expression.getOtherMixExpression();
    boolean _tripleNotEquals = (_otherMixExpression != null);
    if (_tripleNotEquals) {
      String _string_1 = string;
      String _compileOtherMixExpression = this.compileOtherMixExpression(expression.getOtherMixExpression());
      string = (_string_1 + _compileOtherMixExpression);
    }
    return string;
  }

  protected Object _compileSingleExpression(final OtherExpression expression) {
    return expression.getValue();
  }

  protected Object _compileSingleExpression(final FloatExpression expression) {
    String _value = expression.getValue();
    return (_value + "/1000");
  }

  protected Object _compileSingleExpression(final PeriodExpression expression) {
    String _type = expression.getType();
    boolean _equals = Objects.equal(_type, "hours");
    if (_equals) {
      int _value = expression.getValue();
      int _multiply = (_value * 60);
      return Integer.valueOf((_multiply * 60));
    } else {
      String _type_1 = expression.getType();
      boolean _equals_1 = Objects.equal(_type_1, "days");
      if (_equals_1) {
        int _value_1 = expression.getValue();
        int _multiply_1 = (_value_1 * 60);
        int _multiply_2 = (_multiply_1 * 60);
        return Integer.valueOf((_multiply_2 * 24));
      } else {
        String _type_2 = expression.getType();
        boolean _equals_2 = Objects.equal(_type_2, "months");
        if (_equals_2) {
          int _value_2 = expression.getValue();
          int _multiply_3 = (_value_2 * 60);
          int _multiply_4 = (_multiply_3 * 60);
          int _multiply_5 = (_multiply_4 * 24);
          return Integer.valueOf((_multiply_5 * 30));
        } else {
          String _type_3 = expression.getType();
          boolean _equals_3 = Objects.equal(_type_3, "years");
          if (_equals_3) {
            int _value_3 = expression.getValue();
            int _multiply_6 = (_value_3 * 60);
            int _multiply_7 = (_multiply_6 * 60);
            int _multiply_8 = (_multiply_7 * 24);
            int _multiply_9 = (_multiply_8 * 30);
            return Integer.valueOf((_multiply_9 * 365));
          } else {
            String _type_4 = expression.getType();
            boolean _equals_4 = Objects.equal(_type_4, "mins");
            if (_equals_4) {
              int _value_4 = expression.getValue();
              return Integer.valueOf((_value_4 * 60));
            }
          }
        }
      }
    }
    return null;
  }

  protected Object _compileSingleExpression(final GetPeriodExpression expression) {
    String _type = expression.getType();
    boolean _equals = Objects.equal(_type, "hours");
    if (_equals) {
      String _value = expression.getValue();
      return (_value + "*60*60");
    } else {
      String _type_1 = expression.getType();
      boolean _equals_1 = Objects.equal(_type_1, "days");
      if (_equals_1) {
        String _value_1 = expression.getValue();
        return (_value_1 + "*60*60*24");
      } else {
        String _type_2 = expression.getType();
        boolean _equals_2 = Objects.equal(_type_2, "months");
        if (_equals_2) {
          String _value_2 = expression.getValue();
          return (_value_2 + "*60*60*24*30");
        } else {
          String _type_3 = expression.getType();
          boolean _equals_3 = Objects.equal(_type_3, "years");
          if (_equals_3) {
            String _value_3 = expression.getValue();
            return (_value_3 + "*60*60*24*30*365");
          } else {
            String _type_4 = expression.getType();
            boolean _equals_4 = Objects.equal(_type_4, "mins");
            if (_equals_4) {
              String _value_4 = expression.getValue();
              return (_value_4 + "*60");
            }
          }
        }
      }
    }
    return null;
  }

  protected Object _compileSingleExpression(final RuleTimeExpression expression) {
    String _name = expression.getValue().getName();
    String _plus = ("functionFinishTime[\"" + _name);
    return (_plus + "\"]");
  }

  protected Object _compileSingleExpression(final PersonExpression expression) {
    String _name = expression.getValue().getName();
    String _plus = ("\"" + _name);
    return (_plus + "\"");
  }

  protected Object _compileSingleExpression(final ThingExpression expression) {
    return this.compileThingExpression(expression);
  }

  protected Object _compileSingleExpression(final StringExpression expression) {
    String _value = expression.getValue();
    String _plus = ("\"" + _value);
    return (_plus + "\"");
  }

  protected String _compileThingExpression(final SubjectExpress expression) {
    String string = "";
    String _name = expression.getSubject().getName();
    String _plus = (_name + ".");
    String _attribute = expression.getAttribute();
    String _plus_1 = (_plus + _attribute);
    string = _plus_1;
    return string;
  }

  protected String _compileThingExpression(final ObjectExpress expression) {
    String string = "";
    String _name = expression.getObject().getName();
    String _plus = (_name + ".");
    String _attribute = expression.getAttribute();
    String _plus_1 = (_plus + _attribute);
    string = _plus_1;
    return string;
  }

  protected Object _compileSingleExpression(final RegularExpression expression) {
    return this.compileRegular(expression);
  }

  protected Object _compileRegular(final AllNumber value) {
    return Integer.valueOf(value.getNumber());
  }

  protected Object _compileRegular(final ThisDecimal value) {
    double _stringToDouble = this.stringToDouble(value.getValue());
    return Double.valueOf((_stringToDouble * 1000));
  }

  protected Object _compileRegular(final ThisBoolean value) {
    return value.getValue();
  }

  protected Object _compileRegular(final Now value) {
    return "block.timestamp";
  }

  protected Object _compileRegular(final ThisDate value) {
    return this.compilevalue(value);
  }

  public String compileOtherMixExpression(final EList<OtherMixExpression> expression) {
    String string = "";
    for (final OtherMixExpression i : expression) {
      String _string = string;
      String _link = i.getLink();
      Object _compileSingleExpression = this.compileSingleExpression(i.getExpression());
      String _plus = (_link + _compileSingleExpression);
      string = (_string + _plus);
    }
    return string;
  }

  protected Object _compileTrueCondition(final checkExpression condition) {
    String _name = condition.getName().getName();
    String _plus = ("check(" + _name);
    return (_plus + ")");
  }

  public String compileMessageOperate(final messageExpression operation) {
    return this.defineEveryMessage(operation.getEverymassage());
  }

  public String defineEveryMessage(final EList<everyMessage> list) {
    boolean isFirst = true;
    String result = "";
    for (final everyMessage i : list) {
      {
        if ((!isFirst)) {
          String _result = result;
          result = (_result + ", ");
        }
        if ((((Objects.equal(i.getType(), "bool") || Objects.equal(i.getType(), "uint")) || Objects.equal(i.getType(), "ufixed")) || Objects.equal(i.getType(), "address"))) {
          String _result_1 = result;
          String _type = i.getType();
          String _plus = (_type + " _");
          String _message = i.getMessage();
          String _plus_1 = (_plus + _message);
          result = (_result_1 + _plus_1);
        } else {
          String _result_2 = result;
          String _type_1 = i.getType();
          String _plus_2 = (_type_1 + " memory");
          String _plus_3 = (_plus_2 + " _");
          String _message_1 = i.getMessage();
          String _plus_4 = (_plus_3 + _message_1);
          result = (_result_2 + _plus_4);
        }
        isFirst = false;
      }
    }
    return result;
  }

  protected String _compileTrueOperate(final transferExpression operation) {
    String string = "";
    String _name = operation.getPerson().getName();
    String _plus = ("transferTo(" + _name);
    String _plus_1 = (_plus + ".account,10**14*(");
    String _compileExpression = this.compileExpression(operation.getValue());
    String _plus_2 = (_plus_1 + _compileExpression);
    String _plus_3 = (_plus_2 + "))");
    String _plus_4 = (_plus_3 + ";");
    string = _plus_4;
    return string;
  }

  protected String _compileTrueOperate(final changeExpression operation) {
    return this.compileChangeExpression(operation);
  }

  protected String _compileChangeExpression(final otherchange expression) {
    String string = "";
    String _compileExpression = this.compileExpression(expression.getChangeThing());
    String _plus = (_compileExpression + "=");
    String _compileExpression_1 = this.compileExpression(expression.getChangeResult());
    String _plus_1 = (_plus + _compileExpression_1);
    String _plus_2 = (_plus_1 + ";");
    string = _plus_2;
    return string;
  }

  protected String _compileChangeExpression(final changeString expression) {
    String string = "";
    String _compileExpression = this.compileExpression(expression.getChangeThing());
    String _plus = (_compileExpression + "=\"");
    String _compileExpression_1 = this.compileExpression(expression.getChangeResult());
    String _plus_1 = (_plus + _compileExpression_1);
    String _plus_2 = (_plus_1 + "\";");
    string = _plus_2;
    return string;
  }

  protected String _compileChangeExpression(final changeContract expression) {
    String string = "";
    String _changeResult = expression.getChangeResult();
    String _plus = ("ContractState=\"" + _changeResult);
    String _plus_1 = (_plus + "\";");
    string = _plus_1;
    return string;
  }

  protected String _compileChangeExpression(final changeRule expression) {
    String string = "";
    String _name = expression.getChangeThing().getName();
    String _plus = ("functionStatus[\"" + _name);
    String _plus_1 = (_plus + "\"]=");
    String _changeResult = expression.getChangeResult();
    String _plus_2 = (_plus_1 + _changeResult);
    String _plus_3 = (_plus_2 + ";");
    string = _plus_3;
    return string;
  }

  protected String _compileChangeExpression(final changeOther expression) {
    String string = "";
    Object _compileSingleExpression = this.compileSingleExpression(expression.getChangeThing());
    String _plus = (_compileSingleExpression + "=");
    String _changeResult = expression.getChangeResult();
    String _plus_1 = (_plus + _changeResult);
    String _plus_2 = (_plus_1 + ";");
    string = _plus_2;
    return string;
  }

  protected String _compileChangeExpression(final changeAddress expression) {
    String string = "";
    String _compileExpression = this.compileExpression(expression.getChangeThing());
    String _plus = (_compileExpression + "=");
    String _plus_1 = (_plus + "payable(");
    String _compileExpression_1 = this.compileExpression(expression.getChangeResult());
    String _plus_2 = (_plus_1 + _compileExpression_1);
    String _plus_3 = (_plus_2 + ");");
    string = _plus_3;
    return string;
  }

  protected CharSequence _compileTrueOperateThing(final transferExpression operation) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }

  public CharSequence compileMessageOperateThing(final messageExpression operation) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<everyMessage> _everymassage = operation.getEverymassage();
      for(final everyMessage i : _everymassage) {
        {
          String _symbol = i.getSymbol();
          boolean _tripleEquals = (_symbol == null);
          if (_tripleEquals) {
            String _message = i.getMessage();
            _builder.append(_message);
            _builder.append(" = _");
            String _message_1 = i.getMessage();
            _builder.append(_message_1);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          } else {
            String _type = i.getType();
            _builder.append(_type);
            _builder.append(" ");
            String _message_2 = i.getMessage();
            _builder.append(_message_2);
            _builder.append(" = _");
            String _message_3 = i.getMessage();
            _builder.append(_message_3);
            _builder.append(";\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }

  protected CharSequence _compileTrueOperateThing(final changeExpression operation) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }

  public CharSequence compileRule(final RuleStructure rule) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<ManyRuleExpression> _manyRuleExpression = rule.getManyRuleExpression();
      for(final ManyRuleExpression i : _manyRuleExpression) {
        CharSequence _compileManyRuleExpression = this.compileManyRuleExpression(i);
        _builder.append(_compileManyRuleExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  protected CharSequence _compileManyRuleExpression(final ParallelExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<RuleExpression> _ruleExpression = expression.getRuleExpression();
      for(final RuleExpression i : _ruleExpression) {
        String _compileRuleExpression = this.compileRuleExpression(i);
        _builder.append(_compileRuleExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  protected CharSequence _compileManyRuleExpression(final ExclusiveExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<RuleExpression> _ruleExpression = expression.getRuleExpression();
      for(final RuleExpression i : _ruleExpression) {
        String _compileExclusiveRuleExpression = this.compileExclusiveRuleExpression(i);
        _builder.append(_compileExclusiveRuleExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  protected CharSequence _compileManyRuleExpression(final RegularRuleExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<RuleExpression> _ruleExpression = expression.getRuleExpression();
      for(final RuleExpression i : _ruleExpression) {
        String _compileRuleExpression = this.compileRuleExpression(i);
        _builder.append(_compileRuleExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  protected CharSequence _compileManyRuleExpression(final AdditionExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<RuleExpression> _ruleExpression = expression.getRuleExpression();
      for(final RuleExpression i : _ruleExpression) {
        String _compileAdditionalRuleExpression = this.compileAdditionalRuleExpression(i);
        _builder.append(_compileAdditionalRuleExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public String compileAdditionalRuleExpression(final RuleExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    String code = _builder.toString();
    String string1 = "";
    String link = "";
    String setDateString1 = "";
    String setDateString2 = "";
    setDateExpression _setdate = expression.getSetdate();
    boolean _tripleNotEquals = (_setdate != null);
    if (_tripleNotEquals) {
      setDateString1 = "uint16 _year,uint8 _months,uint8 _days,uint8 _hours,uint8 _minutes";
      String _message = expression.getSetdate().getMessage();
      String _plus = (_message + "=convertToTimestamp(_year,_months,_days,_hours,_minutes);");
      setDateString2 = _plus;
    }
    if (((expression.getSetdate() != null) && (expression.getSet() != null))) {
      link = ",";
    }
    String _repeat = expression.getRepeat();
    boolean _tripleEquals = (_repeat == null);
    if (_tripleEquals) {
      messageExpression _set = expression.getSet();
      boolean _tripleEquals_1 = (_set == null);
      if (_tripleEquals_1) {
        initExpressions _person = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_1 = (_person != null);
        if (_tripleNotEquals_1) {
          String _name = expression.getName();
          String _plus_1 = ("function " + _name);
          String _plus_2 = (_plus_1 + "(");
          String _plus_3 = (_plus_2 + setDateString1);
          String _plus_4 = (_plus_3 + ") public payable only");
          String _name_1 = expression.getTotalOperation().getPerson().getName();
          String _plus_5 = (_plus_4 + _name_1);
          String _plus_6 = (_plus_5 + " unDone(\"");
          String _name_2 = expression.getName();
          String _plus_7 = (_plus_6 + _name_2);
          String _plus_8 = (_plus_7 + "\"){");
          string1 = _plus_8;
        } else {
          Group _person2 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_2 = (_person2 != null);
          if (_tripleNotEquals_2) {
            String _name_3 = expression.getName();
            String _plus_9 = ("function " + _name_3);
            String _plus_10 = (_plus_9 + "(");
            String _plus_11 = (_plus_10 + setDateString1);
            String _plus_12 = (_plus_11 + ") public payable only");
            String _name_4 = expression.getTotalOperation().getPerson2().getName();
            String _plus_13 = (_plus_12 + _name_4);
            String _plus_14 = (_plus_13 + " unDone(\"");
            String _name_5 = expression.getName();
            String _plus_15 = (_plus_14 + _name_5);
            String _plus_16 = (_plus_15 + "\"){");
            string1 = _plus_16;
          } else {
            String _name_6 = expression.getName();
            String _plus_17 = ("function " + _name_6);
            String _plus_18 = (_plus_17 + "(");
            String _plus_19 = (_plus_18 + setDateString1);
            String _plus_20 = (_plus_19 + ") public payable");
            String _plus_21 = (_plus_20 + " unDone(\"");
            String _name_7 = expression.getName();
            String _plus_22 = (_plus_21 + _name_7);
            String _plus_23 = (_plus_22 + "\"){");
            string1 = _plus_23;
          }
        }
      }
      messageExpression _set_1 = expression.getSet();
      boolean _tripleNotEquals_3 = (_set_1 != null);
      if (_tripleNotEquals_3) {
        initExpressions _person_1 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_4 = (_person_1 != null);
        if (_tripleNotEquals_4) {
          String _name_8 = expression.getName();
          String _plus_24 = ("function " + _name_8);
          String _plus_25 = (_plus_24 + "(");
          String _plus_26 = (_plus_25 + setDateString1);
          String _plus_27 = (_plus_26 + link);
          String _compileMessageOperate = this.compileMessageOperate(expression.getSet());
          String _plus_28 = (_plus_27 + _compileMessageOperate);
          String _plus_29 = (_plus_28 + ") public payable only");
          String _name_9 = expression.getTotalOperation().getPerson().getName();
          String _plus_30 = (_plus_29 + _name_9);
          String _plus_31 = (_plus_30 + " unDone(\"");
          String _name_10 = expression.getName();
          String _plus_32 = (_plus_31 + _name_10);
          String _plus_33 = (_plus_32 + "\"){");
          string1 = _plus_33;
        } else {
          Group _person2_1 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_5 = (_person2_1 != null);
          if (_tripleNotEquals_5) {
            String _name_11 = expression.getName();
            String _plus_34 = ("function " + _name_11);
            String _plus_35 = (_plus_34 + "(");
            String _plus_36 = (_plus_35 + setDateString1);
            String _plus_37 = (_plus_36 + link);
            String _compileMessageOperate_1 = this.compileMessageOperate(expression.getSet());
            String _plus_38 = (_plus_37 + _compileMessageOperate_1);
            String _plus_39 = (_plus_38 + ") public payable only");
            String _name_12 = expression.getTotalOperation().getPerson2().getName();
            String _plus_40 = (_plus_39 + _name_12);
            String _plus_41 = (_plus_40 + " unDone(\"");
            String _name_13 = expression.getName();
            String _plus_42 = (_plus_41 + _name_13);
            String _plus_43 = (_plus_42 + "\"){");
            string1 = _plus_43;
          } else {
            String _name_14 = expression.getName();
            String _plus_44 = ("function " + _name_14);
            String _plus_45 = (_plus_44 + "(");
            String _plus_46 = (_plus_45 + setDateString1);
            String _plus_47 = (_plus_46 + link);
            String _compileMessageOperate_2 = this.compileMessageOperate(expression.getSet());
            String _plus_48 = (_plus_47 + _compileMessageOperate_2);
            String _plus_49 = (_plus_48 + ") public payable");
            String _plus_50 = (_plus_49 + " unDone(\"");
            String _name_15 = expression.getName();
            String _plus_51 = (_plus_50 + _name_15);
            String _plus_52 = (_plus_51 + "\"){");
            string1 = _plus_52;
          }
        }
      }
    }
    String _repeat_1 = expression.getRepeat();
    boolean _tripleNotEquals_6 = (_repeat_1 != null);
    if (_tripleNotEquals_6) {
      messageExpression _set_2 = expression.getSet();
      boolean _tripleEquals_2 = (_set_2 == null);
      if (_tripleEquals_2) {
        initExpressions _person_2 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_7 = (_person_2 != null);
        if (_tripleNotEquals_7) {
          String _name_16 = expression.getName();
          String _plus_53 = ("function " + _name_16);
          String _plus_54 = (_plus_53 + "(");
          String _plus_55 = (_plus_54 + setDateString1);
          String _plus_56 = (_plus_55 + ") public payable only");
          String _name_17 = expression.getTotalOperation().getPerson().getName();
          String _plus_57 = (_plus_56 + _name_17);
          String _plus_58 = (_plus_57 + "{");
          string1 = _plus_58;
        } else {
          Group _person2_2 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_8 = (_person2_2 != null);
          if (_tripleNotEquals_8) {
            String _name_18 = expression.getName();
            String _plus_59 = ("function " + _name_18);
            String _plus_60 = (_plus_59 + "(");
            String _plus_61 = (_plus_60 + setDateString1);
            String _plus_62 = (_plus_61 + ") public payable only");
            String _name_19 = expression.getTotalOperation().getPerson2().getName();
            String _plus_63 = (_plus_62 + _name_19);
            String _plus_64 = (_plus_63 + "{");
            string1 = _plus_64;
          } else {
            String _name_20 = expression.getName();
            String _plus_65 = ("function " + _name_20);
            String _plus_66 = (_plus_65 + "(");
            String _plus_67 = (_plus_66 + setDateString1);
            String _plus_68 = (_plus_67 + ") public payable {");
            string1 = _plus_68;
          }
        }
      }
      messageExpression _set_3 = expression.getSet();
      boolean _tripleNotEquals_9 = (_set_3 != null);
      if (_tripleNotEquals_9) {
        initExpressions _person_3 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_10 = (_person_3 != null);
        if (_tripleNotEquals_10) {
          String _name_21 = expression.getName();
          String _plus_69 = ("function " + _name_21);
          String _plus_70 = (_plus_69 + "(");
          String _plus_71 = (_plus_70 + setDateString1);
          String _plus_72 = (_plus_71 + link);
          String _compileMessageOperate_3 = this.compileMessageOperate(expression.getSet());
          String _plus_73 = (_plus_72 + _compileMessageOperate_3);
          String _plus_74 = (_plus_73 + ") public payable only");
          String _name_22 = expression.getTotalOperation().getPerson().getName();
          String _plus_75 = (_plus_74 + _name_22);
          String _plus_76 = (_plus_75 + "{");
          string1 = _plus_76;
        } else {
          Group _person2_3 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_11 = (_person2_3 != null);
          if (_tripleNotEquals_11) {
            String _name_23 = expression.getName();
            String _plus_77 = ("function " + _name_23);
            String _plus_78 = (_plus_77 + "(");
            String _plus_79 = (_plus_78 + setDateString1);
            String _plus_80 = (_plus_79 + link);
            String _compileMessageOperate_4 = this.compileMessageOperate(expression.getSet());
            String _plus_81 = (_plus_80 + _compileMessageOperate_4);
            String _plus_82 = (_plus_81 + ") public payable only");
            String _name_24 = expression.getTotalOperation().getPerson2().getName();
            String _plus_83 = (_plus_82 + _name_24);
            String _plus_84 = (_plus_83 + "{");
            string1 = _plus_84;
          } else {
            String _name_25 = expression.getName();
            String _plus_85 = ("function " + _name_25);
            String _plus_86 = (_plus_85 + "(");
            String _plus_87 = (_plus_86 + setDateString1);
            String _plus_88 = (_plus_87 + link);
            String _compileMessageOperate_5 = this.compileMessageOperate(expression.getSet());
            String _plus_89 = (_plus_88 + _compileMessageOperate_5);
            String _plus_90 = (_plus_89 + ") public payable{");
            string1 = _plus_90;
          }
        }
      }
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    String string2 = _builder_1.toString();
    messageExpression _set_4 = expression.getSet();
    boolean _tripleNotEquals_12 = (_set_4 != null);
    if (_tripleNotEquals_12) {
      String _string2 = string2;
      CharSequence _compileMessageOperateThing = this.compileMessageOperateThing(expression.getSet());
      string2 = (_string2 + _compileMessageOperateThing);
    }
    String string3 = "";
    TotalCondition _totalCondition = expression.getTotalCondition();
    boolean _tripleNotEquals_13 = (_totalCondition != null);
    if (_tripleNotEquals_13) {
      String _string3 = string3;
      String _compileTotalCondition = this.compileTotalCondition(expression.getTotalCondition());
      String _plus_91 = ("if(" + _compileTotalCondition);
      String _plus_92 = (_plus_91 + "){");
      string3 = (_string3 + _plus_92);
    }
    StringConcatenation _builder_2 = new StringConcatenation();
    String string4 = _builder_2.toString();
    TotalOperation _totalOperation = expression.getTotalOperation();
    boolean _tripleNotEquals_14 = (_totalOperation != null);
    if (_tripleNotEquals_14) {
      String _string4 = string4;
      String _compileTotalOperation = this.compileTotalOperation(expression.getTotalOperation());
      string4 = (_string4 + _compileTotalOperation);
    }
    StringConcatenation _builder_3 = new StringConcatenation();
    String string5 = _builder_3.toString();
    EList<SubExpression> _subExpression = expression.getSubExpression();
    boolean _tripleNotEquals_15 = (_subExpression != null);
    if (_tripleNotEquals_15) {
      EList<SubExpression> _subExpression_1 = expression.getSubExpression();
      for (final SubExpression i : _subExpression_1) {
        {
          String string6 = "";
          StringConcatenation _builder_4 = new StringConcatenation();
          String string7 = _builder_4.toString();
          String string8 = "";
          String string9 = "";
          TotalCondition _totalCondition_1 = i.getTotalExpression().getTotalCondition();
          boolean _tripleNotEquals_16 = (_totalCondition_1 != null);
          if (_tripleNotEquals_16) {
            String _string6 = string6;
            String _compileTotalCondition_1 = this.compileTotalCondition(i.getTotalExpression().getTotalCondition());
            String _plus_93 = ("if(" + _compileTotalCondition_1);
            String _plus_94 = (_plus_93 + "){");
            string6 = (_string6 + _plus_94);
          }
          String _string7 = string7;
          String _compileTotalOperation_1 = this.compileTotalOperation(i.getTotalExpression().getTotalOperation());
          string7 = (_string7 + _compileTotalOperation_1);
          ElseExpression _elseExpression = i.getTotalExpression().getElseExpression();
          boolean _tripleNotEquals_17 = (_elseExpression != null);
          if (_tripleNotEquals_17) {
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("else{ ");
            _builder_5.newLine();
            _builder_5.append("\t\t\t\t\t\t");
            String _compileTotalOperation_2 = this.compileTotalOperation(i.getTotalExpression().getElseExpression().getTotalOperation());
            _builder_5.append(_compileTotalOperation_2, "\t\t\t\t\t\t");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("\t\t\t\t\t\t");
            _builder_5.append("}");
            string8 = _builder_5.toString();
          }
          TotalCondition _totalCondition_2 = i.getTotalExpression().getTotalCondition();
          boolean _tripleNotEquals_18 = (_totalCondition_2 != null);
          if (_tripleNotEquals_18) {
            string9 = "}";
          }
          String _string5 = string5;
          StringConcatenation _builder_6 = new StringConcatenation();
          _builder_6.append(string6);
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("\t");
          _builder_6.append(string7, "\t");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append(string8);
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("\t");
          _builder_6.append(string9, "\t");
          _builder_6.newLineIfNotEmpty();
          string5 = (_string5 + _builder_6);
        }
      }
    }
    String _name_26 = expression.getName();
    String _plus_93 = ("changeRule(\"" + _name_26);
    String string6 = (_plus_93 + "\");");
    StringConcatenation _builder_4 = new StringConcatenation();
    String string7 = _builder_4.toString();
    TotalCondition _totalCondition_1 = expression.getTotalCondition();
    boolean _tripleNotEquals_16 = (_totalCondition_1 != null);
    if (_tripleNotEquals_16) {
      string7 = "}";
    }
    String _code = code;
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append(string1);
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(setDateString2, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string2, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string3, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string4, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string5, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string6, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string7, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("}");
    _builder_5.newLine();
    code = (_code + _builder_5);
    ElseExpression _elseExpression = expression.getElseExpression();
    boolean _tripleEquals_3 = (_elseExpression == null);
    if (_tripleEquals_3) {
      return code;
    }
    ElseExpression _elseExpression_1 = expression.getElseExpression();
    boolean _tripleNotEquals_17 = (_elseExpression_1 != null);
    if (_tripleNotEquals_17) {
      StringConcatenation _builder_6 = new StringConcatenation();
      String string8 = _builder_6.toString();
      String string9 = "";
      messageExpression _set_5 = expression.getElseExpression().getSet();
      boolean _tripleEquals_4 = (_set_5 == null);
      if (_tripleEquals_4) {
        initExpressions _person_4 = expression.getElseExpression().getTotalOperation().getPerson();
        boolean _tripleNotEquals_18 = (_person_4 != null);
        if (_tripleNotEquals_18) {
          String _name_27 = expression.getName();
          String _plus_94 = ("function else" + _name_27);
          String _plus_95 = (_plus_94 + "() public payable only");
          String _name_28 = expression.getElseExpression().getTotalOperation().getPerson().getName();
          String _plus_96 = (_plus_95 + _name_28);
          String _plus_97 = (_plus_96 + "{");
          string9 = _plus_97;
        } else {
          Group _person2_4 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_19 = (_person2_4 != null);
          if (_tripleNotEquals_19) {
            String _name_29 = expression.getName();
            String _plus_98 = ("function else" + _name_29);
            String _plus_99 = (_plus_98 + "() public payable only");
            String _name_30 = expression.getElseExpression().getTotalOperation().getPerson2().getName();
            String _plus_100 = (_plus_99 + _name_30);
            String _plus_101 = (_plus_100 + "{");
            string9 = _plus_101;
          } else {
            String _name_31 = expression.getName();
            String _plus_102 = ("function else" + _name_31);
            String _plus_103 = (_plus_102 + "() public payable {");
            string9 = _plus_103;
          }
        }
      }
      messageExpression _set_6 = expression.getElseExpression().getSet();
      boolean _tripleNotEquals_20 = (_set_6 != null);
      if (_tripleNotEquals_20) {
        initExpressions _person_5 = expression.getElseExpression().getTotalOperation().getPerson();
        boolean _tripleNotEquals_21 = (_person_5 != null);
        if (_tripleNotEquals_21) {
          String _name_32 = expression.getName();
          String _plus_104 = ("function else" + _name_32);
          String _plus_105 = (_plus_104 + "(");
          String _compileMessageOperate_6 = this.compileMessageOperate(expression.getElseExpression().getSet());
          String _plus_106 = (_plus_105 + _compileMessageOperate_6);
          String _plus_107 = (_plus_106 + ") public payable only");
          String _name_33 = expression.getElseExpression().getTotalOperation().getPerson().getName();
          String _plus_108 = (_plus_107 + _name_33);
          String _plus_109 = (_plus_108 + "{");
          string9 = _plus_109;
        } else {
          Group _person2_5 = expression.getElseExpression().getTotalOperation().getPerson2();
          boolean _tripleNotEquals_22 = (_person2_5 != null);
          if (_tripleNotEquals_22) {
            String _name_34 = expression.getName();
            String _plus_110 = ("function else" + _name_34);
            String _plus_111 = (_plus_110 + "(");
            String _compileMessageOperate_7 = this.compileMessageOperate(expression.getElseExpression().getSet());
            String _plus_112 = (_plus_111 + _compileMessageOperate_7);
            String _plus_113 = (_plus_112 + ") public payable only");
            String _name_35 = expression.getElseExpression().getTotalOperation().getPerson2().getName();
            String _plus_114 = (_plus_113 + _name_35);
            String _plus_115 = (_plus_114 + "{");
            string9 = _plus_115;
          } else {
            String _name_36 = expression.getName();
            String _plus_116 = ("function else" + _name_36);
            String _plus_117 = (_plus_116 + "(");
            String _compileMessageOperate_8 = this.compileMessageOperate(expression.getElseExpression().getSet());
            String _plus_118 = (_plus_117 + _compileMessageOperate_8);
            String _plus_119 = (_plus_118 + ") public payable {");
            string9 = _plus_119;
          }
        }
      }
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("bool one=true;");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("if(one){");
      _builder_7.newLine();
      String onlyOne = _builder_7.toString();
      String string10 = "";
      String string11 = "";
      String _name_37 = expression.getName();
      String _plus_120 = ("emit completedRule(msg.sender,\"else" + _name_37);
      String string112 = (_plus_120 + "\");");
      StringConcatenation _builder_8 = new StringConcatenation();
      String string12 = _builder_8.toString();
      String string13 = "";
      TotalCondition _totalCondition_2 = expression.getTotalCondition();
      boolean _tripleNotEquals_23 = (_totalCondition_2 != null);
      if (_tripleNotEquals_23) {
        String _string10 = string10;
        String _compileTotalCondition_1 = this.compileTotalCondition(expression.getTotalCondition());
        String _plus_121 = ("if(!(" + _compileTotalCondition_1);
        String _plus_122 = (_plus_121 + ")){");
        string10 = (_string10 + _plus_122);
      }
      String _string11 = string11;
      String _compileTotalOperation_1 = this.compileTotalOperation(expression.getElseExpression().getTotalOperation());
      string11 = (_string11 + _compileTotalOperation_1);
      TotalCondition _totalCondition_3 = expression.getTotalCondition();
      boolean _tripleNotEquals_24 = (_totalCondition_3 != null);
      if (_tripleNotEquals_24) {
        string13 = "}";
      }
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append(string9);
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(onlyOne, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string10, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t");
      _builder_9.append(string11, "\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t");
      _builder_9.append(string112, "\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string13, "\t");
      _builder_9.newLineIfNotEmpty();
      string8 = _builder_9.toString();
      String _code_1 = code;
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append(string8);
      _builder_10.newLineIfNotEmpty();
      _builder_10.append("one=false;");
      _builder_10.newLine();
      _builder_10.append("}");
      _builder_10.newLine();
      code = (_code_1 + _builder_10);
      return code;
    }
    return null;
  }

  public String compileExclusiveRuleExpression(final RuleExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    String code = _builder.toString();
    String string1 = "";
    String link = "";
    String setDateString1 = "";
    String setDateString2 = "";
    setDateExpression _setdate = expression.getSetdate();
    boolean _tripleNotEquals = (_setdate != null);
    if (_tripleNotEquals) {
      setDateString1 = "uint16 _year,uint8 _months,uint8 _days,uint8 _hours,uint8 _minutes";
      String _message = expression.getSetdate().getMessage();
      String _plus = (_message + "=convertToTimestamp(_year,_months,_days,_hours,_minutes);");
      setDateString2 = _plus;
    }
    if (((expression.getSetdate() != null) && (expression.getSet() != null))) {
      link = ",";
    }
    String _repeat = expression.getRepeat();
    boolean _tripleEquals = (_repeat == null);
    if (_tripleEquals) {
      messageExpression _set = expression.getSet();
      boolean _tripleEquals_1 = (_set == null);
      if (_tripleEquals_1) {
        initExpressions _person = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_1 = (_person != null);
        if (_tripleNotEquals_1) {
          String _name = expression.getName();
          String _plus_1 = ("function " + _name);
          String _plus_2 = (_plus_1 + "(");
          String _plus_3 = (_plus_2 + setDateString1);
          String _plus_4 = (_plus_3 + ") internal payable onlyState(ContractState) only");
          String _name_1 = expression.getTotalOperation().getPerson().getName();
          String _plus_5 = (_plus_4 + _name_1);
          String _plus_6 = (_plus_5 + " unDone(\"");
          String _name_2 = expression.getName();
          String _plus_7 = (_plus_6 + _name_2);
          String _plus_8 = (_plus_7 + "\"){");
          string1 = _plus_8;
        } else {
          Group _person2 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_2 = (_person2 != null);
          if (_tripleNotEquals_2) {
            String _name_3 = expression.getName();
            String _plus_9 = ("function " + _name_3);
            String _plus_10 = (_plus_9 + "(");
            String _plus_11 = (_plus_10 + setDateString1);
            String _plus_12 = (_plus_11 + ") internal payable onlyState(ContractState) only");
            String _name_4 = expression.getTotalOperation().getPerson2().getName();
            String _plus_13 = (_plus_12 + _name_4);
            String _plus_14 = (_plus_13 + " unDone(\"");
            String _name_5 = expression.getName();
            String _plus_15 = (_plus_14 + _name_5);
            String _plus_16 = (_plus_15 + "\"){");
            string1 = _plus_16;
          } else {
            String _name_6 = expression.getName();
            String _plus_17 = ("function " + _name_6);
            String _plus_18 = (_plus_17 + "(");
            String _plus_19 = (_plus_18 + setDateString1);
            String _plus_20 = (_plus_19 + ") internal payable onlyState(ContractState)");
            String _plus_21 = (_plus_20 + " unDone(\"");
            String _name_7 = expression.getName();
            String _plus_22 = (_plus_21 + _name_7);
            String _plus_23 = (_plus_22 + "\"){");
            string1 = _plus_23;
          }
        }
      }
      messageExpression _set_1 = expression.getSet();
      boolean _tripleNotEquals_3 = (_set_1 != null);
      if (_tripleNotEquals_3) {
        initExpressions _person_1 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_4 = (_person_1 != null);
        if (_tripleNotEquals_4) {
          String _name_8 = expression.getName();
          String _plus_24 = ("function " + _name_8);
          String _plus_25 = (_plus_24 + "(");
          String _plus_26 = (_plus_25 + setDateString1);
          String _plus_27 = (_plus_26 + link);
          String _compileMessageOperate = this.compileMessageOperate(expression.getSet());
          String _plus_28 = (_plus_27 + _compileMessageOperate);
          String _plus_29 = (_plus_28 + ") internal payable onlyState(ContractState) only");
          String _name_9 = expression.getTotalOperation().getPerson().getName();
          String _plus_30 = (_plus_29 + _name_9);
          String _plus_31 = (_plus_30 + " unDone(\"");
          String _name_10 = expression.getName();
          String _plus_32 = (_plus_31 + _name_10);
          String _plus_33 = (_plus_32 + "\"){");
          string1 = _plus_33;
        } else {
          Group _person2_1 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_5 = (_person2_1 != null);
          if (_tripleNotEquals_5) {
            String _name_11 = expression.getName();
            String _plus_34 = ("function " + _name_11);
            String _plus_35 = (_plus_34 + "(");
            String _plus_36 = (_plus_35 + setDateString1);
            String _plus_37 = (_plus_36 + link);
            String _compileMessageOperate_1 = this.compileMessageOperate(expression.getSet());
            String _plus_38 = (_plus_37 + _compileMessageOperate_1);
            String _plus_39 = (_plus_38 + ") internal payable onlyState(ContractState) only");
            String _name_12 = expression.getTotalOperation().getPerson2().getName();
            String _plus_40 = (_plus_39 + _name_12);
            String _plus_41 = (_plus_40 + " unDone(\"");
            String _name_13 = expression.getName();
            String _plus_42 = (_plus_41 + _name_13);
            String _plus_43 = (_plus_42 + "\"){");
            string1 = _plus_43;
          } else {
            String _name_14 = expression.getName();
            String _plus_44 = ("function " + _name_14);
            String _plus_45 = (_plus_44 + "(");
            String _plus_46 = (_plus_45 + setDateString1);
            String _plus_47 = (_plus_46 + link);
            String _compileMessageOperate_2 = this.compileMessageOperate(expression.getSet());
            String _plus_48 = (_plus_47 + _compileMessageOperate_2);
            String _plus_49 = (_plus_48 + ") internal payable onlyState(ContractState)");
            String _plus_50 = (_plus_49 + " unDone(\"");
            String _name_15 = expression.getName();
            String _plus_51 = (_plus_50 + _name_15);
            String _plus_52 = (_plus_51 + "\"){");
            string1 = _plus_52;
          }
        }
      }
    }
    String _repeat_1 = expression.getRepeat();
    boolean _tripleNotEquals_6 = (_repeat_1 != null);
    if (_tripleNotEquals_6) {
      messageExpression _set_2 = expression.getSet();
      boolean _tripleEquals_2 = (_set_2 == null);
      if (_tripleEquals_2) {
        initExpressions _person_2 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_7 = (_person_2 != null);
        if (_tripleNotEquals_7) {
          String _name_16 = expression.getName();
          String _plus_53 = ("function " + _name_16);
          String _plus_54 = (_plus_53 + "(");
          String _plus_55 = (_plus_54 + setDateString1);
          String _plus_56 = (_plus_55 + ") internal payable onlyState(ContractState) only");
          String _name_17 = expression.getTotalOperation().getPerson().getName();
          String _plus_57 = (_plus_56 + _name_17);
          String _plus_58 = (_plus_57 + "{");
          string1 = _plus_58;
        } else {
          Group _person2_2 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_8 = (_person2_2 != null);
          if (_tripleNotEquals_8) {
            String _name_18 = expression.getName();
            String _plus_59 = ("function " + _name_18);
            String _plus_60 = (_plus_59 + "(");
            String _plus_61 = (_plus_60 + setDateString1);
            String _plus_62 = (_plus_61 + ") internal payable onlyState(ContractState) only");
            String _name_19 = expression.getTotalOperation().getPerson2().getName();
            String _plus_63 = (_plus_62 + _name_19);
            String _plus_64 = (_plus_63 + "{");
            string1 = _plus_64;
          } else {
            String _name_20 = expression.getName();
            String _plus_65 = ("function " + _name_20);
            String _plus_66 = (_plus_65 + "(");
            String _plus_67 = (_plus_66 + setDateString1);
            String _plus_68 = (_plus_67 + ") internal payable onlyState(ContractState){");
            string1 = _plus_68;
          }
        }
      }
      messageExpression _set_3 = expression.getSet();
      boolean _tripleNotEquals_9 = (_set_3 != null);
      if (_tripleNotEquals_9) {
        initExpressions _person_3 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_10 = (_person_3 != null);
        if (_tripleNotEquals_10) {
          String _name_21 = expression.getName();
          String _plus_69 = ("function " + _name_21);
          String _plus_70 = (_plus_69 + "(");
          String _plus_71 = (_plus_70 + setDateString1);
          String _plus_72 = (_plus_71 + link);
          String _compileMessageOperate_3 = this.compileMessageOperate(expression.getSet());
          String _plus_73 = (_plus_72 + _compileMessageOperate_3);
          String _plus_74 = (_plus_73 + ") internal payable onlyState(ContractState) only");
          String _name_22 = expression.getTotalOperation().getPerson().getName();
          String _plus_75 = (_plus_74 + _name_22);
          String _plus_76 = (_plus_75 + "{");
          string1 = _plus_76;
        } else {
          Group _person2_3 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_11 = (_person2_3 != null);
          if (_tripleNotEquals_11) {
            String _name_23 = expression.getName();
            String _plus_77 = ("function " + _name_23);
            String _plus_78 = (_plus_77 + "(");
            String _plus_79 = (_plus_78 + setDateString1);
            String _plus_80 = (_plus_79 + link);
            String _compileMessageOperate_4 = this.compileMessageOperate(expression.getSet());
            String _plus_81 = (_plus_80 + _compileMessageOperate_4);
            String _plus_82 = (_plus_81 + ") internal payable onlyState(ContractState) only");
            String _name_24 = expression.getTotalOperation().getPerson2().getName();
            String _plus_83 = (_plus_82 + _name_24);
            String _plus_84 = (_plus_83 + "{");
            string1 = _plus_84;
          } else {
            String _name_25 = expression.getName();
            String _plus_85 = ("function " + _name_25);
            String _plus_86 = (_plus_85 + "(");
            String _plus_87 = (_plus_86 + setDateString1);
            String _plus_88 = (_plus_87 + link);
            String _compileMessageOperate_5 = this.compileMessageOperate(expression.getSet());
            String _plus_89 = (_plus_88 + _compileMessageOperate_5);
            String _plus_90 = (_plus_89 + ") internal payable onlyState(ContractState){");
            string1 = _plus_90;
          }
        }
      }
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    String string2 = _builder_1.toString();
    messageExpression _set_4 = expression.getSet();
    boolean _tripleNotEquals_12 = (_set_4 != null);
    if (_tripleNotEquals_12) {
      String _string2 = string2;
      CharSequence _compileMessageOperateThing = this.compileMessageOperateThing(expression.getSet());
      string2 = (_string2 + _compileMessageOperateThing);
    }
    String string3 = "";
    TotalCondition _totalCondition = expression.getTotalCondition();
    boolean _tripleNotEquals_13 = (_totalCondition != null);
    if (_tripleNotEquals_13) {
      String _string3 = string3;
      String _compileTotalCondition = this.compileTotalCondition(expression.getTotalCondition());
      String _plus_91 = ("if(" + _compileTotalCondition);
      String _plus_92 = (_plus_91 + "){");
      string3 = (_string3 + _plus_92);
    }
    StringConcatenation _builder_2 = new StringConcatenation();
    String string4 = _builder_2.toString();
    TotalOperation _totalOperation = expression.getTotalOperation();
    boolean _tripleNotEquals_14 = (_totalOperation != null);
    if (_tripleNotEquals_14) {
      String _string4 = string4;
      String _compileTotalOperation = this.compileTotalOperation(expression.getTotalOperation());
      string4 = (_string4 + _compileTotalOperation);
    }
    StringConcatenation _builder_3 = new StringConcatenation();
    String string5 = _builder_3.toString();
    EList<SubExpression> _subExpression = expression.getSubExpression();
    boolean _tripleNotEquals_15 = (_subExpression != null);
    if (_tripleNotEquals_15) {
      EList<SubExpression> _subExpression_1 = expression.getSubExpression();
      for (final SubExpression i : _subExpression_1) {
        {
          String string6 = "";
          StringConcatenation _builder_4 = new StringConcatenation();
          String string7 = _builder_4.toString();
          String string8 = "";
          String string9 = "";
          TotalCondition _totalCondition_1 = i.getTotalExpression().getTotalCondition();
          boolean _tripleNotEquals_16 = (_totalCondition_1 != null);
          if (_tripleNotEquals_16) {
            String _string6 = string6;
            String _compileTotalCondition_1 = this.compileTotalCondition(i.getTotalExpression().getTotalCondition());
            String _plus_93 = ("if(" + _compileTotalCondition_1);
            String _plus_94 = (_plus_93 + "){");
            string6 = (_string6 + _plus_94);
          }
          String _string7 = string7;
          String _compileTotalOperation_1 = this.compileTotalOperation(i.getTotalExpression().getTotalOperation());
          string7 = (_string7 + _compileTotalOperation_1);
          ElseExpression _elseExpression = i.getTotalExpression().getElseExpression();
          boolean _tripleNotEquals_17 = (_elseExpression != null);
          if (_tripleNotEquals_17) {
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("else{ ");
            _builder_5.newLine();
            _builder_5.append("\t\t\t\t\t\t");
            String _compileTotalOperation_2 = this.compileTotalOperation(i.getTotalExpression().getElseExpression().getTotalOperation());
            _builder_5.append(_compileTotalOperation_2, "\t\t\t\t\t\t");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("\t\t\t\t\t\t");
            _builder_5.append("}");
            string8 = _builder_5.toString();
          }
          TotalCondition _totalCondition_2 = i.getTotalExpression().getTotalCondition();
          boolean _tripleNotEquals_18 = (_totalCondition_2 != null);
          if (_tripleNotEquals_18) {
            string9 = "}";
          }
          String _string5 = string5;
          StringConcatenation _builder_6 = new StringConcatenation();
          _builder_6.append(string6);
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("\t");
          _builder_6.append(string7, "\t");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append(string8);
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("\t");
          _builder_6.append(string9, "\t");
          _builder_6.newLineIfNotEmpty();
          string5 = (_string5 + _builder_6);
        }
      }
    }
    String _name_26 = expression.getName();
    String _plus_93 = ("changeRule(\"" + _name_26);
    String string6 = (_plus_93 + "\");");
    StringConcatenation _builder_4 = new StringConcatenation();
    String string7 = _builder_4.toString();
    TotalCondition _totalCondition_1 = expression.getTotalCondition();
    boolean _tripleNotEquals_16 = (_totalCondition_1 != null);
    if (_tripleNotEquals_16) {
      string7 = "}";
    }
    String _code = code;
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append(string1);
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(setDateString2, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string2, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string3, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string4, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string5, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string6, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string7, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("}");
    _builder_5.newLine();
    code = (_code + _builder_5);
    ElseExpression _elseExpression = expression.getElseExpression();
    boolean _tripleEquals_3 = (_elseExpression == null);
    if (_tripleEquals_3) {
      return code;
    }
    ElseExpression _elseExpression_1 = expression.getElseExpression();
    boolean _tripleNotEquals_17 = (_elseExpression_1 != null);
    if (_tripleNotEquals_17) {
      StringConcatenation _builder_6 = new StringConcatenation();
      String string8 = _builder_6.toString();
      String string9 = "";
      messageExpression _set_5 = expression.getElseExpression().getSet();
      boolean _tripleEquals_4 = (_set_5 == null);
      if (_tripleEquals_4) {
        initExpressions _person_4 = expression.getElseExpression().getTotalOperation().getPerson();
        boolean _tripleNotEquals_18 = (_person_4 != null);
        if (_tripleNotEquals_18) {
          String _name_27 = expression.getName();
          String _plus_94 = ("function else" + _name_27);
          String _plus_95 = (_plus_94 + "() public payable onlyState(ContractState) only");
          String _name_28 = expression.getElseExpression().getTotalOperation().getPerson().getName();
          String _plus_96 = (_plus_95 + _name_28);
          String _plus_97 = (_plus_96 + "{");
          string9 = _plus_97;
        } else {
          Group _person2_4 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_19 = (_person2_4 != null);
          if (_tripleNotEquals_19) {
            String _name_29 = expression.getName();
            String _plus_98 = ("function else" + _name_29);
            String _plus_99 = (_plus_98 + "() public payable onlyState(ContractState) only");
            String _name_30 = expression.getElseExpression().getTotalOperation().getPerson2().getName();
            String _plus_100 = (_plus_99 + _name_30);
            String _plus_101 = (_plus_100 + "{");
            string9 = _plus_101;
          } else {
            String _name_31 = expression.getName();
            String _plus_102 = ("function else" + _name_31);
            String _plus_103 = (_plus_102 + "() public payable onlyState(ContractState){");
            string9 = _plus_103;
          }
        }
      }
      messageExpression _set_6 = expression.getElseExpression().getSet();
      boolean _tripleNotEquals_20 = (_set_6 != null);
      if (_tripleNotEquals_20) {
        initExpressions _person_5 = expression.getElseExpression().getTotalOperation().getPerson();
        boolean _tripleNotEquals_21 = (_person_5 != null);
        if (_tripleNotEquals_21) {
          String _name_32 = expression.getName();
          String _plus_104 = ("function else" + _name_32);
          String _plus_105 = (_plus_104 + "(");
          String _compileMessageOperate_6 = this.compileMessageOperate(expression.getElseExpression().getSet());
          String _plus_106 = (_plus_105 + _compileMessageOperate_6);
          String _plus_107 = (_plus_106 + ") public payable onlyState(ContractState) only");
          String _name_33 = expression.getElseExpression().getTotalOperation().getPerson().getName();
          String _plus_108 = (_plus_107 + _name_33);
          String _plus_109 = (_plus_108 + "{");
          string9 = _plus_109;
        } else {
          Group _person2_5 = expression.getElseExpression().getTotalOperation().getPerson2();
          boolean _tripleNotEquals_22 = (_person2_5 != null);
          if (_tripleNotEquals_22) {
            String _name_34 = expression.getName();
            String _plus_110 = ("function else" + _name_34);
            String _plus_111 = (_plus_110 + "(");
            String _compileMessageOperate_7 = this.compileMessageOperate(expression.getElseExpression().getSet());
            String _plus_112 = (_plus_111 + _compileMessageOperate_7);
            String _plus_113 = (_plus_112 + ") public payable onlyState(ContractState) only");
            String _name_35 = expression.getElseExpression().getTotalOperation().getPerson2().getName();
            String _plus_114 = (_plus_113 + _name_35);
            String _plus_115 = (_plus_114 + "{");
            string9 = _plus_115;
          } else {
            String _name_36 = expression.getName();
            String _plus_116 = ("function else" + _name_36);
            String _plus_117 = (_plus_116 + "(");
            String _compileMessageOperate_8 = this.compileMessageOperate(expression.getElseExpression().getSet());
            String _plus_118 = (_plus_117 + _compileMessageOperate_8);
            String _plus_119 = (_plus_118 + ") public payable onlyState(ContractState) {");
            string9 = _plus_119;
          }
        }
      }
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("bool one=true;");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("if(one){");
      _builder_7.newLine();
      String onlyOne = _builder_7.toString();
      String string10 = "";
      String string11 = "";
      String _name_37 = expression.getName();
      String _plus_120 = ("emit completedRule(msg.sender,\"else" + _name_37);
      String string112 = (_plus_120 + "\");");
      StringConcatenation _builder_8 = new StringConcatenation();
      String string12 = _builder_8.toString();
      String string13 = "";
      TotalCondition _totalCondition_2 = expression.getTotalCondition();
      boolean _tripleNotEquals_23 = (_totalCondition_2 != null);
      if (_tripleNotEquals_23) {
        String _string10 = string10;
        String _compileTotalCondition_1 = this.compileTotalCondition(expression.getTotalCondition());
        String _plus_121 = ("if(!(" + _compileTotalCondition_1);
        String _plus_122 = (_plus_121 + ")){");
        string10 = (_string10 + _plus_122);
      }
      String _string11 = string11;
      String _compileTotalOperation_1 = this.compileTotalOperation(expression.getElseExpression().getTotalOperation());
      string11 = (_string11 + _compileTotalOperation_1);
      TotalCondition _totalCondition_3 = expression.getTotalCondition();
      boolean _tripleNotEquals_24 = (_totalCondition_3 != null);
      if (_tripleNotEquals_24) {
        string13 = "}";
      }
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append(string9);
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(onlyOne, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string10, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t");
      _builder_9.append(string11, "\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t");
      _builder_9.append(string112, "\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string13, "\t");
      _builder_9.newLineIfNotEmpty();
      string8 = _builder_9.toString();
      String _code_1 = code;
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append(string8);
      _builder_10.newLineIfNotEmpty();
      _builder_10.append("one=false;");
      _builder_10.newLine();
      _builder_10.append("}");
      _builder_10.newLine();
      code = (_code_1 + _builder_10);
      return code;
    }
    return null;
  }

  public String compileRuleExpression(final RuleExpression expression) {
    StringConcatenation _builder = new StringConcatenation();
    String code = _builder.toString();
    String string1 = "";
    String link = "";
    String setDateString1 = "";
    String setDateString2 = "";
    setDateExpression _setdate = expression.getSetdate();
    boolean _tripleNotEquals = (_setdate != null);
    if (_tripleNotEquals) {
      setDateString1 = "uint16 _year,uint8 _months,uint8 _days,uint8 _hours,uint8 _minutes";
      String _message = expression.getSetdate().getMessage();
      String _plus = (_message + "=convertToTimestamp(_year,_months,_days,_hours,_minutes);");
      setDateString2 = _plus;
    }
    if (((expression.getSetdate() != null) && (expression.getSet() != null))) {
      link = ",";
    }
    String _repeat = expression.getRepeat();
    boolean _tripleEquals = (_repeat == null);
    if (_tripleEquals) {
      messageExpression _set = expression.getSet();
      boolean _tripleEquals_1 = (_set == null);
      if (_tripleEquals_1) {
        initExpressions _person = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_1 = (_person != null);
        if (_tripleNotEquals_1) {
          String _name = expression.getName();
          String _plus_1 = ("function " + _name);
          String _plus_2 = (_plus_1 + "(");
          String _plus_3 = (_plus_2 + setDateString1);
          String _plus_4 = (_plus_3 + ") public payable onlyState(ContractState) only");
          String _name_1 = expression.getTotalOperation().getPerson().getName();
          String _plus_5 = (_plus_4 + _name_1);
          String _plus_6 = (_plus_5 + " unDone(\"");
          String _name_2 = expression.getName();
          String _plus_7 = (_plus_6 + _name_2);
          String _plus_8 = (_plus_7 + "\"){");
          string1 = _plus_8;
        } else {
          Group _person2 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_2 = (_person2 != null);
          if (_tripleNotEquals_2) {
            String _name_3 = expression.getName();
            String _plus_9 = ("function " + _name_3);
            String _plus_10 = (_plus_9 + "(");
            String _plus_11 = (_plus_10 + setDateString1);
            String _plus_12 = (_plus_11 + ") public payable onlyState(ContractState) only");
            String _name_4 = expression.getTotalOperation().getPerson2().getName();
            String _plus_13 = (_plus_12 + _name_4);
            String _plus_14 = (_plus_13 + " unDone(\"");
            String _name_5 = expression.getName();
            String _plus_15 = (_plus_14 + _name_5);
            String _plus_16 = (_plus_15 + "\"){");
            string1 = _plus_16;
          } else {
            String _name_6 = expression.getName();
            String _plus_17 = ("function " + _name_6);
            String _plus_18 = (_plus_17 + "(");
            String _plus_19 = (_plus_18 + setDateString1);
            String _plus_20 = (_plus_19 + ") public payable onlyState(ContractState)");
            String _plus_21 = (_plus_20 + " unDone(\"");
            String _name_7 = expression.getName();
            String _plus_22 = (_plus_21 + _name_7);
            String _plus_23 = (_plus_22 + "\"){");
            string1 = _plus_23;
          }
        }
      }
      messageExpression _set_1 = expression.getSet();
      boolean _tripleNotEquals_3 = (_set_1 != null);
      if (_tripleNotEquals_3) {
        initExpressions _person_1 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_4 = (_person_1 != null);
        if (_tripleNotEquals_4) {
          String _name_8 = expression.getName();
          String _plus_24 = ("function " + _name_8);
          String _plus_25 = (_plus_24 + "(");
          String _plus_26 = (_plus_25 + setDateString1);
          String _plus_27 = (_plus_26 + link);
          String _compileMessageOperate = this.compileMessageOperate(expression.getSet());
          String _plus_28 = (_plus_27 + _compileMessageOperate);
          String _plus_29 = (_plus_28 + ") public payable onlyState(ContractState) only");
          String _name_9 = expression.getTotalOperation().getPerson().getName();
          String _plus_30 = (_plus_29 + _name_9);
          String _plus_31 = (_plus_30 + " unDone(\"");
          String _name_10 = expression.getName();
          String _plus_32 = (_plus_31 + _name_10);
          String _plus_33 = (_plus_32 + "\"){");
          string1 = _plus_33;
        } else {
          Group _person2_1 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_5 = (_person2_1 != null);
          if (_tripleNotEquals_5) {
            String _name_11 = expression.getName();
            String _plus_34 = ("function " + _name_11);
            String _plus_35 = (_plus_34 + "(");
            String _plus_36 = (_plus_35 + setDateString1);
            String _plus_37 = (_plus_36 + link);
            String _compileMessageOperate_1 = this.compileMessageOperate(expression.getSet());
            String _plus_38 = (_plus_37 + _compileMessageOperate_1);
            String _plus_39 = (_plus_38 + ") public payable onlyState(ContractState) only");
            String _name_12 = expression.getTotalOperation().getPerson2().getName();
            String _plus_40 = (_plus_39 + _name_12);
            String _plus_41 = (_plus_40 + " unDone(\"");
            String _name_13 = expression.getName();
            String _plus_42 = (_plus_41 + _name_13);
            String _plus_43 = (_plus_42 + "\"){");
            string1 = _plus_43;
          } else {
            String _name_14 = expression.getName();
            String _plus_44 = ("function " + _name_14);
            String _plus_45 = (_plus_44 + "(");
            String _plus_46 = (_plus_45 + setDateString1);
            String _plus_47 = (_plus_46 + link);
            String _compileMessageOperate_2 = this.compileMessageOperate(expression.getSet());
            String _plus_48 = (_plus_47 + _compileMessageOperate_2);
            String _plus_49 = (_plus_48 + ") public payable onlyState(ContractState)");
            String _plus_50 = (_plus_49 + " unDone(\"");
            String _name_15 = expression.getName();
            String _plus_51 = (_plus_50 + _name_15);
            String _plus_52 = (_plus_51 + "\"){");
            string1 = _plus_52;
          }
        }
      }
    }
    String _repeat_1 = expression.getRepeat();
    boolean _tripleNotEquals_6 = (_repeat_1 != null);
    if (_tripleNotEquals_6) {
      messageExpression _set_2 = expression.getSet();
      boolean _tripleEquals_2 = (_set_2 == null);
      if (_tripleEquals_2) {
        initExpressions _person_2 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_7 = (_person_2 != null);
        if (_tripleNotEquals_7) {
          String _name_16 = expression.getName();
          String _plus_53 = ("function " + _name_16);
          String _plus_54 = (_plus_53 + "(");
          String _plus_55 = (_plus_54 + setDateString1);
          String _plus_56 = (_plus_55 + ") public payable onlyState(ContractState) only");
          String _name_17 = expression.getTotalOperation().getPerson().getName();
          String _plus_57 = (_plus_56 + _name_17);
          String _plus_58 = (_plus_57 + " {");
          string1 = _plus_58;
        } else {
          Group _person2_2 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_8 = (_person2_2 != null);
          if (_tripleNotEquals_8) {
            String _name_18 = expression.getName();
            String _plus_59 = ("function " + _name_18);
            String _plus_60 = (_plus_59 + "(");
            String _plus_61 = (_plus_60 + setDateString1);
            String _plus_62 = (_plus_61 + ") public payable onlyState(ContractState) only");
            String _name_19 = expression.getTotalOperation().getPerson2().getName();
            String _plus_63 = (_plus_62 + _name_19);
            String _plus_64 = (_plus_63 + " {");
            string1 = _plus_64;
          } else {
            String _name_20 = expression.getName();
            String _plus_65 = ("function " + _name_20);
            String _plus_66 = (_plus_65 + "(");
            String _plus_67 = (_plus_66 + setDateString1);
            String _plus_68 = (_plus_67 + ") public payable onlyState(ContractState)");
            String _plus_69 = (_plus_68 + " {");
            string1 = _plus_69;
          }
        }
      }
      messageExpression _set_3 = expression.getSet();
      boolean _tripleNotEquals_9 = (_set_3 != null);
      if (_tripleNotEquals_9) {
        initExpressions _person_3 = expression.getTotalOperation().getPerson();
        boolean _tripleNotEquals_10 = (_person_3 != null);
        if (_tripleNotEquals_10) {
          String _name_21 = expression.getName();
          String _plus_70 = ("function " + _name_21);
          String _plus_71 = (_plus_70 + "(");
          String _plus_72 = (_plus_71 + setDateString1);
          String _plus_73 = (_plus_72 + link);
          String _compileMessageOperate_3 = this.compileMessageOperate(expression.getSet());
          String _plus_74 = (_plus_73 + _compileMessageOperate_3);
          String _plus_75 = (_plus_74 + ") public payable onlyState(ContractState) only");
          String _name_22 = expression.getTotalOperation().getPerson().getName();
          String _plus_76 = (_plus_75 + _name_22);
          String _plus_77 = (_plus_76 + " {");
          string1 = _plus_77;
        } else {
          Group _person2_3 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_11 = (_person2_3 != null);
          if (_tripleNotEquals_11) {
            String _name_23 = expression.getName();
            String _plus_78 = ("function " + _name_23);
            String _plus_79 = (_plus_78 + "(");
            String _plus_80 = (_plus_79 + setDateString1);
            String _plus_81 = (_plus_80 + link);
            String _compileMessageOperate_4 = this.compileMessageOperate(expression.getSet());
            String _plus_82 = (_plus_81 + _compileMessageOperate_4);
            String _plus_83 = (_plus_82 + ") public payable onlyState(ContractState) only");
            String _name_24 = expression.getTotalOperation().getPerson2().getName();
            String _plus_84 = (_plus_83 + _name_24);
            String _plus_85 = (_plus_84 + " {");
            string1 = _plus_85;
          } else {
            String _name_25 = expression.getName();
            String _plus_86 = ("function " + _name_25);
            String _plus_87 = (_plus_86 + "(");
            String _plus_88 = (_plus_87 + setDateString1);
            String _plus_89 = (_plus_88 + link);
            String _compileMessageOperate_5 = this.compileMessageOperate(expression.getSet());
            String _plus_90 = (_plus_89 + _compileMessageOperate_5);
            String _plus_91 = (_plus_90 + ") public payable onlyState(ContractState)");
            String _plus_92 = (_plus_91 + " {");
            string1 = _plus_92;
          }
        }
      }
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    String string2 = _builder_1.toString();
    messageExpression _set_4 = expression.getSet();
    boolean _tripleNotEquals_12 = (_set_4 != null);
    if (_tripleNotEquals_12) {
      String _string2 = string2;
      CharSequence _compileMessageOperateThing = this.compileMessageOperateThing(expression.getSet());
      string2 = (_string2 + _compileMessageOperateThing);
    }
    String string3 = "";
    TotalCondition _totalCondition = expression.getTotalCondition();
    boolean _tripleNotEquals_13 = (_totalCondition != null);
    if (_tripleNotEquals_13) {
      String _compileTotalCondition = this.compileTotalCondition(expression.getTotalCondition());
      String _plus_93 = ((string3 + "if(") + _compileTotalCondition);
      String _plus_94 = (_plus_93 + "){");
      string3 = _plus_94;
    }
    StringConcatenation _builder_2 = new StringConcatenation();
    String string4 = _builder_2.toString();
    String _string4 = string4;
    String _compileTotalOperation = this.compileTotalOperation(expression.getTotalOperation());
    string4 = (_string4 + _compileTotalOperation);
    StringConcatenation _builder_3 = new StringConcatenation();
    String string5 = _builder_3.toString();
    EList<SubExpression> _subExpression = expression.getSubExpression();
    boolean _tripleNotEquals_14 = (_subExpression != null);
    if (_tripleNotEquals_14) {
      EList<SubExpression> _subExpression_1 = expression.getSubExpression();
      for (final SubExpression i : _subExpression_1) {
        {
          String string6 = "";
          StringConcatenation _builder_4 = new StringConcatenation();
          String string7 = _builder_4.toString();
          String string8 = "";
          String string9 = "";
          TotalCondition _totalCondition_1 = i.getTotalExpression().getTotalCondition();
          boolean _tripleNotEquals_15 = (_totalCondition_1 != null);
          if (_tripleNotEquals_15) {
            String _string6 = string6;
            String _compileTotalCondition_1 = this.compileTotalCondition(i.getTotalExpression().getTotalCondition());
            String _plus_95 = ("if(" + _compileTotalCondition_1);
            String _plus_96 = (_plus_95 + "){");
            string6 = (_string6 + _plus_96);
          }
          String _string7 = string7;
          String _compileTotalOperation_1 = this.compileTotalOperation(i.getTotalExpression().getTotalOperation());
          string7 = (_string7 + _compileTotalOperation_1);
          ElseExpression _elseExpression = i.getTotalExpression().getElseExpression();
          boolean _tripleNotEquals_16 = (_elseExpression != null);
          if (_tripleNotEquals_16) {
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("else{ ");
            _builder_5.newLine();
            _builder_5.append("\t\t\t\t\t\t");
            String _compileTotalOperation_2 = this.compileTotalOperation(i.getTotalExpression().getElseExpression().getTotalOperation());
            _builder_5.append(_compileTotalOperation_2, "\t\t\t\t\t\t");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("\t\t\t\t\t\t");
            _builder_5.append("}");
            string8 = _builder_5.toString();
          }
          TotalCondition _totalCondition_2 = i.getTotalExpression().getTotalCondition();
          boolean _tripleNotEquals_17 = (_totalCondition_2 != null);
          if (_tripleNotEquals_17) {
            string9 = "}";
          }
          String _string5 = string5;
          StringConcatenation _builder_6 = new StringConcatenation();
          _builder_6.append(string6);
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("\t");
          _builder_6.append(string7, "\t");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append(string8);
          _builder_6.newLineIfNotEmpty();
          _builder_6.append(string9);
          _builder_6.newLineIfNotEmpty();
          string5 = (_string5 + _builder_6);
        }
      }
    }
    String _name_26 = expression.getName();
    String _plus_95 = ("changeRule(\"" + _name_26);
    String string6 = (_plus_95 + "\");");
    StringConcatenation _builder_4 = new StringConcatenation();
    String string7 = _builder_4.toString();
    TotalCondition _totalCondition_1 = expression.getTotalCondition();
    boolean _tripleNotEquals_15 = (_totalCondition_1 != null);
    if (_tripleNotEquals_15) {
      string7 = "}";
    }
    String _code = code;
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append(string1);
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(setDateString2, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string2, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string3, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string4, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string5, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t\t");
    _builder_5.append(string6, "\t\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("\t");
    _builder_5.append(string7, "\t");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("}");
    _builder_5.newLine();
    code = (_code + _builder_5);
    ElseExpression _elseExpression = expression.getElseExpression();
    boolean _tripleEquals_3 = (_elseExpression == null);
    if (_tripleEquals_3) {
      return code;
    }
    ElseExpression _elseExpression_1 = expression.getElseExpression();
    boolean _tripleNotEquals_16 = (_elseExpression_1 != null);
    if (_tripleNotEquals_16) {
      StringConcatenation _builder_6 = new StringConcatenation();
      String string8 = _builder_6.toString();
      String string9 = "";
      messageExpression _set_5 = expression.getElseExpression().getSet();
      boolean _tripleEquals_4 = (_set_5 == null);
      if (_tripleEquals_4) {
        initExpressions _person_4 = expression.getElseExpression().getTotalOperation().getPerson();
        boolean _tripleNotEquals_17 = (_person_4 != null);
        if (_tripleNotEquals_17) {
          String _name_27 = expression.getName();
          String _plus_96 = ("function else" + _name_27);
          String _plus_97 = (_plus_96 + "() public payable onlyState(ContractState) only");
          String _name_28 = expression.getElseExpression().getTotalOperation().getPerson().getName();
          String _plus_98 = (_plus_97 + _name_28);
          String _plus_99 = (_plus_98 + " unDone(\"");
          String _name_29 = expression.getName();
          String _plus_100 = (_plus_99 + _name_29);
          String _plus_101 = (_plus_100 + "\"){");
          string9 = _plus_101;
        } else {
          Group _person2_4 = expression.getTotalOperation().getPerson2();
          boolean _tripleNotEquals_18 = (_person2_4 != null);
          if (_tripleNotEquals_18) {
            String _name_30 = expression.getName();
            String _plus_102 = ("function else" + _name_30);
            String _plus_103 = (_plus_102 + "() public payable onlyState(ContractState) only");
            String _name_31 = expression.getElseExpression().getTotalOperation().getPerson2().getName();
            String _plus_104 = (_plus_103 + _name_31);
            String _plus_105 = (_plus_104 + " unDone(\"");
            String _name_32 = expression.getName();
            String _plus_106 = (_plus_105 + _name_32);
            String _plus_107 = (_plus_106 + "\"){");
            string9 = _plus_107;
          } else {
            String _name_33 = expression.getName();
            String _plus_108 = ("function else" + _name_33);
            String _plus_109 = (_plus_108 + "() public payable onlyState(ContractState) unDone(\"");
            String _name_34 = expression.getName();
            String _plus_110 = (_plus_109 + _name_34);
            String _plus_111 = (_plus_110 + "\"){");
            string9 = _plus_111;
          }
        }
      }
      messageExpression _set_6 = expression.getElseExpression().getSet();
      boolean _tripleNotEquals_19 = (_set_6 != null);
      if (_tripleNotEquals_19) {
        initExpressions _person_5 = expression.getElseExpression().getTotalOperation().getPerson();
        boolean _tripleNotEquals_20 = (_person_5 != null);
        if (_tripleNotEquals_20) {
          String _name_35 = expression.getName();
          String _plus_112 = ("function else" + _name_35);
          String _plus_113 = (_plus_112 + "(");
          String _compileMessageOperate_6 = this.compileMessageOperate(expression.getElseExpression().getSet());
          String _plus_114 = (_plus_113 + _compileMessageOperate_6);
          String _plus_115 = (_plus_114 + ") public payable onlyState(ContractState) only");
          String _name_36 = expression.getElseExpression().getTotalOperation().getPerson().getName();
          String _plus_116 = (_plus_115 + _name_36);
          String _plus_117 = (_plus_116 + " unDone(\"");
          String _name_37 = expression.getName();
          String _plus_118 = (_plus_117 + _name_37);
          String _plus_119 = (_plus_118 + "\"){");
          string9 = _plus_119;
        } else {
          Group _person2_5 = expression.getElseExpression().getTotalOperation().getPerson2();
          boolean _tripleNotEquals_21 = (_person2_5 != null);
          if (_tripleNotEquals_21) {
            String _name_38 = expression.getName();
            String _plus_120 = ("function else" + _name_38);
            String _plus_121 = (_plus_120 + "(");
            String _compileMessageOperate_7 = this.compileMessageOperate(expression.getElseExpression().getSet());
            String _plus_122 = (_plus_121 + _compileMessageOperate_7);
            String _plus_123 = (_plus_122 + ") public payable onlyState(ContractState) only");
            String _name_39 = expression.getElseExpression().getTotalOperation().getPerson2().getName();
            String _plus_124 = (_plus_123 + _name_39);
            String _plus_125 = (_plus_124 + " unDone(\"");
            String _name_40 = expression.getName();
            String _plus_126 = (_plus_125 + _name_40);
            String _plus_127 = (_plus_126 + "\"){");
            string9 = _plus_127;
          } else {
            String _name_41 = expression.getName();
            String _plus_128 = ("function else" + _name_41);
            String _plus_129 = (_plus_128 + "(");
            String _compileMessageOperate_8 = this.compileMessageOperate(expression.getElseExpression().getSet());
            String _plus_130 = (_plus_129 + _compileMessageOperate_8);
            String _plus_131 = (_plus_130 + ") public payable onlyState(ContractState) unDone(\"");
            String _name_42 = expression.getName();
            String _plus_132 = (_plus_131 + _name_42);
            String _plus_133 = (_plus_132 + "\"){");
            string9 = _plus_133;
          }
        }
      }
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("bool one=true;");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("if(one){");
      _builder_7.newLine();
      String onlyOne = _builder_7.toString();
      String string10 = "";
      String string11 = "";
      String _name_43 = expression.getName();
      String _plus_134 = ("emit completedRule(msg.sender,\"else" + _name_43);
      String string112 = (_plus_134 + "\");");
      StringConcatenation _builder_8 = new StringConcatenation();
      String string12 = _builder_8.toString();
      String string13 = "";
      TotalCondition _totalCondition_2 = expression.getTotalCondition();
      boolean _tripleNotEquals_22 = (_totalCondition_2 != null);
      if (_tripleNotEquals_22) {
        String _string10 = string10;
        String _compileTotalCondition_1 = this.compileTotalCondition(expression.getTotalCondition());
        String _plus_135 = ("if(!(" + _compileTotalCondition_1);
        String _plus_136 = (_plus_135 + ")){");
        string10 = (_string10 + _plus_136);
      }
      String _string11 = string11;
      String _compileTotalOperation_1 = this.compileTotalOperation(expression.getElseExpression().getTotalOperation());
      string11 = (_string11 + _compileTotalOperation_1);
      TotalCondition _totalCondition_3 = expression.getTotalCondition();
      boolean _tripleNotEquals_23 = (_totalCondition_3 != null);
      if (_tripleNotEquals_23) {
        string13 = "}";
      }
      TotalCondition _totalCondition_4 = expression.getTotalCondition();
      boolean _tripleNotEquals_24 = (_totalCondition_4 != null);
      if (_tripleNotEquals_24) {
        string12 = "}";
      }
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append(string9);
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(onlyOne, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string10, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t");
      _builder_9.append(string11, "\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t");
      _builder_9.append(string112, "\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t");
      _builder_9.append(string13, "\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append(string12);
      _builder_9.newLineIfNotEmpty();
      string8 = _builder_9.toString();
      String _code_1 = code;
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append(string8);
      _builder_10.newLineIfNotEmpty();
      _builder_10.append("one=false;");
      _builder_10.newLine();
      _builder_10.append("}");
      _builder_10.newLine();
      code = (_code_1 + _builder_10);
      return code;
    }
    return null;
  }

  public String compileTotalCondition(final TotalCondition condition) {
    String myString = "";
    SingleCondition _condition = condition.getCondition();
    boolean _tripleNotEquals = (_condition != null);
    if (_tripleNotEquals) {
      String _no = condition.getCondition().getNo();
      boolean _tripleNotEquals_1 = (_no != null);
      if (_tripleNotEquals_1) {
        Object _compileTrueCondition = this.compileTrueCondition(condition.getCondition().getCondition());
        String _plus = ((myString + "!") + _compileTrueCondition);
        myString = _plus;
      } else {
        Object _compileTrueCondition_1 = this.compileTrueCondition(condition.getCondition().getCondition());
        String _plus_1 = (myString + _compileTrueCondition_1);
        myString = _plus_1;
      }
    }
    SingleLinkCondition _linkCondition = condition.getLinkCondition();
    boolean _tripleNotEquals_2 = (_linkCondition != null);
    if (_tripleNotEquals_2) {
      String _no_1 = condition.getLinkCondition().getNo();
      boolean _tripleNotEquals_3 = (_no_1 != null);
      if (_tripleNotEquals_3) {
        String _name = condition.getLinkCondition().getLinkCondition().getName();
        String _plus_2 = ((myString + "!") + _name);
        String _plus_3 = (_plus_2 + "()");
        myString = _plus_3;
      } else {
        String _name_1 = condition.getLinkCondition().getLinkCondition().getName();
        String _plus_4 = (myString + _name_1);
        String _plus_5 = (_plus_4 + "()");
        myString = _plus_5;
      }
    }
    EList<AndOrCondition> _andorcondition = condition.getAndorcondition();
    for (final AndOrCondition i : _andorcondition) {
      {
        String _link = i.getLink();
        boolean _equals = Objects.equal(_link, "and");
        if (_equals) {
          myString = (myString + "&&");
        } else {
          myString = (myString + "||");
        }
        SingleCondition _condition_1 = i.getCondition();
        boolean _tripleNotEquals_4 = (_condition_1 != null);
        if (_tripleNotEquals_4) {
          String _no_2 = i.getCondition().getNo();
          boolean _tripleNotEquals_5 = (_no_2 != null);
          if (_tripleNotEquals_5) {
            Object _compileTrueCondition_2 = this.compileTrueCondition(i.getCondition().getCondition());
            String _plus_6 = ((myString + "!") + _compileTrueCondition_2);
            myString = _plus_6;
          } else {
            Object _compileTrueCondition_3 = this.compileTrueCondition(i.getCondition().getCondition());
            String _plus_7 = (myString + _compileTrueCondition_3);
            myString = _plus_7;
          }
        }
        SingleLinkCondition _linkCondition_1 = i.getLinkCondition();
        boolean _tripleNotEquals_6 = (_linkCondition_1 != null);
        if (_tripleNotEquals_6) {
          String _no_3 = i.getLinkCondition().getNo();
          boolean _tripleNotEquals_7 = (_no_3 != null);
          if (_tripleNotEquals_7) {
            String _name_2 = i.getLinkCondition().getLinkCondition().getName();
            String _plus_8 = ((myString + "!") + _name_2);
            String _plus_9 = (_plus_8 + "()");
            myString = _plus_9;
          } else {
            String _name_3 = i.getLinkCondition().getLinkCondition().getName();
            String _plus_10 = (myString + _name_3);
            String _plus_11 = (_plus_10 + "()");
            myString = _plus_11;
          }
        }
      }
    }
    return myString;
  }

  public String compileTotalOperation(final TotalOperation operation) {
    StringConcatenation _builder = new StringConcatenation();
    String code = _builder.toString();
    StringConcatenation _builder_1 = new StringConcatenation();
    String string1 = _builder_1.toString();
    String _string1 = string1;
    StringConcatenation _builder_2 = new StringConcatenation();
    {
      Timepoint _timePoint = operation.getTimePoint();
      boolean _tripleNotEquals = (_timePoint != null);
      if (_tripleNotEquals) {
        String _compileTimePoint = this.compileTimePoint(operation.getTimePoint());
        _builder_2.append(_compileTimePoint);
        _builder_2.newLineIfNotEmpty();
      }
    }
    string1 = (_string1 + _builder_2);
    FailResult _failresult = operation.getFailresult();
    boolean _tripleNotEquals_1 = (_failresult != null);
    if (_tripleNotEquals_1) {
      String _string1_1 = string1;
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("bool completed");
      _builder_3.append(this.con);
      _builder_3.append(" = false;");
      _builder_3.newLineIfNotEmpty();
      {
        trueOperation _firstOperation = operation.getFirstOperation();
        boolean _tripleNotEquals_2 = (_firstOperation != null);
        if (_tripleNotEquals_2) {
          String _compileTrueOperate = this.compileTrueOperate(operation.getFirstOperation());
          _builder_3.append(_compileTrueOperate);
          _builder_3.newLineIfNotEmpty();
        }
      }
      {
        OperateLink _linkOperation = operation.getLinkOperation();
        boolean _tripleNotEquals_3 = (_linkOperation != null);
        if (_tripleNotEquals_3) {
          CharSequence _compilelinkOperate = this.compilelinkOperate(operation.getLinkOperation());
          _builder_3.append(_compilelinkOperate);
          _builder_3.newLineIfNotEmpty();
        }
      }
      {
        EList<AndOrOperationLink> _andor = operation.getAndor();
        for(final AndOrOperationLink i : _andor) {
          {
            trueOperation _firstOperation_1 = i.getFirstOperation();
            boolean _tripleNotEquals_4 = (_firstOperation_1 != null);
            if (_tripleNotEquals_4) {
              String _compileTrueOperate_1 = this.compileTrueOperate(i.getFirstOperation());
              _builder_3.append(_compileTrueOperate_1);
              _builder_3.newLineIfNotEmpty();
            }
          }
          {
            OperateLink _linkOperation_1 = i.getLinkOperation();
            boolean _tripleNotEquals_5 = (_linkOperation_1 != null);
            if (_tripleNotEquals_5) {
              CharSequence _compilelinkOperate_1 = this.compilelinkOperate(i.getLinkOperation());
              _builder_3.append(_compilelinkOperate_1);
              _builder_3.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder_3.append("completed");
      _builder_3.append(this.con);
      _builder_3.append(" = true;");
      _builder_3.newLineIfNotEmpty();
      string1 = (_string1_1 + _builder_3);
      Timepoint _timePoint_1 = operation.getTimePoint();
      boolean _tripleNotEquals_6 = (_timePoint_1 != null);
      if (_tripleNotEquals_6) {
        String _string1_2 = string1;
        string1 = (_string1_2 + "}");
      }
      String _string1_3 = string1;
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("if(!completed");
      _builder_4.append(this.con);
      _builder_4.append("){");
      _builder_4.newLineIfNotEmpty();
      _builder_4.append("\t");
      String _compileFailResult = this.compileFailResult(operation.getFailresult());
      _builder_4.append(_compileFailResult, "\t");
      _builder_4.newLineIfNotEmpty();
      _builder_4.append("}");
      _builder_4.newLine();
      string1 = (_string1_3 + _builder_4);
      this.con = (this.con + 1);
    }
    FailResult _failresult_1 = operation.getFailresult();
    boolean _tripleEquals = (_failresult_1 == null);
    if (_tripleEquals) {
      String _string1_4 = string1;
      StringConcatenation _builder_5 = new StringConcatenation();
      {
        trueOperation _firstOperation_2 = operation.getFirstOperation();
        boolean _tripleNotEquals_7 = (_firstOperation_2 != null);
        if (_tripleNotEquals_7) {
          String _compileTrueOperate_2 = this.compileTrueOperate(operation.getFirstOperation());
          _builder_5.append(_compileTrueOperate_2);
          _builder_5.newLineIfNotEmpty();
        }
      }
      {
        OperateLink _linkOperation_2 = operation.getLinkOperation();
        boolean _tripleNotEquals_8 = (_linkOperation_2 != null);
        if (_tripleNotEquals_8) {
          CharSequence _compilelinkOperate_2 = this.compilelinkOperate(operation.getLinkOperation());
          _builder_5.append(_compilelinkOperate_2);
          _builder_5.newLineIfNotEmpty();
        }
      }
      {
        EList<AndOrOperationLink> _andor_1 = operation.getAndor();
        for(final AndOrOperationLink i_1 : _andor_1) {
          {
            trueOperation _firstOperation_3 = i_1.getFirstOperation();
            boolean _tripleNotEquals_9 = (_firstOperation_3 != null);
            if (_tripleNotEquals_9) {
              String _compileTrueOperate_3 = this.compileTrueOperate(i_1.getFirstOperation());
              _builder_5.append(_compileTrueOperate_3);
              _builder_5.newLineIfNotEmpty();
            }
          }
          {
            OperateLink _linkOperation_3 = i_1.getLinkOperation();
            boolean _tripleNotEquals_10 = (_linkOperation_3 != null);
            if (_tripleNotEquals_10) {
              CharSequence _compilelinkOperate_3 = this.compilelinkOperate(i_1.getLinkOperation());
              _builder_5.append(_compilelinkOperate_3);
              _builder_5.newLineIfNotEmpty();
            }
          }
        }
      }
      string1 = (_string1_4 + _builder_5);
      Timepoint _timePoint_2 = operation.getTimePoint();
      boolean _tripleNotEquals_11 = (_timePoint_2 != null);
      if (_tripleNotEquals_11) {
        String _string1_5 = string1;
        string1 = (_string1_5 + "}");
      }
    }
    StringConcatenation _builder_6 = new StringConcatenation();
    String string2 = _builder_6.toString();
    EList<ThenOperation> _thenoperation = operation.getThenoperation();
    for (final ThenOperation i_2 : _thenoperation) {
      {
        String _string2 = string2;
        StringConcatenation _builder_7 = new StringConcatenation();
        {
          Timepoint _timePoint_3 = i_2.getTimePoint();
          boolean _tripleNotEquals_12 = (_timePoint_3 != null);
          if (_tripleNotEquals_12) {
            String _compileTimePoint_1 = this.compileTimePoint(i_2.getTimePoint());
            _builder_7.append(_compileTimePoint_1);
            _builder_7.newLineIfNotEmpty();
            _builder_7.append("\t\t\t");
          }
        }
        string2 = (_string2 + _builder_7);
        FailResult _failresult_2 = i_2.getFailresult();
        boolean _tripleNotEquals_13 = (_failresult_2 != null);
        if (_tripleNotEquals_13) {
          String _string2_1 = string2;
          StringConcatenation _builder_8 = new StringConcatenation();
          _builder_8.append("bool completed");
          _builder_8.append(this.con);
          _builder_8.append(" = false;");
          _builder_8.newLineIfNotEmpty();
          {
            trueOperation _followingOperation = i_2.getFollowingOperation();
            boolean _tripleNotEquals_14 = (_followingOperation != null);
            if (_tripleNotEquals_14) {
              String _compileTrueOperate_4 = this.compileTrueOperate(i_2.getFollowingOperation());
              _builder_8.append(_compileTrueOperate_4);
              _builder_8.newLineIfNotEmpty();
            }
          }
          {
            OperateLink _linkOperation_4 = i_2.getLinkOperation();
            boolean _tripleNotEquals_15 = (_linkOperation_4 != null);
            if (_tripleNotEquals_15) {
              CharSequence _compilelinkOperate_4 = this.compilelinkOperate(i_2.getLinkOperation());
              _builder_8.append(_compilelinkOperate_4);
              _builder_8.newLineIfNotEmpty();
            }
          }
          {
            EList<AndOrOperationLink> _andor_2 = i_2.getAndor();
            for(final AndOrOperationLink j : _andor_2) {
              {
                trueOperation _firstOperation_4 = j.getFirstOperation();
                boolean _tripleNotEquals_16 = (_firstOperation_4 != null);
                if (_tripleNotEquals_16) {
                  String _compileTrueOperate_5 = this.compileTrueOperate(j.getFirstOperation());
                  _builder_8.append(_compileTrueOperate_5);
                  _builder_8.newLineIfNotEmpty();
                }
              }
              {
                OperateLink _linkOperation_5 = j.getLinkOperation();
                boolean _tripleNotEquals_17 = (_linkOperation_5 != null);
                if (_tripleNotEquals_17) {
                  CharSequence _compilelinkOperate_5 = this.compilelinkOperate(j.getLinkOperation());
                  _builder_8.append(_compilelinkOperate_5);
                  _builder_8.newLineIfNotEmpty();
                }
              }
            }
          }
          _builder_8.append("completed");
          _builder_8.append(this.con);
          _builder_8.append(" = true;");
          _builder_8.newLineIfNotEmpty();
          string2 = (_string2_1 + _builder_8);
          Timepoint _timePoint_4 = i_2.getTimePoint();
          boolean _tripleNotEquals_18 = (_timePoint_4 != null);
          if (_tripleNotEquals_18) {
            String _string2_2 = string2;
            string2 = (_string2_2 + "}");
          }
          String _string2_3 = string2;
          StringConcatenation _builder_9 = new StringConcatenation();
          _builder_9.append("if(!completed");
          _builder_9.append(this.con);
          _builder_9.append("){");
          _builder_9.newLineIfNotEmpty();
          _builder_9.append("\t");
          String _compileFailResult_1 = this.compileFailResult(i_2.getFailresult());
          _builder_9.append(_compileFailResult_1, "\t");
          _builder_9.newLineIfNotEmpty();
          _builder_9.append("}");
          _builder_9.newLine();
          string2 = (_string2_3 + _builder_9);
          this.con = (this.con + 1);
        }
        FailResult _failresult_3 = i_2.getFailresult();
        boolean _tripleEquals_1 = (_failresult_3 == null);
        if (_tripleEquals_1) {
          String _string2_4 = string2;
          StringConcatenation _builder_10 = new StringConcatenation();
          {
            trueOperation _followingOperation_1 = i_2.getFollowingOperation();
            boolean _tripleNotEquals_19 = (_followingOperation_1 != null);
            if (_tripleNotEquals_19) {
              String _compileTrueOperate_6 = this.compileTrueOperate(i_2.getFollowingOperation());
              _builder_10.append(_compileTrueOperate_6);
              _builder_10.newLineIfNotEmpty();
            }
          }
          {
            OperateLink _linkOperation_6 = i_2.getLinkOperation();
            boolean _tripleNotEquals_20 = (_linkOperation_6 != null);
            if (_tripleNotEquals_20) {
              CharSequence _compilelinkOperate_6 = this.compilelinkOperate(i_2.getLinkOperation());
              _builder_10.append(_compilelinkOperate_6);
              _builder_10.newLineIfNotEmpty();
            }
          }
          {
            EList<AndOrOperationLink> _andor_3 = i_2.getAndor();
            for(final AndOrOperationLink j_1 : _andor_3) {
              {
                trueOperation _firstOperation_5 = j_1.getFirstOperation();
                boolean _tripleNotEquals_21 = (_firstOperation_5 != null);
                if (_tripleNotEquals_21) {
                  String _compileTrueOperate_7 = this.compileTrueOperate(j_1.getFirstOperation());
                  _builder_10.append(_compileTrueOperate_7);
                  _builder_10.newLineIfNotEmpty();
                }
              }
              {
                OperateLink _linkOperation_7 = j_1.getLinkOperation();
                boolean _tripleNotEquals_22 = (_linkOperation_7 != null);
                if (_tripleNotEquals_22) {
                  CharSequence _compilelinkOperate_7 = this.compilelinkOperate(j_1.getLinkOperation());
                  _builder_10.append(_compilelinkOperate_7);
                  _builder_10.newLineIfNotEmpty();
                }
              }
            }
          }
          string2 = (_string2_4 + _builder_10);
        }
        Timepoint _timePoint_5 = i_2.getTimePoint();
        boolean _tripleNotEquals_23 = (_timePoint_5 != null);
        if (_tripleNotEquals_23) {
          String _string2_5 = string2;
          string2 = (_string2_5 + "}");
        }
      }
    }
    String _code = code;
    StringConcatenation _builder_7 = new StringConcatenation();
    _builder_7.append(string1);
    _builder_7.newLineIfNotEmpty();
    _builder_7.append(string2);
    _builder_7.newLineIfNotEmpty();
    code = (_code + _builder_7);
    return code;
  }

  public CharSequence compilelinkOperate(final OperateLink link) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = link.getName();
    _builder.append(_name);
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public String compileFailResult(final FailResult result) {
    StringConcatenation _builder = new StringConcatenation();
    String code = _builder.toString();
    StringConcatenation _builder_1 = new StringConcatenation();
    String string1 = _builder_1.toString();
    String _string1 = string1;
    StringConcatenation _builder_2 = new StringConcatenation();
    {
      Timepoint _timePoint = result.getTimePoint();
      boolean _tripleNotEquals = (_timePoint != null);
      if (_tripleNotEquals) {
        String _compileTimePoint = this.compileTimePoint(result.getTimePoint());
        _builder_2.append(_compileTimePoint);
        _builder_2.newLineIfNotEmpty();
      }
    }
    {
      trueOperation _followingOperation = result.getFollowingOperation();
      boolean _tripleNotEquals_1 = (_followingOperation != null);
      if (_tripleNotEquals_1) {
        String _compileTrueOperate = this.compileTrueOperate(result.getFollowingOperation());
        _builder_2.append(_compileTrueOperate);
        _builder_2.newLineIfNotEmpty();
      }
    }
    {
      OperateLink _linkOperation = result.getLinkOperation();
      boolean _tripleNotEquals_2 = (_linkOperation != null);
      if (_tripleNotEquals_2) {
        CharSequence _compilelinkOperate = this.compilelinkOperate(result.getLinkOperation());
        _builder_2.append(_compilelinkOperate);
        _builder_2.newLineIfNotEmpty();
      }
    }
    {
      EList<AndOrOperationLink> _andor = result.getAndor();
      for(final AndOrOperationLink i : _andor) {
        {
          trueOperation _firstOperation = i.getFirstOperation();
          boolean _tripleNotEquals_3 = (_firstOperation != null);
          if (_tripleNotEquals_3) {
            String _compileTrueOperate_1 = this.compileTrueOperate(i.getFirstOperation());
            _builder_2.append(_compileTrueOperate_1);
            _builder_2.newLineIfNotEmpty();
          }
        }
        {
          OperateLink _linkOperation_1 = i.getLinkOperation();
          boolean _tripleNotEquals_4 = (_linkOperation_1 != null);
          if (_tripleNotEquals_4) {
            CharSequence _compilelinkOperate_1 = this.compilelinkOperate(i.getLinkOperation());
            _builder_2.append(_compilelinkOperate_1);
            _builder_2.newLineIfNotEmpty();
          }
        }
      }
    }
    string1 = (_string1 + _builder_2);
    StringConcatenation _builder_3 = new StringConcatenation();
    String string2 = _builder_3.toString();
    EList<ThenOperation> _thenoperation = result.getThenoperation();
    for (final ThenOperation i_1 : _thenoperation) {
      {
        String _string2 = string2;
        StringConcatenation _builder_4 = new StringConcatenation();
        {
          Timepoint _timePoint_1 = i_1.getTimePoint();
          boolean _tripleNotEquals_5 = (_timePoint_1 != null);
          if (_tripleNotEquals_5) {
            String _compileTimePoint_1 = this.compileTimePoint(i_1.getTimePoint());
            _builder_4.append(_compileTimePoint_1);
            _builder_4.newLineIfNotEmpty();
          }
        }
        string2 = (_string2 + _builder_4);
        FailResult _failresult = i_1.getFailresult();
        boolean _tripleNotEquals_6 = (_failresult != null);
        if (_tripleNotEquals_6) {
          String _string2_1 = string2;
          StringConcatenation _builder_5 = new StringConcatenation();
          _builder_5.append("bool completed");
          _builder_5.append(this.con);
          _builder_5.append(" = false;");
          _builder_5.newLineIfNotEmpty();
          {
            trueOperation _followingOperation_1 = i_1.getFollowingOperation();
            boolean _tripleNotEquals_7 = (_followingOperation_1 != null);
            if (_tripleNotEquals_7) {
              String _compileTrueOperate_2 = this.compileTrueOperate(i_1.getFollowingOperation());
              _builder_5.append(_compileTrueOperate_2);
              _builder_5.newLineIfNotEmpty();
            }
          }
          {
            OperateLink _linkOperation_2 = i_1.getLinkOperation();
            boolean _tripleNotEquals_8 = (_linkOperation_2 != null);
            if (_tripleNotEquals_8) {
              CharSequence _compilelinkOperate_2 = this.compilelinkOperate(i_1.getLinkOperation());
              _builder_5.append(_compilelinkOperate_2);
              _builder_5.newLineIfNotEmpty();
            }
          }
          {
            EList<AndOrOperationLink> _andor_1 = i_1.getAndor();
            for(final AndOrOperationLink j : _andor_1) {
              {
                trueOperation _firstOperation_1 = j.getFirstOperation();
                boolean _tripleNotEquals_9 = (_firstOperation_1 != null);
                if (_tripleNotEquals_9) {
                  String _compileTrueOperate_3 = this.compileTrueOperate(j.getFirstOperation());
                  _builder_5.append(_compileTrueOperate_3);
                  _builder_5.newLineIfNotEmpty();
                }
              }
              {
                OperateLink _linkOperation_3 = j.getLinkOperation();
                boolean _tripleNotEquals_10 = (_linkOperation_3 != null);
                if (_tripleNotEquals_10) {
                  CharSequence _compilelinkOperate_3 = this.compilelinkOperate(j.getLinkOperation());
                  _builder_5.append(_compilelinkOperate_3);
                  _builder_5.newLineIfNotEmpty();
                }
              }
            }
          }
          _builder_5.append("completed");
          _builder_5.append(this.con);
          _builder_5.append(" = true;");
          _builder_5.newLineIfNotEmpty();
          string2 = (_string2_1 + _builder_5);
          Timepoint _timePoint_2 = result.getTimePoint();
          boolean _tripleNotEquals_11 = (_timePoint_2 != null);
          if (_tripleNotEquals_11) {
            String _string2_2 = string2;
            string2 = (_string2_2 + "}");
          }
          String _string2_3 = string2;
          StringConcatenation _builder_6 = new StringConcatenation();
          _builder_6.append("if(!completed");
          _builder_6.append(this.con);
          _builder_6.append("){");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("\t");
          Object _compileFailResult = this.compileFailResult(i_1.getFailresult());
          _builder_6.append(_compileFailResult, "\t");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("}");
          _builder_6.newLine();
          string2 = (_string2_3 + _builder_6);
          this.con = (this.con + 1);
        }
        String _string2_4 = string2;
        StringConcatenation _builder_7 = new StringConcatenation();
        {
          FailResult _failresult_1 = i_1.getFailresult();
          boolean _tripleEquals = (_failresult_1 == null);
          if (_tripleEquals) {
            {
              trueOperation _followingOperation_2 = i_1.getFollowingOperation();
              boolean _tripleNotEquals_12 = (_followingOperation_2 != null);
              if (_tripleNotEquals_12) {
                String _compileTrueOperate_4 = this.compileTrueOperate(i_1.getFollowingOperation());
                _builder_7.append(_compileTrueOperate_4);
                _builder_7.newLineIfNotEmpty();
              }
            }
            {
              OperateLink _linkOperation_4 = i_1.getLinkOperation();
              boolean _tripleNotEquals_13 = (_linkOperation_4 != null);
              if (_tripleNotEquals_13) {
                CharSequence _compilelinkOperate_4 = this.compilelinkOperate(i_1.getLinkOperation());
                _builder_7.append(_compilelinkOperate_4);
                _builder_7.newLineIfNotEmpty();
              }
            }
            {
              EList<AndOrOperationLink> _andor_2 = i_1.getAndor();
              for(final AndOrOperationLink j_1 : _andor_2) {
                {
                  trueOperation _firstOperation_2 = j_1.getFirstOperation();
                  boolean _tripleNotEquals_14 = (_firstOperation_2 != null);
                  if (_tripleNotEquals_14) {
                    String _compileTrueOperate_5 = this.compileTrueOperate(j_1.getFirstOperation());
                    _builder_7.append(_compileTrueOperate_5);
                    _builder_7.newLineIfNotEmpty();
                  }
                }
                {
                  OperateLink _linkOperation_5 = j_1.getLinkOperation();
                  boolean _tripleNotEquals_15 = (_linkOperation_5 != null);
                  if (_tripleNotEquals_15) {
                    CharSequence _compilelinkOperate_5 = this.compilelinkOperate(j_1.getLinkOperation());
                    _builder_7.append(_compilelinkOperate_5);
                    _builder_7.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        string2 = (_string2_4 + _builder_7);
      }
    }
    String _code = code;
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append(string1);
    _builder_4.newLineIfNotEmpty();
    _builder_4.append(string2);
    _builder_4.newLineIfNotEmpty();
    code = (_code + _builder_4);
    return code;
  }

  protected String _compileTimePoint(final WithinPoint timepoint) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _time = timepoint.getTime();
      boolean _equals = Objects.equal(_time, "months");
      if (_equals) {
        _builder.append("uint256 endTime");
        _builder.append(this.time);
        _builder.append("=functionFinishTime[\"");
        String _name = timepoint.getThing().getName();
        _builder.append(_name);
        _builder.append("\"]+60*60*24*30*");
        int _number = timepoint.getNumber();
        _builder.append(_number);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      } else {
        String _time_1 = timepoint.getTime();
        boolean _equals_1 = Objects.equal(_time_1, "days");
        if (_equals_1) {
          _builder.append("uint256 endTime");
          _builder.append(this.time);
          _builder.append("=functionFinishTime[\"");
          String _name_1 = timepoint.getThing().getName();
          _builder.append(_name_1);
          _builder.append("\"]+60*60*24*");
          int _number_1 = timepoint.getNumber();
          _builder.append(_number_1);
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        } else {
          String _time_2 = timepoint.getTime();
          boolean _equals_2 = Objects.equal(_time_2, "hours");
          if (_equals_2) {
            _builder.append("uint256 endTime");
            _builder.append(this.time);
            _builder.append("=functionFinsihTime[\"");
            String _name_2 = timepoint.getThing().getName();
            _builder.append(_name_2);
            _builder.append("\"]+60*60*");
            int _number_2 = timepoint.getNumber();
            _builder.append(_number_2);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("if(!isTime(endTime");
    _builder.append(this.time);
    _builder.append(")){");
    _builder.newLineIfNotEmpty();
    String string = _builder.toString();
    this.time = (this.time + 1);
    return string;
  }

  protected String _compileTimePoint(final BeforePoint timepoint) {
    ThisDate _lineTime = timepoint.getLineTime();
    boolean _tripleNotEquals = (_lineTime != null);
    if (_tripleNotEquals) {
      Object _compilevalue = this.compilevalue(timepoint.getLineTime());
      String _plus = ("if(!isTime(datetime.toTimestamp(" + _compilevalue);
      return (_plus + "))){");
    } else {
      keyvalue _value = timepoint.getValue();
      boolean _tripleNotEquals_1 = (_value != null);
      if (_tripleNotEquals_1) {
        String _name = timepoint.getValue().getName();
        String _plus_1 = ("if(!isTime(" + _name);
        return (_plus_1 + ")){");
      }
    }
    return null;
  }

  protected String _compileTimePoint2(final WithinPoint timepoint) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _time = timepoint.getTime();
      boolean _equals = Objects.equal(_time, "months");
      if (_equals) {
        _builder.append("!isTime(functionFinishTime[\"");
        String _name = timepoint.getThing().getName();
        _builder.append(_name);
        _builder.append("\"]+60*60*24*30*");
        int _number = timepoint.getNumber();
        _builder.append(_number);
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      } else {
        String _time_1 = timepoint.getTime();
        boolean _equals_1 = Objects.equal(_time_1, "days");
        if (_equals_1) {
          _builder.append("!isTime(functionFinishTime[\"");
          String _name_1 = timepoint.getThing().getName();
          _builder.append(_name_1);
          _builder.append("\"]+60*60*24*");
          int _number_1 = timepoint.getNumber();
          _builder.append(_number_1);
          _builder.append(")");
          _builder.newLineIfNotEmpty();
        } else {
          String _time_2 = timepoint.getTime();
          boolean _equals_2 = Objects.equal(_time_2, "hours");
          if (_equals_2) {
            _builder.append("!isTime(functionFinsihTime[\"");
            String _name_2 = timepoint.getThing().getName();
            _builder.append(_name_2);
            _builder.append("\"]+60*60*");
            int _number_2 = timepoint.getNumber();
            _builder.append(_number_2);
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    String string = _builder.toString();
    return string;
  }

  protected String _compileTimePoint2(final BeforePoint timepoint) {
    ThisDate _lineTime = timepoint.getLineTime();
    boolean _tripleNotEquals = (_lineTime != null);
    if (_tripleNotEquals) {
      Object _compilevalue = this.compilevalue(timepoint.getLineTime());
      String _plus = ("!isTime(datetime.toTimestamp(" + _compilevalue);
      return (_plus + "))");
    } else {
      keyvalue _value = timepoint.getValue();
      boolean _tripleNotEquals_1 = (_value != null);
      if (_tripleNotEquals_1) {
        String _name = timepoint.getValue().getName();
        String _plus_1 = ("!isTime(" + _name);
        return (_plus_1 + ")");
      }
    }
    return null;
  }

  public boolean isLeapYear(final int year) {
    if (((year % 4) != 0)) {
      return false;
    }
    if (((year % 100) != 0)) {
      return true;
    }
    if (((year % 400) != 0)) {
      return false;
    }
    return true;
  }

  public int getDaysInMonth(final int month, final int year) {
    switch (month) {
      case 1:
        return 31;
      case 3:
        return 31;
      case 5:
        return 31;
      case 7:
        return 31;
      case 8:
        return 31;
      case 10:
        return 31;
      case 12:
        return 31;
      case 4:
        return 30;
      case 6:
        return 30;
      case 9:
        return 30;
      case 11:
        return 30;
      default:
        int _xifexpression = (int) 0;
        boolean _isLeapYear = this.isLeapYear(year);
        if (_isLeapYear) {
          _xifexpression = 29;
        } else {
          _xifexpression = 28;
        }
        return _xifexpression;
    }
  }

  public long toTimestamp(final int year, final int month, final int day, final int hour, final int min) {
    if ((!(year >= 1970))) {
      InputOutput.<String>println("Year must be 1970 or later");
    }
    if ((!((month >= 1) && (month <= 12)))) {
      InputOutput.<String>println("Invalid month");
    }
    boolean _not = (!((day >= 1) && (day <= this.getDaysInMonth(month, year))));
    if (_not) {
      InputOutput.<String>println("Invalid day");
    }
    if ((!((hour >= 0) && (hour <= 23)))) {
      InputOutput.<String>println("Invalid hour");
    }
    int total = 0;
    for (int i = 1970; (i < year); i++) {
      int _tal = total;
      int _xifexpression = (int) 0;
      boolean _isLeapYear = this.isLeapYear(i);
      if (_isLeapYear) {
        _xifexpression = 366;
      } else {
        _xifexpression = 365;
      }
      total = (_tal + _xifexpression);
    }
    for (int i = 1; (i < month); i++) {
      int _tal = total;
      int _daysInMonth = this.getDaysInMonth(i, year);
      total = (_tal + _daysInMonth);
    }
    int _tal = total;
    total = (_tal + (day - 1));
    final int timestamp = (((((total * 60) * 60) * 24) + ((hour * 60) * 60)) + (min * 60));
    return timestamp;
  }

  public CharSequence compileManyRuleExpressionGo(final ManyRuleExpression expression) {
    if (expression instanceof AdditionExpression) {
      return _compileManyRuleExpressionGo((AdditionExpression)expression);
    } else if (expression instanceof ExclusiveExpression) {
      return _compileManyRuleExpressionGo((ExclusiveExpression)expression);
    } else if (expression instanceof ParallelExpression) {
      return _compileManyRuleExpressionGo((ParallelExpression)expression);
    } else if (expression instanceof RegularRuleExpression) {
      return _compileManyRuleExpressionGo((RegularRuleExpression)expression);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(expression).toString());
    }
  }

  public CharSequence compileManyRuleGo(final ManyRuleExpression expression) {
    if (expression instanceof AdditionExpression) {
      return _compileManyRuleGo((AdditionExpression)expression);
    } else if (expression instanceof ExclusiveExpression) {
      return _compileManyRuleGo((ExclusiveExpression)expression);
    } else if (expression instanceof ParallelExpression) {
      return _compileManyRuleGo((ParallelExpression)expression);
    } else if (expression instanceof RegularRuleExpression) {
      return _compileManyRuleGo((RegularRuleExpression)expression);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(expression).toString());
    }
  }

  public CharSequence compileManyRule(final ManyRuleExpression expression) {
    if (expression instanceof AdditionExpression) {
      return _compileManyRule((AdditionExpression)expression);
    } else if (expression instanceof ExclusiveExpression) {
      return _compileManyRule((ExclusiveExpression)expression);
    } else if (expression instanceof ParallelExpression) {
      return _compileManyRule((ParallelExpression)expression);
    } else if (expression instanceof RegularRuleExpression) {
      return _compileManyRule((RegularRuleExpression)expression);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(expression).toString());
    }
  }

  public Object compilevalue(final Value value) {
    if (value instanceof AllNumber) {
      return _compilevalue((AllNumber)value);
    } else if (value instanceof Now) {
      return _compilevalue((Now)value);
    } else if (value instanceof ThisBoolean) {
      return _compilevalue((ThisBoolean)value);
    } else if (value instanceof ThisDate) {
      return _compilevalue((ThisDate)value);
    } else if (value instanceof ThisDecimal) {
      return _compilevalue((ThisDecimal)value);
    } else if (value instanceof Address) {
      return _compilevalue((Address)value);
    } else if (value instanceof Duration) {
      return _compilevalue((Duration)value);
    } else if (value instanceof Right) {
      return _compilevalue((Right)value);
    } else if (value instanceof ThisString) {
      return _compilevalue((ThisString)value);
    } else if (value instanceof url) {
      return _compilevalue((url)value);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(value).toString());
    }
  }

  public Object compileTrueCondition(final TrueCondition condition) {
    if (condition instanceof CompareString) {
      return _compileTrueCondition((CompareString)condition);
    } else if (condition instanceof TimeSub) {
      return _compileTrueCondition((TimeSub)condition);
    } else if (condition instanceof Timepoint) {
      return _compileTrueCondition((Timepoint)condition);
    } else if (condition instanceof checkExpression) {
      return _compileTrueCondition((checkExpression)condition);
    } else if (condition instanceof isDone) {
      return _compileTrueCondition((isDone)condition);
    } else if (condition instanceof isTime) {
      return _compileTrueCondition((isTime)condition);
    } else if (condition instanceof isTrue) {
      return _compileTrueCondition((isTrue)condition);
    } else if (condition instanceof logic) {
      return _compileTrueCondition((logic)condition);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(condition).toString());
    }
  }

  public Object compileSingleExpression(final SingleExpression expression) {
    if (expression instanceof FloatExpression) {
      return _compileSingleExpression((FloatExpression)expression);
    } else if (expression instanceof GetPeriodExpression) {
      return _compileSingleExpression((GetPeriodExpression)expression);
    } else if (expression instanceof OtherExpression) {
      return _compileSingleExpression((OtherExpression)expression);
    } else if (expression instanceof PeriodExpression) {
      return _compileSingleExpression((PeriodExpression)expression);
    } else if (expression instanceof PersonExpression) {
      return _compileSingleExpression((PersonExpression)expression);
    } else if (expression instanceof RegularExpression) {
      return _compileSingleExpression((RegularExpression)expression);
    } else if (expression instanceof RuleTimeExpression) {
      return _compileSingleExpression((RuleTimeExpression)expression);
    } else if (expression instanceof StringExpression) {
      return _compileSingleExpression((StringExpression)expression);
    } else if (expression instanceof ThingExpression) {
      return _compileSingleExpression((ThingExpression)expression);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(expression).toString());
    }
  }

  public String compileThingExpression(final ThingExpression expression) {
    if (expression instanceof ObjectExpress) {
      return _compileThingExpression((ObjectExpress)expression);
    } else if (expression instanceof SubjectExpress) {
      return _compileThingExpression((SubjectExpress)expression);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(expression).toString());
    }
  }

  public Object compileRegular(final EObject value) {
    if (value instanceof AllNumber) {
      return _compileRegular((AllNumber)value);
    } else if (value instanceof Now) {
      return _compileRegular((Now)value);
    } else if (value instanceof ThisBoolean) {
      return _compileRegular((ThisBoolean)value);
    } else if (value instanceof ThisDate) {
      return _compileRegular((ThisDate)value);
    } else if (value instanceof ThisDecimal) {
      return _compileRegular((ThisDecimal)value);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(value).toString());
    }
  }

  public String compileTrueOperate(final trueOperation operation) {
    if (operation instanceof changeExpression) {
      return _compileTrueOperate((changeExpression)operation);
    } else if (operation instanceof transferExpression) {
      return _compileTrueOperate((transferExpression)operation);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(operation).toString());
    }
  }

  public String compileChangeExpression(final changeExpression expression) {
    if (expression instanceof changeAddress) {
      return _compileChangeExpression((changeAddress)expression);
    } else if (expression instanceof changeContract) {
      return _compileChangeExpression((changeContract)expression);
    } else if (expression instanceof changeOther) {
      return _compileChangeExpression((changeOther)expression);
    } else if (expression instanceof changeRule) {
      return _compileChangeExpression((changeRule)expression);
    } else if (expression instanceof changeString) {
      return _compileChangeExpression((changeString)expression);
    } else if (expression instanceof otherchange) {
      return _compileChangeExpression((otherchange)expression);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(expression).toString());
    }
  }

  public CharSequence compileTrueOperateThing(final trueOperation operation) {
    if (operation instanceof changeExpression) {
      return _compileTrueOperateThing((changeExpression)operation);
    } else if (operation instanceof transferExpression) {
      return _compileTrueOperateThing((transferExpression)operation);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(operation).toString());
    }
  }

  public CharSequence compileManyRuleExpression(final ManyRuleExpression expression) {
    if (expression instanceof AdditionExpression) {
      return _compileManyRuleExpression((AdditionExpression)expression);
    } else if (expression instanceof ExclusiveExpression) {
      return _compileManyRuleExpression((ExclusiveExpression)expression);
    } else if (expression instanceof ParallelExpression) {
      return _compileManyRuleExpression((ParallelExpression)expression);
    } else if (expression instanceof RegularRuleExpression) {
      return _compileManyRuleExpression((RegularRuleExpression)expression);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(expression).toString());
    }
  }

  public String compileTimePoint(final Timepoint timepoint) {
    if (timepoint instanceof BeforePoint) {
      return _compileTimePoint((BeforePoint)timepoint);
    } else if (timepoint instanceof WithinPoint) {
      return _compileTimePoint((WithinPoint)timepoint);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(timepoint).toString());
    }
  }

  public String compileTimePoint2(final Timepoint timepoint) {
    if (timepoint instanceof BeforePoint) {
      return _compileTimePoint2((BeforePoint)timepoint);
    } else if (timepoint instanceof WithinPoint) {
      return _compileTimePoint2((WithinPoint)timepoint);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(timepoint).toString());
    }
  }
}
