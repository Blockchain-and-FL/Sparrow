/*
 * generated by Xtext 2.28.0
 */
package org.xtext.example.mydsl.generator

import java.time.LocalDateTime
import java.time.temporal.ChronoUnit
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.sparrow.AdditionExpression
import org.xtext.example.mydsl.sparrow.Address
import org.xtext.example.mydsl.sparrow.AllNumber
import org.xtext.example.mydsl.sparrow.BeforePoint
import org.xtext.example.mydsl.sparrow.CompareString
import org.xtext.example.mydsl.sparrow.Condition
import org.xtext.example.mydsl.sparrow.ContractMessage
import org.xtext.example.mydsl.sparrow.Duration
import org.xtext.example.mydsl.sparrow.ExclusiveExpression
import org.xtext.example.mydsl.sparrow.FailResult
import org.xtext.example.mydsl.sparrow.FloatExpression
import org.xtext.example.mydsl.sparrow.GetPeriodExpression
import org.xtext.example.mydsl.sparrow.Group
import org.xtext.example.mydsl.sparrow.Initialize
import org.xtext.example.mydsl.sparrow.MixExpression
import org.xtext.example.mydsl.sparrow.Model
import org.xtext.example.mydsl.sparrow.Now
import org.xtext.example.mydsl.sparrow.Object
import org.xtext.example.mydsl.sparrow.ObjectExpress
import org.xtext.example.mydsl.sparrow.ObjectExpression
import org.xtext.example.mydsl.sparrow.OperateLink
import org.xtext.example.mydsl.sparrow.Operation
import org.xtext.example.mydsl.sparrow.OtherExpression
import org.xtext.example.mydsl.sparrow.OtherMixExpression
import org.xtext.example.mydsl.sparrow.ParallelExpression
import org.xtext.example.mydsl.sparrow.PeriodExpression
import org.xtext.example.mydsl.sparrow.PersonExpression
import org.xtext.example.mydsl.sparrow.RegularExpression
import org.xtext.example.mydsl.sparrow.RegularRuleExpression
import org.xtext.example.mydsl.sparrow.Require
import org.xtext.example.mydsl.sparrow.Right
import org.xtext.example.mydsl.sparrow.RuleExpression
import org.xtext.example.mydsl.sparrow.RuleStructure
import org.xtext.example.mydsl.sparrow.RuleTimeExpression
import org.xtext.example.mydsl.sparrow.StringExpression
import org.xtext.example.mydsl.sparrow.Subject
import org.xtext.example.mydsl.sparrow.SubjectExpress
import org.xtext.example.mydsl.sparrow.SubjectExpression
import org.xtext.example.mydsl.sparrow.ThingExpression
import org.xtext.example.mydsl.sparrow.ThisBoolean
import org.xtext.example.mydsl.sparrow.ThisDate
import org.xtext.example.mydsl.sparrow.ThisDecimal
import org.xtext.example.mydsl.sparrow.ThisString
import org.xtext.example.mydsl.sparrow.TimeSub
import org.xtext.example.mydsl.sparrow.Timepoint
import org.xtext.example.mydsl.sparrow.TotalCondition
import org.xtext.example.mydsl.sparrow.TotalOperation
import org.xtext.example.mydsl.sparrow.Value
import org.xtext.example.mydsl.sparrow.WithinPoint
import org.xtext.example.mydsl.sparrow.changeContract
import org.xtext.example.mydsl.sparrow.changeExpression
import org.xtext.example.mydsl.sparrow.changeOther
import org.xtext.example.mydsl.sparrow.changeAddress
import org.xtext.example.mydsl.sparrow.changeRule
import org.xtext.example.mydsl.sparrow.changeString
import org.xtext.example.mydsl.sparrow.checkExpression
import org.xtext.example.mydsl.sparrow.everyMessage
import org.xtext.example.mydsl.sparrow.isDone
import org.xtext.example.mydsl.sparrow.isTime
import org.xtext.example.mydsl.sparrow.isTrue
import org.xtext.example.mydsl.sparrow.logic
import org.xtext.example.mydsl.sparrow.messageExpression
import org.xtext.example.mydsl.sparrow.otherchange
import org.xtext.example.mydsl.sparrow.transferExpression
import org.xtext.example.mydsl.sparrow.url
import org.xtext.example.mydsl.sparrow.initExpressions
import org.xtext.example.mydsl.sparrow.initExpressiono
import org.eclipse.emf.ecore.EObject
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SparrowGenerator extends AbstractGenerator {
	
	//时间限制
	var int time = 1
	//条件完成数
	var int con = 1
	//排他网关数量
	var int exclu = 1
	override void doGenerate(Resource res, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : res.allContents.toIterable.filter(Model)){
		
		val astNodeCount = countASTNodes(e)
			println(e.name + " AST Node Count: " + astNodeCount)	//new added for calculating ast of sparrow
		
		val currentDateTime1 = LocalDateTime.now()
		
		fsa.generateFile(
		"sparrow2solidity/" + e.name + ".sol",
		e.compileSolidity)
		
		fsa.generateFile(
		"sparrow2go/" + e.name + ".go",
		e.compileGo)
		
		val currentDateTime2 = LocalDateTime.now()
		val duration = ChronoUnit.MILLIS.between(currentDateTime1, currentDateTime2)
		println(e.name + ": " + duration)
					
		}
	}
	
//	def compileGo(Model model)'''
//	this is a go file.
//	'''
	
	def Integer countASTNodes(EObject element) {
	    if (element === null) return 0
	    var Integer count = 1 // 显式声明为 Integer
	    for (child : element.eContents) {
	        count = count + countASTNodes(child) // 避免 += 可能的类型推断错误
	    }
	    return count
	}
	
	
	
	def compileGo(Model model)'''
	package main
	import (
		"encoding/json"
		"fmt"
		"log"
		"strings"
		"time"
		«FOR name : model.packageName»
		import "«name»";
		«ENDFOR»
	
		"github.com/hyperledger/fabric-contract-api-go/contractapi"
	)
	type «model.name» struct {
		contractapi.Contract
		functionStatus map[string]bool
		functionFinishTime map[string]int
		contractState string
	}
«««	go里面没有继承
	«FOR subject:model.subjects»
		«subject.compileSubjectGo»
	«ENDFOR»
	
	«FOR object:model.objects»
		«object.compileObjectGo»
	«ENDFOR»
	
	«IF model.contractMessage !== null»
		«model.contractMessage.compileMessageGo»
	«ENDIF»
	func (s *SmartContract) Init(ctx contractapi.TransactionContextInterface) error {
«««	初始化所有信息
	«IF model.initialize !== null»
		«model.initialize.compileInitGo»
	«ENDIF»
	
	«FOR group : model.group»
		«group.compileGroupGo»
	«ENDFOR»
	
	«IF model.contractMessage !== null»
		«model.contractMessage.compileMessageGo2»
	«ENDIF»
	}
	
	«IF model.operations !== null»
		«model.operations.compileOperationGo»
	«ENDIF»
	«IF model.conditions !== null»
		«model.conditions.compileConditionGo»
	«ENDIF»
	«IF model.ruleStructures!==null»
		«model.ruleStructures.compileRuleGo»
	«ENDIF»
	
	«IF model.require !== null »
		«model.require.compileRequireGo»
	«ENDIF»
	
	// changeRule 方法用于更新 functionStatus 和 functionFinishTime 的值
	func changeRule(expressionName string) {
		// 更新 functionStatus
		functionStatus[expressionName] = true
		// 更新 functionFinishTime
		functionFinishTime[expressionName] = time.Now().UTC()
	}
	
	func onlyState(State string) bool {
		if compareStrings(State, "start") || compareStrings(State, "restart") 
			return true
		else return false
	}
	
	func onlySomeone(s Person) {
		//如何限制角色对功能的调用？
		//好像也是要链接外部？
	}
	
	func main() {
		// 初始化Contract结构体的map变量
		contract := &SimpleContract{
			functionStatus: make(map[string]bool),
			functionFinishTime: make(map[string]int), 
			ContractState: "start",
		}
	
		// 启动Fabric链码服务
		cc, err := contractapi.NewChaincode(contract)
		if err != nil {
			fmt.Printf("Error starting SimpleContract chaincode: %v\n", err)
			return
		}
	
		if err := cc.Start(); err != nil {
			fmt.Printf("Error starting SimpleContract chaincode: %v\n", err)
		}
		
	«FOR i : model.ruleStructures.manyRuleExpression»
		«i.compileManyRuleGo»
	«ENDFOR»
	}
	'''
		
	def compileGroupGo(Group group){
		var string1=''
		var boolean first=true
		for(i:group.value){
			if(!first){
			string1+=','+i.name
			}
			else {
				string1+=i.name
				first=false
			}
			}
		string1=group.name+':= []'+group.subtype.name+'{'+string1+'}'
		return string1
	}
			
	def compileSubjectGo(Subject subject)'''
	type «subject.name» struct {
	  MSPID  string `json:"MSPID"`
	  Name   string `json:"name"`
	«IF subject.type == "CA"»
	Key  int `json:"key"`
	Year   int `json:"year"`
	«ENDIF»
	«IF subject.subjectExpression !== null»
		«subject.subjectExpression.compileSubjectExpressionGo»
	«ENDIF»
	}
	'''
	
	def compileSubjectExpressionGo(SubjectExpression SuE)'''
	«FOR key :  SuE.keyValue»
		«IF key.type == "fixed"»
		«key.name.toFirstUpper»	float `json:"«key.name»"`
		«ELSEIF key.type == "date"»
		«key.name.toFirstUpper»	string `json:"«key.name»"`
		«ELSE»
		«key.name.toFirstUpper» «key.type» `json:"«key.name»"`
		«ENDIF»
	«ENDFOR»
	'''
	
	def compileObjectGo(Object object)'''
	type «object.name» struct {
	«IF object.objectExpression !== null»
		«object.objectExpression.compileObjectExpressionGo»
	«ENDIF»
	}
	'''
	
	def compileObjectExpressionGo(ObjectExpression ObE)'''
	«FOR key :  ObE.keyValue»
		«IF key.type == "fixed"»
		«key.name.toFirstUpper»	float `json:"«key.name»"`
		«ELSEIF key.type == "date"»
		«key.name.toFirstUpper»	string `json:"«key.name»"`
		«ELSE»
		«key.name.toFirstUpper» «key.type» `json:"«key.name»"`
		«ENDIF»
	«ENDFOR»
	'''
	
	def compileMessageGo(ContractMessage message)'''
	type ContractMessage struct{
		Status string `json:"status"`
		«FOR key :  message.message»
			«IF key.type.type == "fixed"»
				«key.type.name.toFirstUpper» float `json:"«key.type.name»"`
			«ELSEIF key.type == "date"»
				«key.type.name.toFirstUpper» string `json:"«key.type.name»"`
			«ELSE»
				«key.type.name.toFirstUpper» «key.type.type» `json:"«key.type.name»"`
			«ENDIF»
		«ENDFOR»
	}
	'''
	
	def compileMessageGo2(ContractMessage message)'''
	contractMessage := ContractMessage{
		Status: "start",
		«FOR key :  message.message»
			«key.type.name.toFirstUpper»: «key.value.compilevalue» ,
		«ENDFOR» 
	}
	'''
	
	def compileInitGo(Initialize init)'''
	«««初始化主体
			«FOR sinit:init.inits»
				«sinit.name» := «sinit.subtype.name»{«sinit.compileSinitGo»}
				«sinit.name»JSON, _ := json.Marshal(«sinit.name»)
				err := ctx.GetStub().PutState("«sinit.name»", «sinit.name»JSON)
				if err != nil {
					return fmt.Errorf("failed to put «sinit.name» to world state. %v", err)
				}
			«ENDFOR»
	«««初始化客体
			«FOR oinit:init.inito»
				«oinit.name» := «oinit.obtype.name»{«oinit.compileOinitGo»}
				«oinit.name»JSON, _ := json.Marshal(«oinit.name»)
				err := ctx.GetStub().PutState("«oinit.name»", «oinit.name»JSON)
				if err != nil {
					return fmt.Errorf("failed to put «oinit.name» to world state. %v", err)
				}
			«ENDFOR»
	'''
	
	def compileOinitGo(initExpressiono expressiono){
		val length=expressiono.value.size
		var valueString=''
		for(var i=0; i<length;i++){
			valueString+=expressiono.obtype.objectExpression.keyValue.get(i).name.toFirstUpper
			+':'+expressiono.value.get(i).compilevalue+','
		}
		return valueString
	}
	
	def compileSinitGo(initExpressions expressions){
		val length=expressions.value.size
		var valueString=''
		if(expressions.subtype.type=='CA'){
			for(var i=0; i<length;i++){
				if(i==0){
					valueString+='Name:'+expressions.value.get(i).compilevalue+','
				}
				if(i==1){
					valueString+='MSPID:'+expressions.value.get(i).compilevalue+','
				}
				if(i==2){
					valueString+='Year:'+expressions.value.get(i).compilevalue+','
				}
				if(i==3){
					valueString+='Key:'+expressions.value.get(i).compilevalue+','
				}
				else{
					if(length>4)
					valueString+=expressions.subtype.subjectExpression.keyValue.get(i-4).name.toFirstUpper
					+':'+expressions.value.get(i).compilevalue+','
				}
			}
		}
		else{
			for(var i=0; i<length;i++){
				if(i==0){
					valueString+='Name:'+expressions.value.get(i).compilevalue+','
				}
				if(i==1){
					valueString+='MSPID:'+expressions.value.get(i).compilevalue+','
				}
				else{
//					println(expressions.name+expressions.subtype.name+'length'+length)
					if(length>2)
					valueString+=expressions.subtype.subjectExpression.keyValue.get(i-2).name.toFirstUpper
					+':'+expressions.value.get(i).compilevalue+','
				}
			}
		}
		return valueString
	}
	
	def compileConditionGo(Condition condition){
		var myString = ''''''
	    for (everycondition : condition.conditions) {
	        var string1 = 'func (s *SmartContract) ' + everycondition.name + '(ctx contractapi.TransactionContextInterface) bool {'
	        var string2=''
	        if(everycondition.conditionExpression!==null)
	        	if(everycondition.conditionExpression.no!==null)
	        		string2 ='if (' +'!'+everycondition.conditionExpression.condition.compileTrueCondition
	        	else
	        		string2 ='if (' + everycondition.conditionExpression.condition.compileTrueCondition
	        else if(everycondition.linkCondition!==null)
	        	if(everycondition.linkCondition.no!==null)
	        		string2 ='if (' +'!'+everycondition.linkCondition.linkCondition.name+'(ctx)'
	        	else
	        		string2 ='if (' + everycondition.linkCondition.linkCondition.name+'(ctx)'
	        for (everylink : everycondition.andOrLink) {
	            if (everylink.link == 'and') {
	            	if(everylink.condition!==null){
		            	if(everylink.condition.no!==null)
		                string2 += '&&' +" !"+everylink.condition.condition.compileTrueCondition
		                else
		                string2 += '&&' +everylink.condition.condition.compileTrueCondition
	                }
	                if(everylink.linkCondition!==null){
		            	if(everylink.linkCondition.no!==null)
		                string2 += '&&' +" !"+everylink.linkCondition.linkCondition.name+'(ctx)'
		                else
		                string2 += '&&' +everylink.linkCondition.linkCondition.name+'(ctx)'
	                }
	            } else if (everylink.link == 'or') {
	            	if(everylink.condition.no!==null)
		                string2 += '||' +" !"+everylink.condition.condition.compileTrueCondition
		                else
		                string2 += '||' +everylink.condition.condition.compileTrueCondition
	                }
	                if(everylink.linkCondition!==null){
		            	if(everylink.linkCondition.no!==null)
		                string2 += '||' +" !"+everylink.linkCondition.linkCondition.name+'(ctx)'
		                else
		                string2 += '||' +everylink.linkCondition.linkCondition.name+'(ctx)'
	            }
	        }
	        string2 += ')'
	        myString +='''
	    «string1»
	    	«string2» return true;
	    	else return false;
	    }
	    '''
	    }
	    return myString
	}
	
	
	def compileOperationGo(Operation operation){
		var myString = ''''''
		for (everyoperation : operation.operates) {
			var string1 = 'func ' + everyoperation.name + '() {'
			var string2 = ''
			if(everyoperation.firstOperation!==null)
				string2=everyoperation.firstOperation.compileTrueOperate
			else if(everyoperation.linkOperation!==null)
				string2=everyoperation.linkOperation.name+'();'
			var string3=''''''
			for (everylink : everyoperation.andOrLink) {
				if(everylink.firstOperation!==null)
					string3+=everylink.firstOperation.compileTrueOperate
				else if(everylink.linkOperation!==null)
					string3+=everylink.linkOperation.name+'();'
			 }
			 myString+='''
			 «string1»
			 	«string2»
			 	«string3»
			 }
			 '''
		}
		 return myString
	}
	
	def compileRuleGo(RuleStructure structure)'''
		«FOR i : structure.manyRuleExpression»
			«i.compileManyRuleExpressionGo»
		«ENDFOR»
	'''
	
	def dispatch compileManyRuleExpressionGo(ParallelExpression expression)'''
		«FOR i : expression.ruleExpression»
			«i.compileRuleExpressionGo»
		«ENDFOR»
	'''
	
	def compileRuleExpressionGo(RuleExpression expression){
		var String code=''''''
		var string1=''
		var string1_1=''
		var link=''
		var setDateString1=''
		var setDateString2=''
		if(expression.setdate!==null){
			setDateString1='_year uint16, _months uint8, _days uint8, _hours uint8, _minutes uint8'
			setDateString2=expression.setdate.message+'=convertToTimestamp(_year,_months,_days,_hours,_minutes);'
		}
		if(expression.setdate!==null&&expression.set!==null){
			link=','
		}
		if(expression.repeat===null){
		if( expression.set===null){
			string1="func "+expression.name+"("+setDateString1+") {"
			if(expression.totalOperation.person!==null)
				string1_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else if(expression.totalOperation.person2!==null)
				string1_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else
				string1_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"		
		}
		if(expression.set!==null){
			string1="func "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") {"
			if(expression.totalOperation.person!==null)
				string1_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else if(expression.totalOperation.person2!==null)
				string1_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else
				string1_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
		}
		}
		if(expression.repeat!==null){
		if( expression.set===null){
			string1="func "+expression.name+"("+setDateString1+") {"
			if(expression.totalOperation.person!==null)
				string1_1="if onlyState(ContractState){"
			else if(expression.totalOperation.person2!==null)
				string1_1="if onlyState(ContractState){"
			else
				string1_1="if onlyState(ContractState){"		
		}
		if(expression.set!==null){
			string1="func "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") {"
			if(expression.totalOperation.person!==null)
				string1_1="if onlyState(ContractState){"
			else if(expression.totalOperation.person2!==null)
				string1_1="if onlyState(ContractState){"
			else
				string1_1="if onlyState(ContractState){"
		}
		}	
		var string2=''''''
		if(expression.set!==null)
			string2+=expression.set.compileMessageOperateThing
		var string3=''
		if(expression.totalCondition!==null)
			string3=string3+'if('+expression.totalCondition.compileTotalCondition+'){'
		var string4=''''''	
		string4+=expression.totalOperation.compileTotalOperation
		
		var string5=''''''
		if(expression.subExpression!==null){
			for(i: expression.subExpression){
				var string6=''
				var string7=''''''
				var string8=''
				var string9=''
				if(i.totalExpression.totalCondition!==null)
					string6+='if('+i.totalExpression.totalCondition.compileTotalCondition+'){'
				string7+=i.totalExpression.totalOperation.compileTotalOperation
				if(i.totalExpression.elseExpression!==null)
					string8='''else{ 
						«i.totalExpression.elseExpression.totalOperation.compileTotalOperation»
						}'''
				if(i.totalExpression.totalCondition!==null)
					string9="}"
				string5+='''
				 	«string6»
				 		«string7»
				 	«string8»
				 	«string9»
				'''
				}
			}
		
		var string6="changeRule(\""+expression.name+"\");"
		var string7=''''''
		if(expression.totalCondition!==null)
			string7="}"	
		
		code+='''
		«string1»
			«string1_1»
			«setDateString2»
			«string2»
			«string3»
				«string4»
				«string5»
				«string6»
			«string7»
		}
		}
		'''
		
		if(expression.elseExpression===null){
			return code
		}
	
		if(expression.elseExpression!==null){
			var string8=''''''
			var string9=''
			var string9_1=''
		if(expression.elseExpression.set===null){
			string9="func else"+expression.name+"(){"
			if(expression.elseExpression.totalOperation.person!==null)
				string9_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else if(expression.totalOperation.person2!==null)
				string9_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else
				string9_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
		}
		if(expression.elseExpression.set!==null){
			string9="func else"+expression.name+"("+expression.elseExpression.set.compileMessageOperate+"){"
			if(expression.elseExpression.totalOperation.person!==null)
				string9_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else if(expression.totalOperation.person2!==null)
				string9_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else
				string9_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
		}
		var onlyOne='''bool one=true;
		if(one){
		'''
		var string10=''
		var string11=''
		var string12=''''''
		var string13=''
		if(expression.totalCondition!==null)
			string10+='if(!('+expression.totalCondition.compileTotalCondition+')){'
		string11+=expression.elseExpression.totalOperation.compileTotalOperation
		if(expression.totalCondition!==null)
			string13="}"
		if(expression.totalCondition!==null)
			string12="}"
		string8='''
			«string9»
				«string9_1»
				«onlyOne»
				«string10»
					«string11»
				«string13»
			«string12»
		'''
		code+='''
			«string8»
			one=false;
			}
		'''
		return code
		}
	}
		
	def dispatch compileManyRuleExpressionGo(ExclusiveExpression expression)'''
		«FOR i : expression.ruleExpression»
			«i.compileExclusiveRuleExpressionGo»
		«ENDFOR»
	'''
	
	def compileExclusiveRuleExpressionGo(RuleExpression expression){
		var String code=''''''
		var string1=''
		var string1_1=''
		var link=''
		var setDateString1=''
		var setDateString2=''
		if(expression.setdate!==null){
			setDateString1='_year uint16, _months uint8, _days uint8, _hours uint8, _minutes uint8'
			setDateString2=expression.setdate.message+'=convertToTimestamp(_year,_months,_days,_hours,_minutes);'
		}
		if(expression.setdate!==null&&expression.set!==null){
			link=','
		}
		if(expression.repeat===null){
		if( expression.set===null){
			string1="func "+expression.name+"("+setDateString1+") {"
			if(expression.totalOperation.person!==null)
				string1_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else if(expression.totalOperation.person2!==null)
				string1_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else
				string1_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"		
		}
		if(expression.set!==null){
			string1="func "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") {"
			if(expression.totalOperation.person!==null)
				string1_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else if(expression.totalOperation.person2!==null)
				string1_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else
				string1_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
		}
		}
		if(expression.repeat!==null){
		if( expression.set===null){
			string1="func "+expression.name+"("+setDateString1+") {"
			if(expression.totalOperation.person!==null)
				string1_1="if onlyState(ContractState){"
			else if(expression.totalOperation.person2!==null)
				string1_1="if onlyState(ContractState){"
			else
				string1_1="if onlyState(ContractState){"		
		}
		if(expression.set!==null){
			string1="func "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") {"
			if(expression.totalOperation.person!==null)
				string1_1="if onlyState(ContractState){"
			else if(expression.totalOperation.person2!==null)
				string1_1="if onlyState(ContractState){"
			else
				string1_1="if onlyState(ContractState){"
		}
		}	
		var string2=''''''
		if(expression.set!==null)
			string2+=expression.set.compileMessageOperateThing
		var string3=''
		if(expression.totalCondition!==null)
			string3=string3+'if('+expression.totalCondition.compileTotalCondition+'){'
		var string4=''''''	
		string4+=expression.totalOperation.compileTotalOperation
		
		var string5=''''''
		if(expression.subExpression!==null){
			for(i: expression.subExpression){
				var string6=''
				var string7=''''''
				var string8=''
				var string9=''
				if(i.totalExpression.totalCondition!==null)
					string6+='if('+i.totalExpression.totalCondition.compileTotalCondition+'){'
				string7+=i.totalExpression.totalOperation.compileTotalOperation
				if(i.totalExpression.elseExpression!==null)
					string8='''else{ 
						«i.totalExpression.elseExpression.totalOperation.compileTotalOperation»
						}'''
				if(i.totalExpression.totalCondition!==null)
					string9="}"
				string5+='''
				 	«string6»
				 		«string7»
				 	«string8»
				 	«string9»
				'''
				}
			}
		
		var string6="changeRule(\""+expression.name+"\");"
		var string7=''''''
		if(expression.totalCondition!==null)
			string7="}"	
		
		code+='''
		«string1»
			«string1_1»
			«setDateString2»
			«string2»
			«string3»
				«string4»
				«string5»
				«string6»
			«string7»
		}
		}
		'''
		
		if(expression.elseExpression===null){
			return code
		}
	
		if(expression.elseExpression!==null){
			var string8=''''''
			var string9=''
			var string9_1=''
		if(expression.elseExpression.set===null){
			string9="func else"+expression.name+"(){"
			if(expression.elseExpression.totalOperation.person!==null)
				string9_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else if(expression.totalOperation.person2!==null)
				string9_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else
				string9_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
		}
		if(expression.elseExpression.set!==null){
			string9="func else"+expression.name+"("+expression.elseExpression.set.compileMessageOperate+"){"
			if(expression.elseExpression.totalOperation.person!==null)
				string9_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else if(expression.totalOperation.person2!==null)
				string9_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
			else
				string9_1="if onlyState(ContractState)&&!functionStatus["+expression.name+"]{"
		}
		var onlyOne='''bool one=true;
		if(one){
		'''
		var string10=''
		var string11=''
		var string12=''''''
		var string13=''
		if(expression.totalCondition!==null)
			string10+='if(!('+expression.totalCondition.compileTotalCondition+')){'
		string11+=expression.elseExpression.totalOperation.compileTotalOperation
		if(expression.totalCondition!==null)
			string13="}"
		if(expression.totalCondition!==null)
			string12="}"
		string8='''
			«string9»
				«string9_1»
				«onlyOne»
				«string10»
					«string11»
				«string13»
			«string12»
		'''
		code+='''
			«string8»
			one=false;
			}
		'''
		return code
		}
	}
	
	def dispatch compileManyRuleExpressionGo(RegularRuleExpression expression)'''
		«FOR i : expression.ruleExpression»
			«i.compileRuleExpressionGo»
		«ENDFOR»
	'''
	
	def dispatch compileManyRuleExpressionGo(AdditionExpression expression)'''
		«FOR i : expression.ruleExpression»
			«i.compileAdditionalRuleExpressionGo»
		«ENDFOR»
	'''
	
	def compileAdditionalRuleExpressionGo(RuleExpression expression){
		var String code=''''''
		var string1=''
		var string1_1=''
		var link=''
		var setDateString1=''
		var setDateString2=''
		if(expression.setdate!==null){
			setDateString1='_year uint16, _months uint8, _days uint8, _hours uint8, _minutes uint8'
			setDateString2=expression.setdate.message+'=convertToTimestamp(_year,_months,_days,_hours,_minutes);'
		}
		if(expression.setdate!==null&&expression.set!==null){
			link=','
		}
		if(expression.repeat===null){
		if( expression.set===null){
			string1="func "+expression.name+"("+setDateString1+") {"
			if(expression.totalOperation.person!==null)
				string1_1="if !functionStatus["+expression.name+"]{"
			else if(expression.totalOperation.person2!==null)
				string1_1="if !functionStatus["+expression.name+"]{"
			else
				string1_1="if !functionStatus["+expression.name+"]{"		
		}
		if(expression.set!==null){
			string1="func "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") {"
			if(expression.totalOperation.person!==null)
				string1_1="if !functionStatus["+expression.name+"]{"
			else if(expression.totalOperation.person2!==null)
				string1_1="if !functionStatus["+expression.name+"]{"
			else
				string1_1="if !functionStatus["+expression.name+"]{"
		}
		}
		if(expression.repeat!==null){
		if( expression.set===null){
			string1="func "+expression.name+"("+setDateString1+") {"
			if(expression.totalOperation.person!==null)
				string1_1="if true{"
			else if(expression.totalOperation.person2!==null)
				string1_1="if true{"
			else
				string1_1="if true{"		
		}
		if(expression.set!==null){
			string1="func "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") {"
			if(expression.totalOperation.person!==null)
				string1_1="if true{"
			else if(expression.totalOperation.person2!==null)
				string1_1="if true{"
			else
				string1_1="if true{"
		}
		}	
		var string2=''''''
		if(expression.set!==null)
			string2+=expression.set.compileMessageOperateThing
		var string3=''
		if(expression.totalCondition!==null)
			string3=string3+'if('+expression.totalCondition.compileTotalCondition+'){'
		var string4=''''''	
		string4+=expression.totalOperation.compileTotalOperation
		
		var string5=''''''
		if(expression.subExpression!==null){
			for(i: expression.subExpression){
				var string6=''
				var string7=''''''
				var string8=''
				var string9=''
				if(i.totalExpression.totalCondition!==null)
					string6+='if('+i.totalExpression.totalCondition.compileTotalCondition+'){'
				string7+=i.totalExpression.totalOperation.compileTotalOperation
				if(i.totalExpression.elseExpression!==null)
					string8='''else{ 
						«i.totalExpression.elseExpression.totalOperation.compileTotalOperation»
						}'''
				if(i.totalExpression.totalCondition!==null)
					string9="}"
				string5+='''
				 	«string6»
				 		«string7»
				 	«string8»
				 	«string9»
				'''
				}
			}
		
		var string6="changeRule(\""+expression.name+"\");"
		var string7=''''''
		if(expression.totalCondition!==null)
			string7="}"	
		
		code+='''
		«string1»
			«string1_1»
			«setDateString2»
			«string2»
			«string3»
				«string4»
				«string5»
				«string6»
			«string7»
		}
		}
		'''
		
		if(expression.elseExpression===null){
			return code
		}
	
		if(expression.elseExpression!==null){
			var string8=''''''
			var string9=''
			var string9_1=''
		if(expression.elseExpression.set===null){
			string9="func else"+expression.name+"(){"
			if(expression.elseExpression.totalOperation.person!==null)
				string9_1="if !functionStatus["+expression.name+"]{"
			else if(expression.totalOperation.person2!==null)
				string9_1="if !functionStatus["+expression.name+"]{"
			else
				string9_1="if !functionStatus["+expression.name+"]{"
		}
		if(expression.elseExpression.set!==null){
			string9="func else"+expression.name+"("+expression.elseExpression.set.compileMessageOperate+"){"
			if(expression.elseExpression.totalOperation.person!==null)
				string9_1="if !functionStatus["+expression.name+"]{"
			else if(expression.totalOperation.person2!==null)
				string9_1="if !functionStatus["+expression.name+"]{"
			else
				string9_1="if !functionStatus["+expression.name+"]{"
		}
		var onlyOne='''bool one=true;
		if(one){
		'''
		var string10=''
		var string11=''
		var string12=''''''
		var string13=''
		if(expression.totalCondition!==null)
			string10+='if(!('+expression.totalCondition.compileTotalCondition+')){'
		string11+=expression.elseExpression.totalOperation.compileTotalOperation
		if(expression.totalCondition!==null)
			string13="}"
		if(expression.totalCondition!==null)
			string12="}"
		string8='''
			«string9»
				«string9_1»
				«onlyOne»
				«string10»
					«string11»
				«string13»
			«string12»
		'''
		code+='''
			«string8»
			one=false;
			}
		'''
		return code
		}
	}
	
	def compileRequireGo(Require require)'''
		«FOR i :  require.value»
			«IF i == "isTime"»
			    // 用于判断是否达到指定时间的函数
			    func isTime(targetTime int) bool {
			        return time.Now() >= targetTime;
			    }
			«ELSEIF i == "logic"»
				// 辅助函数，根据比较符号执行比较
				func logic(a, b uint, op string) bool {
				    switch op {
				    case "<":
				    	return a < b
				   	case "<=":
				   		return a <= b
				   	case "==":
				   		return a == b
				   	case "!=":
				    	return a != b
				    case ">":
				    	return a > b
				    case ">=":
				    	return a >= b
				    default:
				    	// 如果操作符不匹配任何支持的操作符，则返回 false 或者其他适当的值。
				    	return false
				    }
				}
			«ELSEIF i == "check"»
				func check(contractName string) bool {
					return true;
				}
			«ELSEIF i == "isDone"»
			    // 检查某个功能是否已经执行
			    func isDone(functionName string) bool {
			        return functionStatus[functionName];
			    }
			«ELSEIF i == "SetDate"»
			    // isLeapYear 判断给定的年份是否是闰年
			    func isLeapYear(year uint16) bool {
			    	if year%4 != 0 {
			    		return false
			    	}
			    	if year%100 != 0 {
			    		return true
			    	}
			    	if year%400 != 0 {
			    		return false
			    	}
			    	return true
			    }
			    
			    // getDaysInMonth 根据给定的月份和年份返回该月的天数
			    func getDaysInMonth(month uint8, year uint16) uint8 {
			    	switch month {
			    	case 1, 3, 5, 7, 8, 10, 12:
			    		return 31
			    	case 4, 6, 9, 11:
			    		return 30
			    	default:
			    		if isLeapYear(year) {
			    			return 29
			    		}
			    		return 28
			    	}
			    }
			    
			    // convertToTimestamp 将给定的日期和时间转换为Unix时间戳
			    func convertToTimestamp(year uint16, month uint8, day uint8, hour uint8, minute uint8) uint64 {
			    	// 检查参数的有效性
			    	if year < 1970 || month < 1 || month > 12 || day < 1 || day > getDaysInMonth(month, year) || hour > 23 || minute > 59 {
			    		panic("Invalid input parameters")
			    	}
			    
			    	var timestamp uint64
			    	// 计算年份之前的天数
			    	for y := uint16(1970); y < year; y++ {
			    		if isLeapYear(y) {
			    			timestamp += 366 * 24 * 60 * 60
			    		} else {
			    			timestamp += 365 * 24 * 60 * 60
			    		}
			    	}
			    	// 计算月份之前的天数
			    	for m := uint8(1); m < month; m++ {
			    		timestamp += uint64(getDaysInMonth(m, year)) * 24 * 60 * 60
			    	}
			    	// 加上日、小时和分钟的秒数
			    	timestamp += uint64((day-1)*24*60*60 + hour*60*60 + minute*60)
			    
			    	return timestamp
			    }
			«ELSEIF i == "timeSub"»
			     // compareTimestamps 比较两个时间戳，并根据给定的操作符和自定义秒数返回布尔值
			     func compareTimestamps(timestamp1 uint64, timestamp2 uint64, customSeconds uint64, operator string) bool {
			     	// 计算两个时间戳的差值（取绝对值）
			     	var timeDifference uint64
			     	if timestamp1 > timestamp2 {
			     		timeDifference = timestamp1 - timestamp2
			     	} else {
			     		timeDifference = timestamp2 - timestamp1
			     	}
			     
			     	// 判断操作符并执行相应的比较
			     	switch strings.TrimSpace(operator) {
			     	case ">":
			     		return timeDifference > customSeconds
			     	case "<":
			     		return timeDifference < customSeconds
			     	case "==":
			     		return timeDifference == customSeconds
			     	case "!==":
			     		return timeDifference != customSeconds
			     	default:
			     		panic("Invalid operator")
			     	}
			     }
			«ELSEIF i == "transfer"»
				// transferTo 用于给指定地址转账并执行模拟支付流程
				func transferTo(ctx *Context, recipient Person, amount uint) error {
					if recipient == "" {
						return fmt.Errorf("Invalid recipient address")
					}
					if amount <= 0 {
						return fmt.Errorf("Amount must be greater than zero")
					}
				
					// 获取调用者的余额
					user := ctx.Get("user").(*Person)
					callerBalance, err := user.Balance
					if err != nil {
						return fmt.Errorf("获取调用方余额失败: %v", err)
					}
				
					// 获取接收方余额
					recipientBalance, err := recipient.Balance
					if err != nil {
						return fmt.Errorf("获取接收方余额失败: %v", err)
					}
				
					// 确保调用方有足够的余额支付
					if callerBalance < amount {
						return fmt.Errorf("调用方余额不足")
					}
				
					// 扣除调用方的金额
					callerBalance -= amount
				
					// 增加接收方的金额
					recipientBalance += amount
				
					// 更新账户余额
					if err := ctx.GetStub().PutState(user, callerBalance); err != nil {
						return fmt.Errorf("更新调用方余额失败: %v", err)
					}
				
					if err := ctx.GetStub().PutState(recipient, recipientBalance); err != nil {
						return fmt.Errorf("更新接收方余额失败: %v", err)
					}
					return nil
				}
			«ELSEIF i == "compareStrings"»
				func compareStrings(str1, str2 string) bool {
				    return str1 == str2
				}
			«ENDIF»
		    «ENDFOR»
		'''
	
	def dispatch compileManyRuleGo(AdditionExpression expression)''''''
	def dispatch compileManyRuleGo(RegularRuleExpression expression)''''''
	def dispatch compileManyRuleGo(ParallelExpression expression)''''''
	def dispatch compileManyRuleGo(ExclusiveExpression expression){
		var String code=''''''
		var String varvalue=""
		var String string01='var myBoolean'+exclu+' bool := true'
		var String string02=''''''
		var j=0
		for(rule : expression.ruleExpression){
			if(expression.ruleExpression.get(j).set!==null)
			varvalue=varvalue+','+expression.ruleExpression.get(j).set.everymassage.defineMessage2
			j=j+1
		}
		var String string1=""
		string1=string1+"func exclusive"+exclu+" (_choice int"+ varvalue+")"+"{"
		var String string2=""
		string2="var choice int := _choice;"
		var i=0
		var String code2=''''''
		for( rule : expression.ruleExpression){
		var String string3=""
		var String string4=""
		string3="if(choice=="+i+"&& myBoolean"+exclu+"){"
		if(expression.ruleExpression.get(i).set!==null)
			string4=expression.ruleExpression.get(i).name+"("+expression.ruleExpression.get(i).set.everymassage.defineMessage+");"
		else
			string4=expression.ruleExpression.get(i).name+"();"
		code2+='''
		«string3»
			«string4»
			myBoolean«exclu» = false
			}
		'''
		i=i+1
		}
		exclu=exclu+1
		code+='''
		«string01»
			«string02»
		«string1»
			«string2»
			«code2»
		}
		'''
		return code
}
	
		
	def compileSolidity(Model model)'''
		// SPDX-License-Identifier: MIT
		pragma solidity >=0.7.0 <0.9.0;
		«FOR name : model.packageName»
			import "./«name».sol";
		«ENDFOR»
		contract «model.name» «IF model.extendName !== null» is «model.extendName» «ENDIF» 
		{ 
			«IF model.contractMessage !== null»
				« model.contractMessage.compileMessage»
			«ENDIF»
			«FOR subject:model.subjects»
				«subject.compileSubject»
		    «ENDFOR»
			«FOR object: model.objects»
				«object.compileObject»
			«ENDFOR»
			«IF model.initialize !== null»
				«model.initialize.compileInit»
			«ENDIF»
			«FOR group : model.group»
				«group.compileGroup»
			«ENDFOR»
			constructor() {
				«FOR group : model.group»
				 	«FOR value :  group.value»
				 		«group.name».push(«value.name»);
		 	    	«ENDFOR»
				«ENDFOR»
			}
			event completedRule(address indexed person, string rulename);
			«IF model.operations !== null»
				«model.operations.compileOperation»
			«ENDIF»
			«IF model.conditions !== null»
				«model.conditions.compileCondition»
			«ENDIF»
			«FOR i : model.ruleStructures.manyRuleExpression»
				«i.compileManyRule»
			«ENDFOR»
			«IF model.ruleStructures!==null»
				«model.ruleStructures.compileRule»
			«ENDIF»
			«IF model.require !== null »
				«model.require.compileRequire»
			«ENDIF»
		    modifier unDone(string memory functionName){
		        require(!(functionStatus[functionName]),"require do this function unsucessfully");
		        _;
		    }
			event ContractStateChange(string newState);
			// Custom modifier: allow or restrict execution based on the value of a string parameter
			modifier onlyState(string memory State) {
			    require(compareStrings(State, "start") || compareStrings(State, "restart"), "Not allowed in this state");
			     emit ContractStateChange(State);
			    _;
			}
			// Helper function to compare whether two strings are equal
			function compareStrings(string memory a, string memory b) internal pure returns (bool) {
			    return (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b)));
			}
			
		}
	'''
	
	def dispatch compileManyRule(AdditionExpression expression)''''''
	def dispatch compileManyRule(RegularRuleExpression expression)''''''
	def dispatch compileManyRule(ParallelExpression expression)''''''
	def dispatch compileManyRule(ExclusiveExpression expression){
		var String code=''''''
		var String varvalue=""
		var String string01='mapping(uint => string) public Exclusive'+exclu+' ;'
		var String string02=''''''
		string02+='function initializeExclusive'+exclu+'() public {\n'
		var index=0
		for( rule : expression.ruleExpression){
			string02+='Exclusive'+exclu+'['+index+']'+'=\"'+rule.name+'\";\n'
			index=index+1
		}
		string02+='}'
		var j=0
		for(rule : expression.ruleExpression){
			if(expression.ruleExpression.get(j).set!==null)
			varvalue=varvalue+','+expression.ruleExpression.get(j).set.everymassage.defineMessage2
			j=j+1
		}
		var String string1=""
		string1=string1+"function exclusive"+exclu+" (uint _choice"+ varvalue+") public payable 
			only"+expression.ruleExpression.get(0).totalOperation.person.name+" {"
		var String string2=""
		string2="uint choice=_choice;"
		var i=0
		var String code2=''''''
		for( rule : expression.ruleExpression){
		var String string3=""
		var String string4=""
		string3="if(choice=="+i+")"
		if(expression.ruleExpression.get(i).set!==null)
			string4=expression.ruleExpression.get(i).name+"("+expression.ruleExpression.get(i).set.everymassage.defineMessage+");"
		else
			string4=expression.ruleExpression.get(i).name+"();"
		code2+='''
		«string3»
			«string4»
		'''
		i=i+1
		}
		exclu=exclu+1
		code+='''
		«string01»
			«string02»
		«string1»
			«string2»
			«code2»
		}
		'''
		return code
	}
	
	def String defineMessage2(EList<everyMessage> list){
		var result = ""
		for (i : list) {
		        result = ', '+i.type+' _'+i.message
		}
		return result;
	}
	
	def defineMessage(EList<everyMessage> list){
		var isFirst = true
		var result = ""
		for (i : list) {
		    if (!isFirst) {
		        result = ', '+result
		    }
		    result += i.message
		    isFirst = false
		}
		return result;
	}
	
	def compileRequire(Require require)'''
		«FOR i :  require.value»
			«IF i == "isTime"»
			    // Check if the current time reaches the target time
			    function isTime(uint256 targetTime) internal view returns (bool) {
			        return block.timestamp >= targetTime;
			    }
			«ELSEIF i == "logic"»
				// Helper function to perform comparisons based on a comparison operator
				    function compare(uint a, uint b, string memory op) internal pure returns (bool) {
				        if (compareStrings(op, ">")) {
				            return a > b;
				        } else if (compareStrings(op, "<")) {
				            return a < b;
				        } else if (compareStrings(op, ">=")) {
				            return a >= b;
				        } else if (compareStrings(op, "<=")) {
				            return a <= b;
				        } else if (compareStrings(op, "==")) {
				            return a == b;
				        } else if (compareStrings(op, "!=")) {
				            return a != b;
				        }
				        revert("Invalid operator.");
				    }
				
				
				    // Only allow execution of the setValue function if the condition valueA > valueB is met
				    function logic(uint256 valueA, uint256 valueB, string memory symbol) internal pure returns (bool) {
				        return compare(valueA, valueB, symbol);
				    }
			«ELSEIF i == "check"»
				function check(string memory contractName) public view returns (bool){
					return true;
				}
			«ELSEIF i == "isDone"»
			    // Check whether a specific function has already been executed
			    function isDone(string memory functionName) internal view returns (bool) {
			        return functionStatus[functionName];
			    }
			«ELSEIF i == "isCompleted"»
				function isCompleted(string memory ruleName) internal view returns (bool){
					return true;
				}
			«ELSEIF i == "SetDate"»
				    function isLeapYear(uint16 year) internal pure returns (bool) {
				        if (year % 4 != 0) {
				            return false;
				        }
				        if (year % 100 != 0) {
				            return true;
				        }
				        if (year % 400 != 0) {
				            return false;
				        }
				        return true;
				    }
				
				    function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {
				        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
				            return 31;
				        } else if (month == 4 || month == 6 || month == 9 || month == 11) {
				            return 30;
				        } else if (isLeapYear(year)) {
				            return 29;
				        } else {
				            return 28;
				        }
				    }
				
				    function convertToTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint256) {
				        require(year >= 1970, "Year must be 1970 or later");
				        require(month >= 1 && month <= 12, "Invalid month");
				        require(day >= 1 && day <= getDaysInMonth(month, year), "Invalid day");
				        require(hour >= 0 && hour <= 23, "Invalid hour");
				        require(minute >= 0 && minute <= 59, "Invalid minute");
				        uint256 timestamp = 0;
				        for (uint16 y = 1970; y < year; y++) {
				            if (isLeapYear(y)) {
				                timestamp += 366 days;
				            } else {
				                timestamp += 365 days;
				            }
				        }
				        for (uint8 m = 1; m < month; m++) {
				            timestamp += uint256(getDaysInMonth(m, year)) * 1 days;
				        }
				        timestamp += uint256(day - 1) * 1 days;
				        timestamp += uint256(hour) * 1 hours;
				        timestamp += uint256(minute) * 1 minutes;
				        return timestamp;
				    }
			«ELSEIF i == "timeSub"»
			     function compareTimestamps(uint256 timestamp1, uint256 timestamp2, uint256 customSeconds, string memory operator) internal pure returns (bool) {
			            // Calculate the difference between two timestamps (take absolute value to ensure the result is positive)
			            uint256 timeDifference = timestamp1 - timestamp2;
			            if (keccak256(bytes(operator)) == keccak256(bytes(">"))) {
			                return timeDifference > customSeconds;
			            } else if (keccak256(bytes(operator)) == keccak256(bytes("<"))) {
			                return timeDifference < customSeconds;
			            } else if (keccak256(bytes(operator)) == keccak256(bytes("=="))) {
			                return timeDifference == customSeconds;
			            } else if (keccak256(bytes(operator)) == keccak256(bytes("!=="))) {
			                return timeDifference != customSeconds;
			            } else {
			                revert("Invalid operator");
			            }
			        }
			«ELSEIF i == "transfer"»
				event Transfer(address indexed from, address indexed to, uint amount);
				// Used to transfer funds to a specified address
				function transferTo(address payable recipient, uint amount) internal {
				    require(recipient != address(0), "Invalid recipient address");
				    require(amount > 0, "Amount must be greater than zero");
				    recipient.transfer(amount);
				    emit Transfer(msg.sender,recipient, amount);
				}
			«ENDIF»
	    «ENDFOR»
	'''
	
	def compileMessage(ContractMessage message)'''
		«FOR i :  message.message»
			«IF i.type.type == "date"»
			uint256 public «i.type.name» = «i.value.compilevalue»;
			«ELSEIF i.type.type == "address"»
    			«i.type.type» public «i.type.name» = payable(«i.value.compilevalue»);
			«ELSEIF i.type.type == "duration"»
			uint256 public «i.type.name» = «i.value.compilevalue» ;
			«ELSEIF i.type.type == "ufixed" || i.type.type == "fixed" »
			uint256 public «i.type.name» = «i.value.compilevalue» ;
			«ELSEIF i.type.type != "date" && i.type.type != "address"»
				«i.type.type» public «i.type.name» = «i.value.compilevalue» ;«ENDIF»
	    «ENDFOR»
		string public ContractState="start";
		mapping(string => bool) public functionStatus;
		mapping(string => uint) public functionFinishTime;	
	'''

	def compileSubject(Subject subject) '''
«««	建立结构体
	struct «subject.name» {
		«IF subject.type != "CA"»
		string name;
		address payable account;
		«ENDIF»
		«IF subject.type == "CA"»
		string name;
		address payable account;
		uint256 key;
		uint256 year;
		«ENDIF»
		«IF subject.subjectExpression !== null»
			«subject.subjectExpression.compileSubjectExpression»
		«ENDIF»
	}
	'''
	
	def compileSubjectExpression(SubjectExpression SuE){'''
		«FOR key :  SuE.keyValue»
			«IF key.type == "date" || key.type == "ufixed"»
				uint256  «key.name» ;
				«ELSEIF key.type != "date"&&key.type != "ufixed"»
    				«key.type»   «key.name» ; «ENDIF»
    	«ENDFOR»
    '''
	}
	
	def compileObject(Object object)'''
	«««	建立结构体
	struct «object.name» {
		   «object.objectExpression.compileObjectExpression»
	}
	
	'''
	
	def compileObjectExpression(ObjectExpression ObE) {'''
		«FOR key :  ObE.keyValue»
			«IF key.type == "date" || key.type == "ufixed"»
				uint256  «key.name» ;
				«ELSEIF key.type != "date"&&key.type != "ufixed"»
    				«key.type»   «key.name» ; «ENDIF»
    	«ENDFOR»
    '''
}
	
	def compileInit(Initialize init){'''
«««初始化主体
		«FOR sinit:init.inits»
			«sinit.subtype.name» public «sinit.name» = «sinit.subtype.name»(«sinit.value.compilevaluelist»);
		«ENDFOR»
«««建立相应的modifier
		«FOR sinit:init.inits»
			modifier only«sinit.name»(){
				require(msg.sender == «sinit.name».account,"Only «sinit.name» can access this.");
				 _; 
			}
		«ENDFOR»
«««初始化客体
		«FOR oinit:init.inito»
			«oinit.obtype.name» public «oinit.name» = «oinit.obtype.name»(«oinit.value.compilevaluelist»);
		«ENDFOR»
	'''		
	}
	
	def compilevaluelist(EList<Value> list){
		var isFirst = true
		var result = ""
		for (value : list) {
		    if (!isFirst) {
		        result += ', '
		    }
		    result += value.compilevalue
		    isFirst = false
		}
		return result
}
	
	def dispatch compilevalue(Address value){
		return 'payable('+value.value+')'
	}
	
	def dispatch compilevalue(AllNumber value){
		return value.number
	}
	
	def dispatch compilevalue(Now value){
		return 'block.timestamp'
	}
	
	def dispatch compilevalue(ThisDecimal value){
		return stringToDouble(value.value)*1000
	}
	
	def double stringToDouble(String str) {
    	return Double::parseDouble(str)
	}
	
	def dispatch compilevalue(url value){
		return value.value
	}
	
	def dispatch compilevalue(ThisString value){
		return '"'+value.value+'"'
	}
	
	def dispatch compilevalue(ThisBoolean value){
		return value.value
	}
	
	def dispatch compilevalue(Duration value){
		if(value.symbol=="months")
			return (value.value)*60*60*24*30
		else if(value.symbol=="days")
			return (value.value)*60*60*24
		else if(value.symbol=="mins")
			return (value.value)*60
		else if(value.symbol=="hours")
			return (value.value)*60*60
		else if(value.symbol=="years")
			return (value.value)*60*60*24*30*365
	}
	
	def dispatch compilevalue(ThisDate value){
		return toTimestamp(value.value.year,value.value.month,value.value.day,value.value.hour,value.value.min)
	}
	
	def dispatch compilevalue(Right value){
		return '"'+value.right.name+'"'
	}
	
	def compilevalue2(Address value){
		return 'payable('+value.value+')'
	}
	
	def compileGroup(Group group){
		var string=''''''
		var string1=''
		var boolean first=true
		for(i:group.value){
			if(!first){
			string1+=','+i.name
			}
			else {
				string1+=i.name
				first=false
			}
			}
		//string1=group.subtype.name+'[] public '+group.name+'=['+string1+'];'
		string1=group.subtype.name+'[] public '+group.name+';'
		var string2='''
		// Modifier: restrict execution to any one address within a group of structs
		    modifier only«group.name»() {
		        bool found = false;
		        for (uint256 i = 0; i < «group.name».length; i++) {
		            if («group.name»[i].account == msg.sender) {
		                found = true;
		                break;
		            }
		        }
		        require(found, "Permission denied");
		        _;
		    }
		'''
		string='''
		«string1»
		«string2»
		'''
		return string
	}
	
	def compileOperation(Operation operation){
		var myString = ''''''
		for (everyoperation : operation.operates) {
			var string1 = 'function ' + everyoperation.name + '() internal{'
			var string2 = ''
			if(everyoperation.firstOperation!==null)
				string2=everyoperation.firstOperation.compileTrueOperate
			else if(everyoperation.linkOperation!==null)
				string2=everyoperation.linkOperation.name+'();'
			var string3=''''''
			for (everylink : everyoperation.andOrLink) {
				if(everylink.firstOperation!==null)
					string3+=everylink.firstOperation.compileTrueOperate
				else if(everylink.linkOperation!==null)
					string3+=everylink.linkOperation.name+'();'
			 }
			 myString+='''
			 «string1»
			 	«string2»
			 	«string3»
			 }
			 '''
		}
		 return myString
	}
	
	def compileCondition(Condition condition) {
	    var myString = ''''''
	    for (everycondition : condition.conditions) {
	        var string1 = 'function ' + everycondition.name + '() internal view returns (bool) {'
	        var string2=''
	        if(everycondition.conditionExpression!==null)
	        	if(everycondition.conditionExpression.no!==null)
	        		string2 ='if (' +'!'+everycondition.conditionExpression.condition.compileTrueCondition
	        	else
	        		string2 ='if (' + everycondition.conditionExpression.condition.compileTrueCondition
	        else if(everycondition.linkCondition!==null)
	        	if(everycondition.linkCondition.no!==null)
	        		string2 ='if (' +'!'+everycondition.linkCondition.linkCondition.name+'()'
	        	else
	        		string2 ='if (' + everycondition.linkCondition.linkCondition.name+'()'
	        for (everylink : everycondition.andOrLink) {
	            if (everylink.link == 'And') {
	            	if(everylink.condition!==null){
		            	if(everylink.condition.no!==null)
		                string2 += '&&' +" !"+everylink.condition.condition.compileTrueCondition
		                else
		                string2 += '&&' +everylink.condition.condition.compileTrueCondition
	                }
	                if(everylink.linkCondition!==null){
		            	if(everylink.linkCondition.no!==null)
		                string2 += '&&' +" !"+everylink.linkCondition.linkCondition.name+'()'
		                else
		                string2 += '&&' +everylink.linkCondition.linkCondition.name+'()'
	                }
	            } else if (everylink.link == 'Or') {
	            	if(everylink.condition.no!==null)
		                string2 += '||' +" !"+everylink.condition.condition.compileTrueCondition
		                else
		                string2 += '||' +everylink.condition.condition.compileTrueCondition
	                }
	                if(everylink.linkCondition!==null){
		            	if(everylink.linkCondition.no!==null)
		                string2 += '||' +" !"+everylink.linkCondition.linkCondition.name+'()'
		                else
		                string2 += '||' +everylink.linkCondition.linkCondition.name+'()'
	            }
	        }
	        string2 += ')'
	        myString +='''
	    «string1»
	    	«string2» return true;
	    	else return false;
	    }
	    '''
	    }
	    return myString
	}

	def dispatch compileTrueCondition(isTime condition){
		var string=''
		if(condition.expression !== null)
			if(condition.duration===null)
				string='isTime('+condition.expression.compileExpression+')'
			else if(condition.duration!==null)
				string='isTime('+condition.expression.compileExpression+condition.symbol+condition.duration.compilevalue+')'
			if(condition.value !== null)
				if(condition.duration===null)
					string='isTime(functionFinishTime[\"'+condition.value.name+'\"])'
				else if(condition.duration!==null)
					string='isTime(functionFinishTime[\"'+condition.value.name+'\"]+'+condition.symbol+condition.duration.compilevalue+')'
		return string
		}
	
	def dispatch compileTrueCondition(Timepoint timepoint){
		return timepoint.compileTimePoint2
	}
	
	def dispatch compileTrueCondition(TimeSub condition){
		var String a=condition.valueA.compileExpression
		var String b=''
		if(condition.valueB!==null)
			b=condition.valueB.compileExpression
		if(condition.valueC!==null)
			b='functionFinishTime[\"'+condition.valueC.name+'\"]'
		var c=condition.duration.compilevalue
		return 'compareTimestamps('+a+','+b+','+c+',\"'+condition.compare+'\")'
	}
	
	def dispatch compileTrueCondition(CompareString condition){
		return 'compareStrings('+condition.valueA.compileExpression+','+condition.valueB.compileExpression+')'
	}
	
	def dispatch compileTrueCondition(isTrue condition){
		return condition.compare.compileSingleExpression
	}
	
	def dispatch compileTrueCondition(isDone condition){
		return 'isDone(\"'+condition.name.name+'\")'
	}
	
	def dispatch compileTrueCondition(logic condition){
		return 'logic('+condition.valueA.compileExpression+','+condition.valueB.compileExpression+',\"'+condition.mathSymbol+'\")'
	}
	
	def compileExpression(MixExpression expression){
		var string=''
		string+=expression.expression.compileSingleExpression
		if(expression.otherMixExpression!==null)
			string+=expression.otherMixExpression.compileOtherMixExpression
		return string
	}
	
	def dispatch compileSingleExpression(OtherExpression expression){
		return expression.value
	}
	
	def dispatch compileSingleExpression(FloatExpression expression){
		return expression.value+'/1000'
	}
	
	def dispatch compileSingleExpression(PeriodExpression expression){
		if(expression.type=="hours")
			return expression.value*60*60
		else if(expression.type=="days")
			return expression.value*60*60*24
		else if(expression.type=="months")
			return expression.value*60*60*24*30
		else if(expression.type=="years")
			return expression.value*60*60*24*30*365
		else if(expression.type=="mins")
			return expression.value*60
	}
	
	def dispatch compileSingleExpression(GetPeriodExpression expression){
		if(expression.type=="hours")
			return expression.value+'*60*60'
		else if(expression.type=="days")
			return expression.value+'*60*60*24'
		else if(expression.type=="months")
			return expression.value+'*60*60*24*30'
		else if(expression.type=="years")
			return expression.value+'*60*60*24*30*365'
		else if(expression.type=="mins")
			return expression.value+'*60'
	}
	
	def dispatch compileSingleExpression(RuleTimeExpression expression){
		return 'functionFinishTime[\"'+expression.value.name+'\"]'
	}
	
	def dispatch compileSingleExpression(PersonExpression expression){
		return '\"'+expression.value.name+'\"'
	}
	
	def dispatch compileSingleExpression(ThingExpression expression){
		return expression.compileThingExpression
	}
	
	def dispatch compileSingleExpression(StringExpression expression){
		return '\"'+expression.value+'\"'
	}
	
	def dispatch compileThingExpression(SubjectExpress expression){
		var string=''
		string=expression.subject.name+'.'+expression.attribute
		return string
	}
	
	def dispatch compileThingExpression(ObjectExpress expression){
		var string=''
		string=expression.object.name+'.'+expression.attribute
		return string	
	}
	
	def dispatch compileSingleExpression(RegularExpression expression){
		return expression.compileRegular
	}
	
	def dispatch compileRegular(AllNumber value){
		return value.number
	}
	
	def dispatch compileRegular(ThisDecimal value){
		return stringToDouble(value.value)*1000
	}
	
	def dispatch compileRegular(ThisBoolean value){
		return value.value
	}
	
	def dispatch compileRegular(Now value){
		return 'block.timestamp'
	}
	
	def dispatch compileRegular(ThisDate value){
		return value.compilevalue
	}
	
	def compileOtherMixExpression(EList<OtherMixExpression> expression){
		var string=''
		for(i : expression)
			string+=i.link+i.expression.compileSingleExpression
		return string
	}

	def dispatch compileTrueCondition(checkExpression condition){
		return "check("+condition.name.name+")"
	}
	
	def compileMessageOperate(messageExpression operation){
		return operation.everymassage.defineEveryMessage
	
	}
	
	def defineEveryMessage(EList<everyMessage> list){
		var isFirst = true
		var result = ""
		for (i : list) {
		    if (!isFirst) {
		        result += ', '
		    }
		    if(i.type=="bool"||i.type=='uint'||i.type=='ufixed'||i.type=='address')
		    	result += i.type+" _"+i.message
		    else result += i.type+" memory"+" _"+i.message
		    isFirst = false
		}
		return result;
	}
		
	def dispatch compileTrueOperate(transferExpression operation){
		var string=''
		string='transferTo('+operation.person.name+'.account,10**14*('+operation.value.compileExpression+'))'+';'
		return string
	}
	
	def dispatch compileTrueOperate(changeExpression operation){
		return operation.compileChangeExpression
	}
	
	def dispatch compileChangeExpression(otherchange expression){
		var string=''
		string=expression.changeThing.compileExpression+'='+expression.changeResult.compileExpression+';'
		return string
	}
	
	def dispatch compileChangeExpression(changeString expression){
		var string=''
		string=expression.changeThing.compileExpression+'=\"'+expression.changeResult.compileExpression+'\";'
		return string
	}
	
	def dispatch compileChangeExpression(changeContract expression){
		var string=''
		string='ContractState=\"'+expression.changeResult+'\";'
		return string
	}
	
	def dispatch compileChangeExpression(changeRule expression){
		var string=''
		string='functionStatus[\"'+expression.changeThing.name+'\"]='+expression.changeResult+';'
		return string
	}
	
	def dispatch compileChangeExpression(changeOther expression){
		var string=''
		string=expression.changeThing.compileSingleExpression+"="+expression.changeResult+';'
		return string
	}
	
	def dispatch compileChangeExpression(changeAddress expression){
		var string=''
		string=expression.changeThing.compileExpression+'='+"payable("+expression.changeResult.compileExpression+');'
		return string
	}
	
	def dispatch compileTrueOperateThing(transferExpression operation)''''''
	
//	def compileMessageOperateThing(messageExpression operation)'''
//		«FOR i : operation.everymassage»
//		 «IF i.symbol ===null»
//			«i.message» = _«i.message»;
//		«ELSE»
//			«i.type» «i.message» = _«i.message»;	
//		«ENDIF»
//		«ENDFOR»   
//	'''
	
//	def compileMessageOperateThing(messageExpression operation) '''
//	    «FOR i : operation.everymassage»
//	        «IF i.symbol === null»
//	            «i.message» = _«i.message»;
//	        «ELSE»
//	            «IF i.type == "ufixed"»
//	                uint256 «i.message» = uint256(_«i.message»);  // 转换为 uint256
//	            «ELSE»
//	                «i.type» «i.message» = _«i.message»;   // 使用正确的类型进行赋值
//	            «ENDIF»
//	        «ENDIF»
//	    «ENDFOR»
//	'''
	
	
	def compileMessageOperateThing(messageExpression operation) '''
	    «FOR i : operation.everymassage»
	        «IF i.symbol === null»
	            «i.message» = _«i.message»;  
	        «ELSE»
	            «IF i.type == "ufixed"»
	                uint256 «i.message» = uint256(_«i.message»);  // converted to uint256
	             «ELSEIF i.type == "string"»
	                string memory «i.message» = "«i.message»"; 
	            «ELSE»
	                «i.type» «i.message» = _«i.message»;   // Assign using the correct data type
	            «ENDIF»
	        «ENDIF»
	    «ENDFOR»
	'''
	
	def dispatch compileTrueOperateThing(changeExpression operation)''''''
	
	def compileRule(RuleStructure rule)'''
	«FOR i : rule.manyRuleExpression»
		«i.compileManyRuleExpression»
	«ENDFOR»
	'''
	
	def dispatch compileManyRuleExpression(ParallelExpression expression)'''
		«FOR i : expression.ruleExpression»
			«i.compileRuleExpression»
		«ENDFOR»
	'''
		
	def dispatch compileManyRuleExpression(ExclusiveExpression expression)'''
		«FOR i : expression.ruleExpression»
			«i.compileExclusiveRuleExpression»
		«ENDFOR»
	'''
	
	def dispatch compileManyRuleExpression(RegularRuleExpression expression)'''
		«FOR i : expression.ruleExpression»
			«i.compileRuleExpression»
		«ENDFOR»
	'''
	
	def dispatch compileManyRuleExpression(AdditionExpression expression)'''
		«FOR i : expression.ruleExpression»
			«i.compileAdditionalRuleExpression»
		«ENDFOR»
	'''
	
	def compileAdditionalRuleExpression(RuleExpression expression){
		var String code=''''''
		var string1=''
		var link=''
		var setDateString1=''
		var setDateString2=''
		if(expression.setdate!==null){
			setDateString1='uint16 _year,uint8 _months,uint8 _days,uint8 _hours,uint8 _minutes'
			setDateString2=expression.setdate.message+'=convertToTimestamp(_year,_months,_days,_hours,_minutes);'
		}
		if(expression.setdate!==null&&expression.set!==null){
			link=','
		}
		if(expression.repeat===null){
		if( expression.set===null){
			if(expression.totalOperation.person!==null)
				string1="function "+expression.name+"("+setDateString1+") public payable only"+expression.totalOperation.person.name+" unDone(\""+expression.name+"\"){"
			else if(expression.totalOperation.person2!==null)
				string1="function "+expression.name+"("+setDateString1+") public payable only"+expression.totalOperation.person2.name+" unDone(\""+expression.name+"\"){"		
			else
				string1="function "+expression.name+"("+setDateString1+") public payable"+" unDone(\""+expression.name+"\"){"
		}
		if(expression.set!==null)
			if(expression.totalOperation.person!==null)
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") public payable only"+expression.totalOperation.person.name+" unDone(\""+expression.name+"\"){"
			else if(expression.totalOperation.person2!==null)
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") public payable only"+expression.totalOperation.person2.name+" unDone(\""+expression.name+"\"){"
			else
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") public payable"+" unDone(\""+expression.name+"\"){"
		}
		if(expression.repeat!==null){
		if( expression.set===null){
			if(expression.totalOperation.person!==null)
				string1="function "+expression.name+"("+setDateString1+") public payable only"+expression.totalOperation.person.name+"{"
			else if(expression.totalOperation.person2!==null)
				string1="function "+expression.name+"("+setDateString1+") public payable only"+expression.totalOperation.person2.name+"{"		
			else
				string1="function "+expression.name+"("+setDateString1+") public payable {"
		}
		if(expression.set!==null)
			if(expression.totalOperation.person!==null)
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") public payable only"+expression.totalOperation.person.name+"{"
			else if(expression.totalOperation.person2!==null)
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") public payable only"+expression.totalOperation.person2.name+"{"
			else
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") public payable{"
		}	
		var string2=''''''
		if(expression.set!==null)
			string2+=expression.set.compileMessageOperateThing
		var string3=''
		if(expression.totalCondition!==null)
			string3+='if('+expression.totalCondition.compileTotalCondition+'){'
		var string4=''''''
		if(expression.totalOperation!==null)	
		string4+=expression.totalOperation.compileTotalOperation
		
		var string5=''''''
		if(expression.subExpression!==null){
			for(i: expression.subExpression){
				var string6=''
				var string7=''''''
				var string8=''
				var string9=''
				if(i.totalExpression.totalCondition!==null)
					string6+="if("+i.totalExpression.totalCondition.compileTotalCondition+"){"
				string7+=i.totalExpression.totalOperation.compileTotalOperation
				if(i.totalExpression.elseExpression!==null)
					string8='''else{ 
						«i.totalExpression.elseExpression.totalOperation.compileTotalOperation»
						}'''
				if(i.totalExpression.totalCondition!==null)
					string9="}"
				string5+='''
				 	«string6»
				 		«string7»
				 	«string8»
				 		«string9»
				'''
				}
			}
		
		var string6="functionStatus[\""+expression.name+"\"] = true;"
		var string63="functionFinishTime[\""+expression.name+"\"]=block.timestamp;"
		var string62="emit completedRule(msg.sender,\""+expression.name+"\");"
//		var string6="changeRule(\""+expression.name+"\");"
		var string7=''''''
		if(expression.totalCondition!==null)
			string7="}"	
		
		code+='''
		«string1»
			«setDateString2»
			«string2»
			«string3»
				«string4»
				«string5»
				«string6»
				«string63»
				«string62»
			«string7»
		}
		'''
		
		if(expression.elseExpression===null){
			return code
		}
	
		if(expression.elseExpression!==null){
			var string8=''''''
			var string9=''
		if(expression.elseExpression.set===null)
			if(expression.elseExpression.totalOperation.person!==null)
				string9="function else"+expression.name+"() public payable only"+expression.elseExpression.totalOperation.person.name+"{"
			else if(expression.totalOperation.person2!==null)
				string9="function else"+expression.name+"() public payable only"+expression.elseExpression.totalOperation.person2.name+"{"
			else
				string9="function else"+expression.name+"() public payable {"
		if(expression.elseExpression.set!==null)
			if(expression.elseExpression.totalOperation.person!==null)
				string9="function else"+expression.name+"("+expression.elseExpression.set.compileMessageOperate+") public payable only"+expression.elseExpression.totalOperation.person.name+"{"
			else if(expression.elseExpression.totalOperation.person2!==null)
				string9="function else"+expression.name+"("+expression.elseExpression.set.compileMessageOperate+") public payable only"+expression.elseExpression.totalOperation.person2.name+"{"
			else
				string9="function else"+expression.name+"("+expression.elseExpression.set.compileMessageOperate+") public payable {"

		var onlyOne='''bool one=true;
		if(one){
		'''
		var string10=''
		var string11=''
		var string112="emit completedRule(msg.sender,\"else"+expression.name+"\");"
		var string12=''''''
		var string13=''
		if(expression.totalCondition!==null)
			string10+='if(!('+expression.totalCondition.compileTotalCondition+')){'
		string11+=expression.elseExpression.totalOperation.compileTotalOperation
		if(expression.totalCondition!==null)
			string13="}"
		string8='''
			«string9»
				«onlyOne»
				«string10»
					«string11»
					«string112»
				«string13»
		'''
		code+='''
			«string8»
			one=false;
			}
		'''
		return code
		}
	}
	
	def compileExclusiveRuleExpression(RuleExpression expression){
		var String code=''''''
		var string1=''
		var link=''
		var setDateString1=''
		var setDateString2=''
		if(expression.setdate!==null){
			setDateString1='uint16 _year,uint8 _months,uint8 _days,uint8 _hours,uint8 _minutes'
			setDateString2=expression.setdate.message+'=convertToTimestamp(_year,_months,_days,_hours,_minutes);'
		}
		if(expression.setdate!==null&&expression.set!==null){
			link=','
		}
		if(expression.repeat===null){
		if( expression.set===null){
			if(expression.totalOperation.person!==null)
				string1="function "+expression.name+"("+setDateString1+") internal payable onlyState(ContractState) only"+expression.totalOperation.person.name+" unDone(\""+expression.name+"\"){"
			else if(expression.totalOperation.person2!==null)
				string1="function "+expression.name+"("+setDateString1+") internal payable onlyState(ContractState) only"+expression.totalOperation.person2.name+" unDone(\""+expression.name+"\"){"		
			else
				string1="function "+expression.name+"("+setDateString1+") internal payable onlyState(ContractState)"+" unDone(\""+expression.name+"\"){"
		}
		if(expression.set!==null)
			if(expression.totalOperation.person!==null)
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") internal payable onlyState(ContractState) only"+expression.totalOperation.person.name+" unDone(\""+expression.name+"\"){"
			else if(expression.totalOperation.person2!==null)
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") internal payable onlyState(ContractState) only"+expression.totalOperation.person2.name+" unDone(\""+expression.name+"\"){"
			else
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") internal payable onlyState(ContractState)"+" unDone(\""+expression.name+"\"){"
		}
		if(expression.repeat!==null){
		if( expression.set===null){
			if(expression.totalOperation.person!==null)
				string1="function "+expression.name+"("+setDateString1+") internal payable onlyState(ContractState) only"+expression.totalOperation.person.name+"{"
			else if(expression.totalOperation.person2!==null)
				string1="function "+expression.name+"("+setDateString1+") internal payable onlyState(ContractState) only"+expression.totalOperation.person2.name+"{"		
			else
				string1="function "+expression.name+"("+setDateString1+") internal payable onlyState(ContractState){"
		}
		if(expression.set!==null)
			if(expression.totalOperation.person!==null)
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") internal payable onlyState(ContractState) only"+expression.totalOperation.person.name+"{"
			else if(expression.totalOperation.person2!==null)
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") internal payable onlyState(ContractState) only"+expression.totalOperation.person2.name+"{"
			else
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") internal payable onlyState(ContractState){"
		}	
		var string2=''''''
		if(expression.set!==null)
			string2+=expression.set.compileMessageOperateThing
		var string3=''
		if(expression.totalCondition!==null)
			string3+='if('+expression.totalCondition.compileTotalCondition+'){'
		var string4=''''''
		if(expression.totalOperation!==null)	
		string4+=expression.totalOperation.compileTotalOperation
		
		var string5=''''''
		if(expression.subExpression!==null){
			for(i: expression.subExpression){
				var string6=''
				var string7=''''''
				var string8=''
				var string9=''
				if(i.totalExpression.totalCondition!==null)
					string6+="if("+i.totalExpression.totalCondition.compileTotalCondition+"){"
				string7+=i.totalExpression.totalOperation.compileTotalOperation
				if(i.totalExpression.elseExpression!==null)
					string8='''else{ 
						«i.totalExpression.elseExpression.totalOperation.compileTotalOperation»
						}'''
				if(i.totalExpression.totalCondition!==null)
					string9="}"
				string5+='''
				 	«string6»
				 		«string7»
				 	«string8»
				 		«string9»
				'''
				}
			}
		
		var string6="functionStatus[\""+expression.name+"\"] = true;"
		var string63="functionFinishTime[\""+expression.name+"\"]=block.timestamp;"
		var string62="emit completedRule(msg.sender,\""+expression.name+"\");"
//		var string6="changeRule(\""+expression.name+"\");"
		var string7=''''''
		if(expression.totalCondition!==null)
			string7="}"	
		
		code+='''
		«string1»
			«setDateString2»
			«string2»
			«string3»
				«string4»
				«string5»
				«string6»
				«string63»
				«string62»
			«string7»
		}
		'''
		
		if(expression.elseExpression===null){
			return code
		}
	
		if(expression.elseExpression!==null){
			var string8=''''''
			var string9=''
		if(expression.elseExpression.set===null)
			if(expression.elseExpression.totalOperation.person!==null)
				string9="function else"+expression.name+"() public payable onlyState(ContractState) only"+expression.elseExpression.totalOperation.person.name+"{"
			else if(expression.totalOperation.person2!==null)
				string9="function else"+expression.name+"() public payable onlyState(ContractState) only"+expression.elseExpression.totalOperation.person2.name+"{"
			else
				string9="function else"+expression.name+"() public payable onlyState(ContractState){"
		if(expression.elseExpression.set!==null)
			if(expression.elseExpression.totalOperation.person!==null)
				string9="function else"+expression.name+"("+expression.elseExpression.set.compileMessageOperate+") public payable onlyState(ContractState) only"+expression.elseExpression.totalOperation.person.name+"{"
			else if(expression.elseExpression.totalOperation.person2!==null)
				string9="function else"+expression.name+"("+expression.elseExpression.set.compileMessageOperate+") public payable onlyState(ContractState) only"+expression.elseExpression.totalOperation.person2.name+"{"
			else
				string9="function else"+expression.name+"("+expression.elseExpression.set.compileMessageOperate+") public payable onlyState(ContractState) {"

		var onlyOne='''bool one=true;
		if(one){
		'''
		var string10=''
		var string11=''
		var string112="emit completedRule(msg.sender,\"else"+expression.name+"\");"
		var string12=''''''
		var string13=''
		if(expression.totalCondition!==null)
			string10+='if(!('+expression.totalCondition.compileTotalCondition+')){'
		string11+=expression.elseExpression.totalOperation.compileTotalOperation
		if(expression.totalCondition!==null)
			string13="}"
		string8='''
			«string9»
				«onlyOne»
				«string10»
					«string11»
					«string112»
				«string13»
		'''
		code+='''
			«string8»
			one=false;
			}
		'''
		return code
		}
	}
	
	def compileRuleExpression(RuleExpression expression){
		var String code=''''''
		var string1=''
		var link=''
		var setDateString1=''
		var setDateString2=''
		if(expression.setdate!==null){
			setDateString1='uint16 _year,uint8 _months,uint8 _days,uint8 _hours,uint8 _minutes'
			setDateString2=expression.setdate.message+'=convertToTimestamp(_year,_months,_days,_hours,_minutes);'
		}
		if(expression.setdate!==null&&expression.set!==null){
			link=','
		}
		if(expression.repeat===null){
		if( expression.set===null){
			if(expression.totalOperation.person!==null)
				string1="function "+expression.name+"("+setDateString1+") public payable onlyState(ContractState) only"+expression.totalOperation.person.name+" unDone(\""+expression.name+"\"){"
			else if(expression.totalOperation.person2!==null)
				string1="function "+expression.name+"("+setDateString1+") public payable onlyState(ContractState) only"+expression.totalOperation.person2.name+" unDone(\""+expression.name+"\"){"		
			else
				string1="function "+expression.name+"("+setDateString1+") public payable onlyState(ContractState)"+" unDone(\""+expression.name+"\"){"
		}
		if(expression.set!==null)
			if(expression.totalOperation.person!==null)
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") public payable onlyState(ContractState) only"+expression.totalOperation.person.name+" unDone(\""+expression.name+"\"){"
			else if(expression.totalOperation.person2!==null)
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") public payable onlyState(ContractState) only"+expression.totalOperation.person2.name+" unDone(\""+expression.name+"\"){"
			else
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") public payable onlyState(ContractState)"+" unDone(\""+expression.name+"\"){"
		}
		if(expression.repeat!==null){
		if( expression.set===null){
			if(expression.totalOperation.person!==null)
				string1="function "+expression.name+"("+setDateString1+") public payable onlyState(ContractState) only"+expression.totalOperation.person.name+" {"
			else if(expression.totalOperation.person2!==null)
				string1="function "+expression.name+"("+setDateString1+") public payable onlyState(ContractState) only"+expression.totalOperation.person2.name+" {"		
			else
				string1="function "+expression.name+"("+setDateString1+") public payable onlyState(ContractState)"+" {"
		}
		if(expression.set!==null)
			if(expression.totalOperation.person!==null)
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") public payable onlyState(ContractState) only"+expression.totalOperation.person.name+" {"
			else if(expression.totalOperation.person2!==null)
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") public payable onlyState(ContractState) only"+expression.totalOperation.person2.name+" {"
			else
				string1="function "+expression.name+"("+setDateString1+link+expression.set.compileMessageOperate+") public payable onlyState(ContractState)"+" {"
		}	
		var string2=''''''
		if(expression.set!==null)
			string2+=expression.set.compileMessageOperateThing
		var string3=''
		if(expression.totalCondition!==null)
			string3=string3+'if('+expression.totalCondition.compileTotalCondition+'){'
		var string4=''''''	
		string4+=expression.totalOperation.compileTotalOperation
		
		var string5=''''''
		if(expression.subExpression!==null){
			for(i: expression.subExpression){
				var string6=''
				var string7=''''''
				var string8=''
				var string9=''
				if(i.totalExpression.totalCondition!==null)
					string6+='if('+i.totalExpression.totalCondition.compileTotalCondition+'){'
				string7+=i.totalExpression.totalOperation.compileTotalOperation
				if(i.totalExpression.elseExpression!==null)
					string8='''else{ 
						«i.totalExpression.elseExpression.totalOperation.compileTotalOperation»
						}'''
				if(i.totalExpression.totalCondition!==null)
					string9="}"
				string5+='''
				 	«string6»
				 		«string7»
				 	«string8»
				 	«string9»
				'''
				}
			}
		
		var string6="functionStatus[\""+expression.name+"\"] = true;"
		var string63="functionFinishTime[\""+expression.name+"\"]=block.timestamp;"
		var string62="emit completedRule(msg.sender,\""+expression.name+"\");"
//		var string6="changeRule(\""+expression.name+"\");"
		var string7=''''''
		if(expression.totalCondition!==null)
			string7="}"	
		
		code+='''
		«string1»
			«setDateString2»
			«string2»
			«string3»
				«string4»
				«string5»
				«string6»
				«string63»
				«string62»
			«string7»
		}
		'''
		
		if(expression.elseExpression===null){
			return code
		}
	
		if(expression.elseExpression!==null){
			var string8=''''''
			var string9=''
		if(expression.elseExpression.set===null)
			if(expression.elseExpression.totalOperation.person!==null)
				string9="function else"+expression.name+"() public payable onlyState(ContractState) only"+expression.elseExpression.totalOperation.person.name+" unDone(\""+expression.name+"\"){"
			else if(expression.totalOperation.person2!==null)
				string9="function else"+expression.name+"() public payable onlyState(ContractState) only"+expression.elseExpression.totalOperation.person2.name+" unDone(\""+expression.name+"\"){"
			else
				string9="function else"+expression.name+"() public payable onlyState(ContractState) unDone(\""+expression.name+"\"){"
		if(expression.elseExpression.set!==null)
			if(expression.elseExpression.totalOperation.person!==null)
				string9="function else"+expression.name+"("+expression.elseExpression.set.compileMessageOperate+") public payable onlyState(ContractState) only"+expression.elseExpression.totalOperation.person.name+" unDone(\""+expression.name+"\"){"
			else if(expression.elseExpression.totalOperation.person2!==null)
				string9="function else"+expression.name+"("+expression.elseExpression.set.compileMessageOperate+") public payable onlyState(ContractState) only"+expression.elseExpression.totalOperation.person2.name+" unDone(\""+expression.name+"\"){"
			else
				string9="function else"+expression.name+"("+expression.elseExpression.set.compileMessageOperate+") public payable onlyState(ContractState) unDone(\""+expression.name+"\"){"

		var onlyOne='''bool one=true;
		if(one){
		'''
		var string10=''
		var string11=''
		var string112="emit completedRule(msg.sender,\"else"+expression.name+"\");"
		var string12=''''''
		var string13=''
		if(expression.totalCondition!==null)
			string10+='if(!('+expression.totalCondition.compileTotalCondition+')){'
		string11+=expression.elseExpression.totalOperation.compileTotalOperation
		if(expression.totalCondition!==null)
			string13="}"
		if(expression.totalCondition!==null)
			string12="}"
		string8='''
			«string9»
				«onlyOne»
				«string10»
					«string11»
					«string112»
				«string13»
			«string12»
		'''
		code+='''
			«string8»
			one=false;
			}
		'''
		return code
		}
	}
	
	def compileTotalCondition(TotalCondition condition){
		var String myString = ''
		if(condition.condition!==null)
		if(condition.condition.no!==null)
			myString=myString+'!'+condition.condition.condition.compileTrueCondition
			else
			myString=myString+condition.condition.condition.compileTrueCondition
		if(condition.linkCondition!==null)
			if(condition.linkCondition.no!==null)
				myString=myString+'!'+condition.linkCondition.linkCondition.name+'()'
			else myString=myString+condition.linkCondition.linkCondition.name+'()'
		for(i: condition.andorcondition){
			if(i.link=="and")
				myString=myString+'&&'
			else myString=myString+'||'
			if(i.condition!==null)
			if(i.condition.no!==null)
				myString=myString+'!'+i.condition.condition.compileTrueCondition
			else
				myString=myString+i.condition.condition.compileTrueCondition
			if(i.linkCondition!==null)
				if(i.linkCondition.no!==null)
					myString=myString+'!'+i.linkCondition.linkCondition.name+'()'
				else
					myString=myString+i.linkCondition.linkCondition.name+'()'
		}
		return myString
	}

	def compileTotalOperation(TotalOperation operation){
		var code=''''''
		var string1=''''''
		string1+='''
		«IF operation.timePoint!==null»
			«operation.timePoint.compileTimePoint»
		«ENDIF»
		'''
		if(operation.failresult!==null){
		string1+='''
			bool completed«con» = false;
			«IF operation.firstOperation!==null»
				«operation.firstOperation.compileTrueOperate»
			«ENDIF»
			«IF operation.linkOperation!==null»
				«operation.linkOperation.compilelinkOperate»
			«ENDIF»
			«FOR i: operation.andor»
				«IF i.firstOperation!==null»
					«i.firstOperation.compileTrueOperate»
				«ENDIF»
				«IF i.linkOperation!==null»
					«i.linkOperation.compilelinkOperate»
				«ENDIF»
			«ENDFOR»
			completed«con» = true;
			'''
			if(operation.timePoint!==null)
				string1+='}'
			string1+='''
			if(!completed«con»){
				«operation.failresult.compileFailResult»
			}
			'''

			con=con+1
		}
		if(operation.failresult===null){
			string1+='''
			«IF operation.firstOperation!==null»
				«operation.firstOperation.compileTrueOperate»
			«ENDIF»
			«IF operation.linkOperation!==null»
				«operation.linkOperation.compilelinkOperate»
			«ENDIF»
			«FOR i: operation.andor»
				«IF i.firstOperation!==null»
					«i.firstOperation.compileTrueOperate»
				«ENDIF»
				«IF i.linkOperation!==null»
					«i.linkOperation.compilelinkOperate»
				«ENDIF»
			«ENDFOR»
			'''
			if(operation.timePoint!==null)
				string1+='}'
		}
		var string2=''''''	
		for(i:operation.thenoperation){
			string2+='''
			«IF i.timePoint!==null»
				«i.timePoint.compileTimePoint»
			«ENDIF»'''
			if(i.failresult!==null){
				string2+='''
				bool completed«con» = false;
				«IF i.followingOperation!==null»
					«i.followingOperation.compileTrueOperate»
				«ENDIF»
				«IF i.linkOperation!==null»
					«i.linkOperation.compilelinkOperate»
				«ENDIF»
				«FOR j: i.andor»
					«IF j.firstOperation!==null»
						«j.firstOperation.compileTrueOperate»
					«ENDIF»
					«IF j.linkOperation!==null»
						«j.linkOperation.compilelinkOperate»
					«ENDIF»
				«ENDFOR»
				completed«con» = true;
				'''
				if(i.timePoint!==null)
					string2+='}'
				string2+='''
				if(!completed«con»){
					«i.failresult.compileFailResult»
				}
				'''
				con=con+1
			}
			
			if(i.failresult===null)
			string2+='''
				«IF i.followingOperation!==null»
					«i.followingOperation.compileTrueOperate»
				«ENDIF»
				«IF i.linkOperation!==null»
					«i.linkOperation.compilelinkOperate»
				«ENDIF»
				«FOR j: i.andor»
					«IF j.firstOperation!==null»
						«j.firstOperation.compileTrueOperate»
					«ENDIF»
					«IF j.linkOperation!==null»
						«j.linkOperation.compilelinkOperate»
					«ENDIF»
				«ENDFOR»
			'''
			if(i.timePoint!==null)
					string2+='}'
		}
		code+='''
		«string1»
		«string2»
		'''
		return code
	}
	
	def compilelinkOperate(OperateLink link)'''
		«link.name»();
	'''
	
	def compileFailResult(FailResult result){
		var code=''''''
		var string1=''''''
		string1+='''
		«IF result.timePoint!==null»
			«result.timePoint.compileTimePoint»
		«ENDIF»
		«IF result.followingOperation!==null»
			«result.followingOperation.compileTrueOperate»
		«ENDIF»
		«IF result.linkOperation!==null»
			«result.linkOperation.compilelinkOperate»
		«ENDIF»
		«FOR i: result.andor»
			«IF i.firstOperation!==null»
				«i.firstOperation.compileTrueOperate»
			«ENDIF»
			«IF i.linkOperation!==null»
				«i.linkOperation.compilelinkOperate»
			«ENDIF»
		«ENDFOR»
		'''
		
		var string2=''''''
		for(i:result.thenoperation){
			string2+='''
			«IF i.timePoint!==null»
				«i.timePoint.compileTimePoint»
			«ENDIF»
			'''
			if(i.failresult!==null){
				string2+='''
				bool completed«con» = false;
				«IF i.followingOperation!==null»
					«i.followingOperation.compileTrueOperate»
				«ENDIF»
				«IF i.linkOperation!==null»
					«i.linkOperation.compilelinkOperate»
				«ENDIF»
				«FOR j: i.andor»
					«IF j.firstOperation!==null»
						«j.firstOperation.compileTrueOperate»
					«ENDIF»
					«IF j.linkOperation!==null»
						«j.linkOperation.compilelinkOperate»
					«ENDIF»
				«ENDFOR»
				completed«con» = true;
				'''
				if(result.timePoint!==null)
					string2+='}'
				string2+='''
				if(!completed«con»){
					«i.failresult.compileFailResult»
				}
				'''
				con=con+1
			}
			string2+='''
			«IF i.failresult===null»
				«IF i.followingOperation!==null»
					«i.followingOperation.compileTrueOperate»
				«ENDIF»
				«IF i.linkOperation!==null»
					«i.linkOperation.compilelinkOperate»
				«ENDIF»
				«FOR j: i.andor»
					«IF j.firstOperation!==null»
						«j.firstOperation.compileTrueOperate»
					«ENDIF»
					«IF j.linkOperation!==null»
						«j.linkOperation.compilelinkOperate»
					«ENDIF»
				«ENDFOR»
			«ENDIF»
			'''
		}
		code+='''
		«string1»
		«string2»
		'''
		return code
	}
	
	def dispatch compileTimePoint(WithinPoint timepoint){
		var string='''
			«IF timepoint.time=='months'»
				uint256 endTime«time»=functionFinishTime["«timepoint.thing.name»"]+60*60*24*30*«timepoint.number»;
			«ELSEIF timepoint.time=='days'»
				uint256 endTime«time»=functionFinishTime["«timepoint.thing.name»"]+60*60*24*«timepoint.number»;
			«ELSEIF timepoint.time=='hours'»
				uint256 endTime«time»=functionFinsihTime["«timepoint.thing.name»"]+60*60*«timepoint.number»;
			«ENDIF»
			if(!isTime(endTime«time»)){
			'''
			time=time+1
		return string
	}
	
	def dispatch compileTimePoint(BeforePoint timepoint){
		if(timepoint.lineTime!==null)
//		datetime.toTimestamp("+condition.date.value.compilevalue+
			return "if(!isTime(datetime.toTimestamp("+timepoint.lineTime.compilevalue+"))){"
		else if(timepoint.value!==null)
			return "if(!isTime("+timepoint.value.name+")){"
	}
	
	def dispatch compileTimePoint2(WithinPoint timepoint){
		var string='''
			«IF timepoint.time=='months'»
				!isTime(functionFinishTime["«timepoint.thing.name»"]+60*60*24*30*«timepoint.number»)
			«ELSEIF timepoint.time=='days'»
				!isTime(functionFinishTime["«timepoint.thing.name»"]+60*60*24*«timepoint.number»)
			«ELSEIF timepoint.time=='hours'»
				!isTime(functionFinsihTime["«timepoint.thing.name»"]+60*60*«timepoint.number»)
			«ENDIF»
			'''
		return string
	}
	
	def dispatch compileTimePoint2(BeforePoint timepoint){
		if(timepoint.lineTime!==null)
//		datetime.toTimestamp("+condition.date.value.compilevalue+
			return "!isTime(datetime.toTimestamp("+timepoint.lineTime.compilevalue+"))"
		else if(timepoint.value!==null)
			return "!isTime("+timepoint.value.name+")"
	}
	
	//时间转换方法
	def  boolean isLeapYear(int year){
        if (year % 4 != 0) {
            return false;
        }
        if (year % 100 != 0) {
            return true;
        }
        if (year % 400 != 0) {
            return false;
        }
        return true;
    }

	def int getDaysInMonth(int month, int year) {
	    switch month {
	        case 1: return 31
	        case 3: return 31
	        case 5: return 31
	        case 7: return 31
	        case 8: return 31
	        case 10: return 31
	        case 12: return 31
	        case 4: return 30
	        case 6: return 30
	        case 9: return 30
	        case 11: return 30
	        default: return isLeapYear(year) ? 29 : 28
	    }
	}

    def long toTimestamp(int year, int month, int day,int hour,int min){
        if(!(year >= 1970)) println("Year must be 1970 or later");
        if(!(month >= 1 && month <= 12)) println("Invalid month");
		if(!(day >= 1 && day <= getDaysInMonth(month, year))) println("Invalid day");
		if(!(hour >= 0 && hour <= 23)) println("Invalid hour");
		
        var total = 0;
        for (var i = 1970; i < year; i++) {
            total += isLeapYear(i) ? 366 : 365;
        }

        for (var i = 1; i < month; i++) {
            total += getDaysInMonth(i, year);
        }

        total += day - 1;
        val timestamp = total*60*60*24 + hour * 60*60 + min * 60;
        return timestamp;
    }
	
}
