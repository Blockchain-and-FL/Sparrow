contract simpleRent{
	
 party Lessor{
  name:String
  amount:Money
  confirmContinue(result:Boolean)
  endRent()
 }
 
 party Lessee{
  name:String
  amount:Money
  payFirst()
  payRegular()
  continue(days:Integer)
 }
 
 thing: Thing
 info1:contractInfo
 continueDays:Integer
 continue:Boolean
 	
 	term no1: Lessee can payFirst
 	when before info1::startDate
 	while transfer $info1::rent+info1::depositMoney to Lessor.
 	
 	term no2: Lessee can payRegular
 	when within 1 day after info1::payDate+info1::payDuration
 	while transfer $info1::rent to Lessor
 	where info1::payDate=now.
 
 	// wrong sequence
 	term no3: Lessee can continue
 	when before info1::finishDate
 	while transfer $info1::continueRent*continueDays to Lessor
 	where continueDays=days.
 	
 	// wrong sequence
 	term no4_1: Lessor can confirmContinue
 	when after Lessee did continue and continue=true
 	where continue=result and info1::finishDate=info1::finishDate+continueDays.
 	
 	term no4_2: Lessor can confirmContinue
 	when after Lessee did continue and continue=false
 	while transfer $info1::continueRent*continueDays to Lessee
 	where continue=result.
 	
 	term no5: Lessor can endRent
 	when after info1::finishDate
 	while transfer $info1::depositMoney to Lessee::amount.
 	
  type contractInfo{
  payDate:Date
  signTime:Date
  rent:Money
  continueRent:Money
  depositMoney:Money
  startDate:Date
  finishDate:Date
  payDuration:Integer
  }
 
  asset Thing{
  info
  {
   name:String
   day_rent:Integer
   days:Integer
  }
  right{
  }
 }

 }
