Contract PrinterPurchase {
	PA Person
	CA Ca
	Token token {
	  string name,         // Product name (e.g., printer)
	  string ID,           // Product ID (e.g., CANONLBP2900+)
	  uint number,         // Number of printers purchased
	  ufixed unit_price,   // Price per printer
	  uint price           // Total price for all printers
	}
	init {
		s Person Buyer = ('Huangshi No. 2 Middle School',
			a'0x5B38Da6a701c568545dCfcB03FcB875f56beddC4')  // Buyer's details
		s Person Seller = ('The Yellowstone Difficult Area Dufenghe Skills Full Line',
			a'0x5B38Da6a701c568545dCfcB03FcB875f56beddC4')  // Seller's details
		s Ca Arbitration = ('arbitration institution',
			a'0x5B38Da6a701c568545dCfcB03FcB875f56beddC4')  // Arbitration institution
		o token Service = ('printer', 'CANONLBP2900+', 1, 1600, 1600)  // Printer details
	}
	
	ContractMessage {
	  string place = 'Huangshi No. 2 Middle School',  // Delivery location
	  date giveTime = 2022/12/16, 00:00,             // Delivery time
	  string faultName = '',                         // Fault identifier in case of arbitration
	  ufixed amount = 0,                             // Arbitration penalty amount
	  bool checkResult = false,                      // Inspection result
	  duration period = 30 days,                     // Grace period for late delivery
	  uint dayNum = 0,                               // Number of late days
	  ufixed Proportion = 0.05                       // Penalty proportion for late delivery
	}
	
	Conditions [
		delivery1: isDone(rule2) And within 5 days after rule2,     // Delivery condition: on-time delivery + 5-day buffer
		delivery2: isDone(rule2_2) And within 5 days after rule2_2  // Late delivery + 5-day buffer
	]
	
	Operations [
		end: change(ContractState, finish),        // Mark contract as completed
		end2: change(ContractState, terminate)     // Mark contract as terminated
	]
	
	Rule {
		// Rule 2: Seller must deliver the printer on time (i.e., on the specified giveTime)
		rule2:
		Con: logic(now, giveTime, ==),
		Seller;
		
		// Rule 2_2: Seller delivers late but within the 30-day grace period
		rule2_2:
		setMessage(uint dayNum)
		Con: isTime(giveTime) and !isTime(giveTime + period) and !isDone(rule2),
		Seller transfer(Buyer, dayNum * Proportion * o Service.price);
		
		// Rule 2_3: Seller fails to deliver within the 30-day grace period, contract terminated
		rule2_3:
		Con: isTime(giveTime + period) and !isDone(rule2) and !isDone(rule2_2),
		Buyer change(ContractState, terminate);
		
		// Rule 3: Buyer confirms delivery and inspects the printer; if quality is bad, contract is terminated
		rule3:
		setMessage(bool checkResult)
		Con: delivery1 or delivery2,
		Buyer transfer(Seller, o Service.price) and end
		sub {
			Con: !isTrue(checkResult),
			change(ContractState, terminate);
		};
		
		// Rule 4: Buyer returns the printer without specific reasons and terminates the contract
		rule4:
		Con: delivery1 or delivery2 and !isDone(rule3),
		Buyer transfer(Seller, o Service.price * Proportion) and change(ContractState, terminate);
		
		// Arbitration clause for dispute resolution
		Addition [
		arbitrationClause:
		setMessage(string faultName, ufixed amount)
		Arbitration;
		
		// If Buyer is at fault, they pay compensation
		buyer_fault:
		Con: isDone(arbitrationClause) and logic(faultName, s Buyer.name, ==),
		Buyer transfer(Seller, amount) and end2;
		
		// If Seller is at fault, they pay compensation
		seller_fault:
		Con: isDone(arbitrationClause) and logic(faultName, s Seller.name, ==),
		Seller transfer(Buyer, amount) and end2;
		]
	}
	
	require: isDone, isTime, isTrue, transfer;
}
