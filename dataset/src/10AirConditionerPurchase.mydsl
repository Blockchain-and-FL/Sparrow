Contract AirConditionPurchase {
	PA Person
	CA Ca
	Token token {
	  string name,              // Product name (e.g., GREE AirCondition)
	  string ID,                // Product ID (e.g., 1KFR-72LW/(72542)FNhAa -B1JYO1)
	  uint number,              // Number of units
	  ufixed unit_price,        // Price per unit
	  uint price                // Total price for all units
	}
	
	init {
		s Person Buyer = ('Hubei Industrial Vocational and Technical College',
			a'0x5B38Da6a701c568545dCfcB03FcB875f56beddC4')  // Buyer's details
		s Person Seller = ('Shiyan Shengda Feike Industry and Trade Co., Ltd.',
			a'0x5B38Da6a701c568545dCfcB03FcB875f56beddC4')  // Seller's details
		s Ca Arbitration = ('arbitration institution',
			a'0x5B38Da6a701c568545dCfcB03FcB875f56beddC4')  // Arbitration details
		o token Service = ('GREE AirCondition', '1KFR-72LW/(72542)FNhAa -B1JYO1', 1, 6800, 6800)  // Product details
	}
	
	ContractMessage {
	  string place = 'Administration Building',  // Delivery location
	  date giveTime = 2023/01/19, 00:00,          // Delivery time
	  string faultName = '',                        // Fault name (if any)
	  ufixed amount = 0,                           // Amount for penalties
	  bool checkResult = false,                    // Quality check result
	  duration period = 30 days,                   // Period for late delivery
	  uint dayNum = 0,                            // Number of days late
	  ufixed Proportion = 0.05                     // Proportion for late delivery penalty
	}
	
	Conditions [
		delivery1: isDone(rule2) And within 5 days after rule2,
		delivery2: isDone(rule2_2) And within 5 days after rule2_2
	]
	
	Operations [
		end: change(ContractState, finish),         // Mark contract as finished
		end2: change(ContractState, terminate)      // Terminate the contract
	]
	
	Rule {		
		// Rule 1: Seller must deliver the goods on time
		rule2:
		Con: logic(now, giveTime, ==),
		Seller;
		
		// Rule 2: Seller can deliver late but not exceeding 30 days
		rule2_2:
		setMessage(uint dayNum)
		Con: isTime(giveTime) and !isTime(giveTime + period) and !isDone(rule2),
		Seller transfer(Buyer, dayNum * Proportion * o Service.price);
		
		// Rule 3: If delivery exceeds 30 days, contract is terminated
		rule2_3:
		Con: isTime(giveTime + period) and !isDone(rule2) and !isDone(rule2_2),
		Buyer change(ContractState, terminate);
		
		// Rule 4: Buyer confirms receipt, quality check, and return policy
		rule3:
		setMessage(bool checkResult)
		Con: delivery1 or delivery2,
		Buyer transfer(Seller, o Service.price) and end
		sub {
			Con: !isTrue(checkResult),
			change(ContractState, terminate);
		};
		
		// Rule 5: Buyer can return the goods without reason
		rule4:
		Con: delivery1 or delivery2 and !isDone(rule3),
		Buyer transfer(Seller, o Service.price * Proportion) and change(ContractState, terminate);
		
		// Arbitration clause for fault determination
		Addition [
			arbitrationClause:
			setMessage(string faultName, ufixed amount)
			Arbitration;
			
			buyer_fault:
			Con: isDone(arbitrationClause) and logic(faultName, s Buyer.name, ==),
			Buyer transfer(Seller, amount) and end2;
			
			seller_fault:
			Con: isDone(arbitrationClause) and logic(faultName, s Seller.name, ==),
			Seller transfer(Buyer, amount) and end2;
		]
	}
	
	require: isDone, isTime, isTrue, transfer;
}
